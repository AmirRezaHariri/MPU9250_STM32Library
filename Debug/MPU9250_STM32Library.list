
MPU9250_STM32Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c0  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08008fc0  08008fc0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fc0  08008fc0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08008fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200000b0  08009078  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08009078  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f0d  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002706  00000000  00000000  00034fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000376f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000384b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007866  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011487  00000000  00000000  00040a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917a1  00000000  00000000  00051ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004494  00000000  00000000  000e36cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007de8 	.word	0x08007de8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	08007de8 	.word	0x08007de8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <__aeabi_f2iz>:
 8000f60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f68:	d30f      	bcc.n	8000f8a <__aeabi_f2iz+0x2a>
 8000f6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f72:	d90d      	bls.n	8000f90 <__aeabi_f2iz+0x30>
 8000f74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f80:	fa23 f002 	lsr.w	r0, r3, r2
 8000f84:	bf18      	it	ne
 8000f86:	4240      	negne	r0, r0
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f94:	d101      	bne.n	8000f9a <__aeabi_f2iz+0x3a>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d105      	bne.n	8000fa6 <__aeabi_f2iz+0x46>
 8000f9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9e:	bf08      	it	eq
 8000fa0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr

08000fac <__aeabi_f2uiz>:
 8000fac:	0042      	lsls	r2, r0, #1
 8000fae:	d20e      	bcs.n	8000fce <__aeabi_f2uiz+0x22>
 8000fb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb4:	d30b      	bcc.n	8000fce <__aeabi_f2uiz+0x22>
 8000fb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fbe:	d409      	bmi.n	8000fd4 <__aeabi_f2uiz+0x28>
 8000fc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2uiz+0x32>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d102      	bne.n	8000fe4 <__aeabi_f2uiz+0x38>
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	4770      	bx	lr
 8000fe4:	f04f 0000 	mov.w	r0, #0
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f005 fe9d 	bl	8006d34 <asinf>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f005 feb5 	bl	8006d80 <atan2f>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b0a8      	sub	sp, #160	; 0xa0
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f003 fd4b 	bl	8004ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 faff 	bl	800162c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fbbb 	bl	80017a8 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8001032:	f000 fb4b 	bl	80016cc <_ZL11MX_CAN_Initv>
  MX_I2C2_Init();
 8001036:	f000 fb83 	bl	8001740 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */
  TxHeader.IDE = CAN_ID_STD;
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <main+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x69;
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <main+0xc0>)
 8001042:	2269      	movs	r2, #105	; 0x69
 8001044:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <main+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8 ;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <main+0xc0>)
 800104e:	2208      	movs	r2, #8
 8001050:	611a      	str	r2, [r3, #16]

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001052:	2301      	movs	r3, #1
 8001054:	67bb      	str	r3, [r7, #120]	; 0x78
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001056:	2312      	movs	r3, #18
 8001058:	66fb      	str	r3, [r7, #108]	; 0x6c
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800105a:	2300      	movs	r3, #0
 800105c:	66bb      	str	r3, [r7, #104]	; 0x68
  canfilterconfig.FilterIdHigh = 0x446<<5;
 800105e:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
  canfilterconfig.FilterIdLow = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	65fb      	str	r3, [r7, #92]	; 0x5c
  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8001068:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800106e:	2300      	movs	r3, #0
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001072:	2300      	movs	r3, #0
 8001074:	673b      	str	r3, [r7, #112]	; 0x70
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001076:	2301      	movs	r3, #1
 8001078:	677b      	str	r3, [r7, #116]	; 0x74
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800107a:	2314      	movs	r3, #20
 800107c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800107e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001082:	4619      	mov	r1, r3
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <main+0xc4>)
 8001086:	f003 fe9c 	bl	8004dc2 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <main+0xc4>)
 800108c:	f003 ff62 	bl	8004f54 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001090:	2102      	movs	r1, #2
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <main+0xc4>)
 8001094:	f003 ffa2 	bl	8004fdc <HAL_CAN_ActivateNotification>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <main+0xc8>)
 80010a0:	f004 fa2a 	bl	80054f8 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80010a4:	20fa      	movs	r0, #250	; 0xfa
 80010a6:	f003 fd6d 	bl	8004b84 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <main+0xc8>)
 80010b2:	f004 fa21 	bl	80054f8 <HAL_GPIO_WritePin>

  MPU9250_DMP imu;
 80010b6:	463b      	mov	r3, r7
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd95 	bl	8001be8 <_ZN11MPU9250_DMPC1Ev>
  while (imu.begin() != INV_SUCCESS){
 80010be:	463b      	mov	r3, r7
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fda9 	bl	8001c18 <_ZN11MPU9250_DMP5beginEv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <main+0xcc>
    HAL_Delay(5000);
 80010d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80010da:	f003 fd53 	bl	8004b84 <HAL_Delay>
  while (imu.begin() != INV_SUCCESS){
 80010de:	e7ee      	b.n	80010be <main+0x9e>
 80010e0:	20000148 	.word	0x20000148
 80010e4:	200000cc 	.word	0x200000cc
 80010e8:	40010c00 	.word	0x40010c00
  }
  imu.setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 80010ec:	463b      	mov	r3, r7
 80010ee:	2179      	movs	r1, #121	; 0x79
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 feff 	bl	8001ef4 <_ZN11MPU9250_DMP10setSensorsEh>
  imu.setGyroFSR(2000);
 80010f6:	463b      	mov	r3, r7
 80010f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fe37 	bl	8001d70 <_ZN11MPU9250_DMP10setGyroFSREt>
  imu.setAccelFSR(2);
 8001102:	463b      	mov	r3, r7
 8001104:	2102      	movs	r1, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fe4b 	bl	8001da2 <_ZN11MPU9250_DMP11setAccelFSREh>
  imu.setLPF(5);
 800110c:	463b      	mov	r3, r7
 800110e:	2105      	movs	r1, #5
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fe61 	bl	8001dd8 <_ZN11MPU9250_DMP6setLPFEt>
  imu.setSampleRate(1000);
 8001116:	463b      	mov	r3, r7
 8001118:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fe6a 	bl	8001df6 <_ZN11MPU9250_DMP13setSampleRateEt>
  imu.setCompassSampleRate(100);
 8001122:	463b      	mov	r3, r7
 8001124:	2164      	movs	r1, #100	; 0x64
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fe74 	bl	8001e14 <_ZN11MPU9250_DMP20setCompassSampleRateEt>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	48c1      	ldr	r0, [pc, #772]	; (8001438 <main+0x418>)
 8001134:	f004 f9e0 	bl	80054f8 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8001138:	20fa      	movs	r0, #250	; 0xfa
 800113a:	f003 fd23 	bl	8004b84 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	48bc      	ldr	r0, [pc, #752]	; (8001438 <main+0x418>)
 8001146:	f004 f9d7 	bl	80054f8 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800114a:	20fa      	movs	r0, #250	; 0xfa
 800114c:	f003 fd1a 	bl	8004b84 <HAL_Delay>

  // Initialize the digital motion processor
  imu.dmpBegin(DMP_FEATURE_SEND_RAW_ACCEL | // Send accelerometer data
 8001150:	463b      	mov	r3, r7
 8001152:	22c8      	movs	r2, #200	; 0xc8
 8001154:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd8b 	bl	8001c74 <_ZN11MPU9250_DMP8dmpBeginEtt>
               DMP_FEATURE_GYRO_CAL       | // Calibrate the gyro data
               DMP_FEATURE_SEND_CAL_GYRO  | // Send calibrated gyro data
               DMP_FEATURE_6X_LP_QUAT     , // Calculate quat's with accel/gyro
               200);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	48b4      	ldr	r0, [pc, #720]	; (8001438 <main+0x418>)
 8001166:	f004 f9c7 	bl	80054f8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  long long tmp = 0;
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  while (1)
  {
	  if (imu.fifoAvailable()){
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fe8b 	bl	8001e94 <_ZN11MPU9250_DMP13fifoAvailableEv>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f3      	beq.n	8001176 <main+0x156>
	    if (imu.dmpUpdateFifo() == INV_SUCCESS){
 800118e:	463b      	mov	r3, r7
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ffcb 	bl	800212c <_ZN11MPU9250_DMP13dmpUpdateFifoEv>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0e7      	beq.n	8001176 <main+0x156>
		  imu.update(UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 80011a6:	463b      	mov	r3, r7
 80011a8:	210e      	movs	r1, #14
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 feb1 	bl	8001f12 <_ZN11MPU9250_DMP6updateEh>

		  ax = imu.calcAccel(imu.ax);
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	463b      	mov	r3, r7
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f845 	bl	8002246 <_ZN11MPU9250_DMP9calcAccelEi>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a9f      	ldr	r2, [pc, #636]	; (800143c <main+0x41c>)
 80011c0:	6013      	str	r3, [r2, #0]
		  ay = imu.calcAccel(imu.ay);
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	463b      	mov	r3, r7
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f83c 	bl	8002246 <_ZN11MPU9250_DMP9calcAccelEi>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a9b      	ldr	r2, [pc, #620]	; (8001440 <main+0x420>)
 80011d2:	6013      	str	r3, [r2, #0]
		  az = imu.calcAccel(imu.az);
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	463b      	mov	r3, r7
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f833 	bl	8002246 <_ZN11MPU9250_DMP9calcAccelEi>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a98      	ldr	r2, [pc, #608]	; (8001444 <main+0x424>)
 80011e4:	6013      	str	r3, [r2, #0]

		  gx = imu.calcGyro(imu.gx);
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	463b      	mov	r3, r7
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 f843 	bl	8002278 <_ZN11MPU9250_DMP8calcGyroEi>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a94      	ldr	r2, [pc, #592]	; (8001448 <main+0x428>)
 80011f6:	6013      	str	r3, [r2, #0]
		  gy = imu.calcGyro(imu.gy);
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	463b      	mov	r3, r7
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f83a 	bl	8002278 <_ZN11MPU9250_DMP8calcGyroEi>
 8001204:	4603      	mov	r3, r0
 8001206:	4a91      	ldr	r2, [pc, #580]	; (800144c <main+0x42c>)
 8001208:	6013      	str	r3, [r2, #0]
		  gz = imu.calcGyro(imu.gz);
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	463b      	mov	r3, r7
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f001 f831 	bl	8002278 <_ZN11MPU9250_DMP8calcGyroEi>
 8001216:	4603      	mov	r3, r0
 8001218:	4a8d      	ldr	r2, [pc, #564]	; (8001450 <main+0x430>)
 800121a:	6013      	str	r3, [r2, #0]

		  mx = imu.calcMag(imu.mx);
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	463b      	mov	r3, r7
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 f83c 	bl	80022a0 <_ZN11MPU9250_DMP7calcMagEi>
 8001228:	4603      	mov	r3, r0
 800122a:	4a8a      	ldr	r2, [pc, #552]	; (8001454 <main+0x434>)
 800122c:	6013      	str	r3, [r2, #0]
		  my = imu.calcMag(imu.my);
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	463b      	mov	r3, r7
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f001 f833 	bl	80022a0 <_ZN11MPU9250_DMP7calcMagEi>
 800123a:	4603      	mov	r3, r0
 800123c:	4a86      	ldr	r2, [pc, #536]	; (8001458 <main+0x438>)
 800123e:	6013      	str	r3, [r2, #0]
		  mz = imu.calcMag(imu.mz);
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	463b      	mov	r3, r7
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f82a 	bl	80022a0 <_ZN11MPU9250_DMP7calcMagEi>
 800124c:	4603      	mov	r3, r0
 800124e:	4a83      	ldr	r2, [pc, #524]	; (800145c <main+0x43c>)
 8001250:	6013      	str	r3, [r2, #0]

	      imu.computeEulerAngles();
 8001252:	463b      	mov	r3, r7
 8001254:	2101      	movs	r1, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f886 	bl	8002368 <_ZN11MPU9250_DMP18computeEulerAnglesEb>

	      q0 = imu.calcQuat(imu.qw);
 800125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125e:	463b      	mov	r3, r7
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f830 	bl	80022c8 <_ZN11MPU9250_DMP8calcQuatEl>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f8d4 	bl	8000418 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	497a      	ldr	r1, [pc, #488]	; (8001460 <main+0x440>)
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
	      q1 = imu.calcQuat(imu.qx);
 800127a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127c:	463b      	mov	r3, r7
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f001 f821 	bl	80022c8 <_ZN11MPU9250_DMP8calcQuatEl>
 8001286:	4603      	mov	r3, r0
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8c5 	bl	8000418 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4974      	ldr	r1, [pc, #464]	; (8001464 <main+0x444>)
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
	      q2 = imu.calcQuat(imu.qy);
 8001298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129a:	463b      	mov	r3, r7
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f812 	bl	80022c8 <_ZN11MPU9250_DMP8calcQuatEl>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8b6 	bl	8000418 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	496d      	ldr	r1, [pc, #436]	; (8001468 <main+0x448>)
 80012b2:	e9c1 2300 	strd	r2, r3, [r1]
	      q3 = imu.calcQuat(imu.qz);
 80012b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b8:	463b      	mov	r3, r7
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 f803 	bl	80022c8 <_ZN11MPU9250_DMP8calcQuatEl>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8a7 	bl	8000418 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4967      	ldr	r1, [pc, #412]	; (800146c <main+0x44c>)
 80012d0:	e9c1 2300 	strd	r2, r3, [r1]
	      float q2sqr = q2 * q2;
 80012d4:	4b64      	ldr	r3, [pc, #400]	; (8001468 <main+0x448>)
 80012d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <main+0x448>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f8f2 	bl	80004c8 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fafe 	bl	80008ec <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	      // Roll
          float t0 = +2.0 * (q0 * q1 + q2 * q3);
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <main+0x440>)
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	4b59      	ldr	r3, [pc, #356]	; (8001464 <main+0x444>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f8e1 	bl	80004c8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <main+0x448>)
 8001310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001314:	4b55      	ldr	r3, [pc, #340]	; (800146c <main+0x44c>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f8d5 	bl	80004c8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ff19 	bl	800015c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	f7fe ff11 	bl	800015c <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fad3 	bl	80008ec <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          float t1 = +1.0 - 2.0 * (q1 * q1 + q2sqr);
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <main+0x444>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <main+0x444>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f8b6 	bl	80004c8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4614      	mov	r4, r2
 8001362:	461d      	mov	r5, r3
 8001364:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001368:	f7ff f856 	bl	8000418 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7fe fef2 	bl	800015c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	f7fe feea 	bl	800015c <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f04f 0000 	mov.w	r0, #0
 8001390:	4937      	ldr	r1, [pc, #220]	; (8001470 <main+0x450>)
 8001392:	f7fe fee1 	bl	8000158 <__aeabi_dsub>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff faa5 	bl	80008ec <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          roll = atan2(t0, t1) * 180.0 / M_PI;
 80013a8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80013ac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80013b0:	f7ff fe28 	bl	8001004 <_ZSt5atan2ff>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f82e 	bl	8000418 <__aeabi_f2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x454>)
 80013c2:	f7ff f881 	bl	80004c8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	a318      	add	r3, pc, #96	; (adr r3, 8001430 <main+0x410>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f9a2 	bl	800071c <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fa84 	bl	80008ec <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <main+0x458>)
 80013e8:	6013      	str	r3, [r2, #0]

          // Pitch
          float t2 = +2.0 * (q0 * q2 - q3 * q1);
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <main+0x440>)
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <main+0x448>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f867 	bl	80004c8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <main+0x44c>)
 8001404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <main+0x444>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f85b 	bl	80004c8 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7fe fe9d 	bl	8000158 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	e027      	b.n	800147c <main+0x45c>
 800142c:	f3af 8000 	nop.w
 8001430:	54442d18 	.word	0x54442d18
 8001434:	400921fb 	.word	0x400921fb
 8001438:	40010c00 	.word	0x40010c00
 800143c:	2000018c 	.word	0x2000018c
 8001440:	20000190 	.word	0x20000190
 8001444:	20000194 	.word	0x20000194
 8001448:	20000198 	.word	0x20000198
 800144c:	2000019c 	.word	0x2000019c
 8001450:	200001a0 	.word	0x200001a0
 8001454:	200001a4 	.word	0x200001a4
 8001458:	200001a8 	.word	0x200001a8
 800145c:	200001ac 	.word	0x200001ac
 8001460:	20000160 	.word	0x20000160
 8001464:	20000168 	.word	0x20000168
 8001468:	20000170 	.word	0x20000170
 800146c:	20000178 	.word	0x20000178
 8001470:	3ff00000 	.word	0x3ff00000
 8001474:	40668000 	.word	0x40668000
 8001478:	20000180 	.word	0x20000180
 800147c:	f7fe fe6e 	bl	800015c <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fa30 	bl	80008ec <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          t2 = (t2 > 1.0) ? 1.0 : t2;
 8001492:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001496:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800149a:	f7ff fd41 	bl	8000f20 <__aeabi_fcmpgt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <main+0x48a>
 80014a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014a8:	e001      	b.n	80014ae <main+0x48e>
 80014aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          t2 = (t2 < -1.0) ? -1.0 : t2;
 80014b2:	4955      	ldr	r1, [pc, #340]	; (8001608 <main+0x5e8>)
 80014b4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80014b8:	f7ff fd14 	bl	8000ee4 <__aeabi_fcmplt>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <main+0x4a6>
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <main+0x5e8>)
 80014c4:	e001      	b.n	80014ca <main+0x4aa>
 80014c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          pitch = asin(t2) * 180.0 / M_PI;
 80014ce:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80014d2:	f7ff fd8b 	bl	8000fec <_ZSt4asinf>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff9d 	bl	8000418 <__aeabi_f2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <main+0x5ec>)
 80014e4:	f7fe fff0 	bl	80004c8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	a343      	add	r3, pc, #268	; (adr r3, 8001600 <main+0x5e0>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f911 	bl	800071c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff f9f3 	bl	80008ec <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4a41      	ldr	r2, [pc, #260]	; (8001610 <main+0x5f0>)
 800150a:	6013      	str	r3, [r2, #0]

          // Yaw
          float t3 = +2.0 * (q0 * q3 + q1 * q2);
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <main+0x5f4>)
 800150e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <main+0x5f8>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe ffd6 	bl	80004c8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4614      	mov	r4, r2
 8001522:	461d      	mov	r5, r3
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <main+0x5fc>)
 8001526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <main+0x600>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe ffca 	bl	80004c8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe0e 	bl	800015c <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	f7fe fe06 	bl	800015c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff f9c8 	bl	80008ec <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          float t4 = +1.0 - 2.0 * (q2sqr + q3 * q3);
 8001562:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001566:	f7fe ff57 	bl	8000418 <__aeabi_f2d>
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <main+0x5f8>)
 8001570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <main+0x5f8>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe ffa5 	bl	80004c8 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4620      	mov	r0, r4
 8001584:	4629      	mov	r1, r5
 8001586:	f7fe fde9 	bl	800015c <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	f7fe fde1 	bl	800015c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	f04f 0000 	mov.w	r0, #0
 80015a2:	4920      	ldr	r1, [pc, #128]	; (8001624 <main+0x604>)
 80015a4:	f7fe fdd8 	bl	8000158 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f99c 	bl	80008ec <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          yaw = atan2(t3, t4) * 180.0 / M_PI;
 80015ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80015be:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80015c2:	f7ff fd1f 	bl	8001004 <_ZSt5atan2ff>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff25 	bl	8000418 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <main+0x5ec>)
 80015d4:	f7fe ff78 	bl	80004c8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	a307      	add	r3, pc, #28	; (adr r3, 8001600 <main+0x5e0>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f899 	bl	800071c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff f97b 	bl	80008ec <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <main+0x608>)
 80015fa:	6013      	str	r3, [r2, #0]
	    }
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80015fc:	e5bb      	b.n	8001176 <main+0x156>
 80015fe:	bf00      	nop
 8001600:	54442d18 	.word	0x54442d18
 8001604:	400921fb 	.word	0x400921fb
 8001608:	bf800000 	.word	0xbf800000
 800160c:	40668000 	.word	0x40668000
 8001610:	20000184 	.word	0x20000184
 8001614:	20000160 	.word	0x20000160
 8001618:	20000178 	.word	0x20000178
 800161c:	20000168 	.word	0x20000168
 8001620:	20000170 	.word	0x20000170
 8001624:	3ff00000 	.word	0x3ff00000
 8001628:	20000188 	.word	0x20000188

0800162c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b090      	sub	sp, #64	; 0x40
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f005 ff0a 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	2302      	movs	r3, #2
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800166a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	4618      	mov	r0, r3
 8001676:	f004 ff57 	bl	8006528 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800168a:	f000 f91d 	bl	80018c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2302      	movs	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2102      	movs	r1, #2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 f9bd 	bl	8006a28 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf14      	ite	ne
 80016b4:	2301      	movne	r3, #1
 80016b6:	2300      	moveq	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80016be:	f000 f903 	bl	80018c8 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3740      	adds	r7, #64	; 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016d2:	4a1a      	ldr	r2, [pc, #104]	; (800173c <_ZL11MX_CAN_Initv+0x70>)
 80016d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016d8:	2202      	movs	r2, #2
 80016da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016ea:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80016ee:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001704:	2200      	movs	r2, #0
 8001706:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001710:	2200      	movs	r2, #0
 8001712:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001716:	2200      	movs	r2, #0
 8001718:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 800171c:	f003 fa56 	bl	8004bcc <HAL_CAN_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8001730:	f000 f8ca 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200000cc 	.word	0x200000cc
 800173c:	40006400 	.word	0x40006400

08001740 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <_ZL12MX_I2C2_Initv+0x60>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <_ZL12MX_I2C2_Initv+0x64>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <_ZL12MX_I2C2_Initv+0x5c>)
 800177e:	f003 fed3 	bl	8005528 <HAL_I2C_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001792:	f000 f899 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000f4 	.word	0x200000f4
 80017a0:	40005800 	.word	0x40005800
 80017a4:	000186a0 	.word	0x000186a0

080017a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <_ZL12MX_GPIO_Initv+0x90>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <_ZL12MX_GPIO_Initv+0x94>)
 800180c:	f003 fe74 	bl	80054f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <_ZL12MX_GPIO_Initv+0x94>)
 800182a:	f003 fce1 	bl	80051f0 <HAL_GPIO_Init>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00

08001840 <I2C_write>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef I2C_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t *data) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af04      	add	r7, sp, #16
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	460b      	mov	r3, r1
 800184e:	71bb      	strb	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2c2, slave_addr << 1, reg_addr,
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	b29b      	uxth	r3, r3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b299      	uxth	r1, r3
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	b29a      	uxth	r2, r3
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	b29b      	uxth	r3, r3
 8001864:	200a      	movs	r0, #10
 8001866:	9002      	str	r0, [sp, #8]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <I2C_write+0x40>)
 8001872:	f003 ff9d 	bl	80057b0 <HAL_I2C_Mem_Write>
 8001876:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200000f4 	.word	0x200000f4

08001884 <I2C_read>:

HAL_StatusTypeDef I2C_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af04      	add	r7, sp, #16
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	460b      	mov	r3, r1
 8001892:	71bb      	strb	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2c2, slave_addr << 1, reg_addr,
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	b29b      	uxth	r3, r3
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	b299      	uxth	r1, r3
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	200a      	movs	r0, #10
 80018aa:	9002      	str	r0, [sp, #8]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <I2C_read+0x40>)
 80018b6:	f004 f875 	bl	80059a4 <HAL_I2C_Mem_Read>
 80018ba:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000f4 	.word	0x200000f4

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_CAN_MspInit+0x8c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d131      	bne.n	80019bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 800195e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001962:	61d3      	str	r3, [r2, #28]
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_CAN_MspInit+0x90>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800198c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <HAL_CAN_MspInit+0x94>)
 800199e:	f003 fc27 	bl	80051f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_CAN_MspInit+0x94>)
 80019b8:	f003 fc1a 	bl	80051f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40006400 	.word	0x40006400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010800 	.word	0x40010800

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d124      	bne.n	8001a3a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <HAL_I2C_MspInit+0x7c>)
 8001a1e:	f003 fbe7 	bl	80051f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 8001a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40005800 	.word	0x40005800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f003 f859 	bl	8004b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e00a      	b.n	8001ac6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab0:	f3af 8000 	nop.w
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	dbf0      	blt.n	8001ab0 <_read+0x12>
	}

return len;
 8001ace:	687b      	ldr	r3, [r7, #4]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e009      	b.n	8001afe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	60ba      	str	r2, [r7, #8]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbf1      	blt.n	8001aea <_write+0x12>
	}
	return len;
 8001b06:	687b      	ldr	r3, [r7, #4]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_close>:

int _close(int file)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	605a      	str	r2, [r3, #4]
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <_isatty>:

int _isatty(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f005 fc20 	bl	80073e4 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20005000 	.word	0x20005000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	200001b0 	.word	0x200001b0
 8001bd8:	200001e0 	.word	0x200001e0

08001bdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_ZN11MPU9250_DMPC1Ev>:
static void tap_cb(unsigned char direction, unsigned char count);

int debugBegin = -1000;
int debugDMP = -1000;

MPU9250_DMP::MPU9250_DMP()
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
{
	_mSense = 6.665f; // Constant - 4915 / 32760
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <_ZN11MPU9250_DMPC1Ev+0x2c>)
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
	_aSense = 0.0f;   // Updated after accel FSR is set
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	_gSense = 0.0f;   // Updated after gyro FSR is set
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40d547ae 	.word	0x40d547ae

08001c18 <_ZN11MPU9250_DMP5beginEv>:

inv_error_t MPU9250_DMP::begin(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	inv_error_t result;
    struct int_param_s int_param;

	result = mpu_init(&int_param);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fd85 	bl	8002734 <mpu_init>
 8001c2a:	60f8      	str	r0, [r7, #12]
	
	if (result)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZN11MPU9250_DMP5beginEv+0x1e>
		return result;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e018      	b.n	8001c68 <_ZN11MPU9250_DMP5beginEv+0x50>
	
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 8001c36:	2001      	movs	r0, #1
 8001c38:	f001 fcda 	bl	80035f0 <mpu_set_bypass>
	
	setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 8001c3c:	2179      	movs	r1, #121	; 0x79
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f958 	bl	8001ef4 <_ZN11MPU9250_DMP10setSensorsEh>
	
	_gSense = getGyroSens();
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8f4 	bl	8001e32 <_ZN11MPU9250_DMP11getGyroSensEv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
	_aSense = getAccelSens();
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f907 	bl	8001e64 <_ZN11MPU9250_DMP12getAccelSensEv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	
	debugBegin = result;
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <_ZN11MPU9250_DMP5beginEv+0x58>)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6013      	str	r3, [r2, #0]
	return result;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000004 	.word	0x20000004

08001c74 <_ZN11MPU9250_DMP8dmpBeginEtt>:

inv_error_t MPU9250_DMP::dmpBegin(unsigned short features, unsigned short fifoRate)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	803b      	strh	r3, [r7, #0]
	unsigned short feat = features;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	81fb      	strh	r3, [r7, #14]
	unsigned short rate = fifoRate;
 8001c88:	883b      	ldrh	r3, [r7, #0]
 8001c8a:	81bb      	strh	r3, [r7, #12]

	if (dmpLoad() != INV_SUCCESS){
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fa2e 	bl	80020ee <_ZN11MPU9250_DMP7dmpLoadEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <_ZN11MPU9250_DMP8dmpBeginEtt+0x38>
		debugDMP = 1;
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <_ZN11MPU9250_DMP8dmpBeginEtt+0xf4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
		return INV_ERROR;}
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e059      	b.n	8001d60 <_ZN11MPU9250_DMP8dmpBeginEtt+0xec>

	// 3-axis and 6-axis LP quat are mutually exclusive.
	// If both are selected, default to 3-axis
	if (feat & DMP_FEATURE_LP_QUAT)
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <_ZN11MPU9250_DMP8dmpBeginEtt+0x52>
	{
		feat &= ~(DMP_FEATURE_6X_LP_QUAT);
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	f023 0310 	bic.w	r3, r3, #16
 8001cbc:	81fb      	strh	r3, [r7, #14]
		dmp_enable_lp_quat(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f002 fccc 	bl	800465c <dmp_enable_lp_quat>
 8001cc4:	e007      	b.n	8001cd6 <_ZN11MPU9250_DMP8dmpBeginEtt+0x62>
	}
	else if (feat & DMP_FEATURE_6X_LP_QUAT)
 8001cc6:	89fb      	ldrh	r3, [r7, #14]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <_ZN11MPU9250_DMP8dmpBeginEtt+0x62>
		dmp_enable_6x_lp_quat(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f002 fcea 	bl	80046aa <dmp_enable_6x_lp_quat>

	if (feat & DMP_FEATURE_GYRO_CAL)
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <_ZN11MPU9250_DMP8dmpBeginEtt+0x72>
		dmp_enable_gyro_cal(1);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f002 fc8b 	bl	80045fc <dmp_enable_gyro_cal>

	if (dmpEnableFeatures(feat) != INV_SUCCESS){
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fa92 	bl	8002214 <_ZN11MPU9250_DMP17dmpEnableFeaturesEt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <_ZN11MPU9250_DMP8dmpBeginEtt+0x96>
		debugDMP = 2;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <_ZN11MPU9250_DMP8dmpBeginEtt+0xf4>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
		return INV_ERROR;}
 8001d06:	2320      	movs	r3, #32
 8001d08:	e02a      	b.n	8001d60 <_ZN11MPU9250_DMP8dmpBeginEtt+0xec>

	rate = constrain(rate, 1, 200);
 8001d0a:	89bb      	ldrh	r3, [r7, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fef3 	bl	8000af8 <__aeabi_ui2f>
 8001d12:	4601      	mov	r1, r0
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_ZN11MPU9250_DMP8dmpBeginEtt+0xf8>)
 8001d16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f9c9 	bl	80020b2 <_ZN11MPU9250_DMP9constrainEfff>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f942 	bl	8000fac <__aeabi_f2uiz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	81bb      	strh	r3, [r7, #12]
	if (dmpSetFifoRate(rate) != INV_SUCCESS){
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f9e7 	bl	8002104 <_ZN11MPU9250_DMP14dmpSetFifoRateEt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <_ZN11MPU9250_DMP8dmpBeginEtt+0xdc>
		debugDMP = 3;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_ZN11MPU9250_DMP8dmpBeginEtt+0xf4>)
 8001d48:	2203      	movs	r2, #3
 8001d4a:	601a      	str	r2, [r3, #0]
		return INV_ERROR;}
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e007      	b.n	8001d60 <_ZN11MPU9250_DMP8dmpBeginEtt+0xec>

	debugDMP = mpu_set_dmp_state(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f001 fe79 	bl	8003a48 <mpu_set_dmp_state>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <_ZN11MPU9250_DMP8dmpBeginEtt+0xf4>)
 8001d5a:	6013      	str	r3, [r2, #0]
	return debugDMP;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <_ZN11MPU9250_DMP8dmpBeginEtt+0xf4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	43480000 	.word	0x43480000

08001d70 <_ZN11MPU9250_DMP10setGyroFSREt>:
{
	return mpu_lp_accel_mode(rate);
}

inv_error_t MPU9250_DMP::setGyroFSR(unsigned short fsr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
	inv_error_t err;
	err = mpu_set_gyro_fsr(fsr);
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 f820 	bl	8002dc4 <mpu_set_gyro_fsr>
 8001d84:	60f8      	str	r0, [r7, #12]
	if (err == INV_SUCCESS)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <_ZN11MPU9250_DMP10setGyroFSREt+0x28>
	{
		_gSense = getGyroSens();
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f850 	bl	8001e32 <_ZN11MPU9250_DMP11getGyroSensEv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50
	}
	return err;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZN11MPU9250_DMP11setAccelFSREh>:

inv_error_t MPU9250_DMP::setAccelFSR(unsigned char fsr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
	inv_error_t err;
	err = mpu_set_accel_fsr(fsr);
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 f895 	bl	8002ee0 <mpu_set_accel_fsr>
 8001db6:	60f8      	str	r0, [r7, #12]
	if (err == INV_SUCCESS)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <_ZN11MPU9250_DMP11setAccelFSREh+0x2c>
	{
		_aSense = getAccelSens();
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f850 	bl	8001e64 <_ZN11MPU9250_DMP12getAccelSensEv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	}
	return err;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZN11MPU9250_DMP6setLPFEt>:
	}
	return 0;
}

inv_error_t MPU9250_DMP::setLPF(unsigned short lpf)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
	return mpu_set_lpf(lpf);
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 f8e2 	bl	8002fb0 <mpu_set_lpf>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN11MPU9250_DMP13setSampleRateEt>:
	}
	return 0;
}

inv_error_t MPU9250_DMP::setSampleRate(unsigned short rate)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
    return mpu_set_sample_rate(rate);
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 f921 	bl	800304c <mpu_set_sample_rate>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN11MPU9250_DMP20setCompassSampleRateEt>:
	}
	return 0;
}

inv_error_t MPU9250_DMP::setCompassSampleRate(unsigned short rate)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
	return mpu_set_compass_sample_rate(rate);
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f980 	bl	8003128 <mpu_set_compass_sample_rate>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_ZN11MPU9250_DMP11getGyroSensEv>:
	
	return 0;
}

float MPU9250_DMP::getGyroSens(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f9b2 	bl	80031a8 <mpu_get_gyro_sens>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZN11MPU9250_DMP11getGyroSensEv+0x26>
	{
		return sens;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	e001      	b.n	8001e5c <_ZN11MPU9250_DMP11getGyroSensEv+0x2a>
	}
	return 0;
 8001e58:	f04f 0300 	mov.w	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_ZN11MPU9250_DMP12getAccelSensEv>:
	
unsigned short MPU9250_DMP::getAccelSens(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8001e6c:	f107 030e 	add.w	r3, r7, #14
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 f9d1 	bl	8003218 <mpu_get_accel_sens>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <_ZN11MPU9250_DMP12getAccelSensEv+0x26>
	{
		return sens;
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	e000      	b.n	8001e8c <_ZN11MPU9250_DMP12getAccelSensEv+0x28>
	}
	return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN11MPU9250_DMP13fifoAvailableEv>:
{
	return mpu_reset_fifo();
}

unsigned short MPU9250_DMP::fifoAvailable(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	unsigned char fifoH, fifoL;
	
	if (mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH) != INV_SUCCESS)
 8001e9c:	f107 030f 	add.w	r3, r7, #15
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2072      	movs	r0, #114	; 0x72
 8001ea4:	f000 fc18 	bl	80026d8 <mpu_read_reg>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZN11MPU9250_DMP13fifoAvailableEv+0x28>
		return 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e017      	b.n	8001eec <_ZN11MPU9250_DMP13fifoAvailableEv+0x58>
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
 8001ebc:	f107 030e 	add.w	r3, r7, #14
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2073      	movs	r0, #115	; 0x73
 8001ec4:	f000 fc08 	bl	80026d8 <mpu_read_reg>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <_ZN11MPU9250_DMP13fifoAvailableEv+0x48>
		return 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e007      	b.n	8001eec <_ZN11MPU9250_DMP13fifoAvailableEv+0x58>
	
	return (fifoH << 8 ) | fifoL;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	b29b      	uxth	r3, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZN11MPU9250_DMP10setSensorsEh>:
	
	return INV_SUCCESS;
}

inv_error_t MPU9250_DMP::setSensors(unsigned char sensors)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
	return mpu_set_sensors(sensors);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 fa18 	bl	8003338 <mpu_set_sensors>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZN11MPU9250_DMP6updateEh>:
	}
	return false;
}

inv_error_t MPU9250_DMP::update(unsigned char sensors)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
	inv_error_t aErr = INV_SUCCESS;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
	inv_error_t gErr = INV_SUCCESS;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
	inv_error_t mErr = INV_SUCCESS;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
	inv_error_t tErr = INV_SUCCESS;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
	
	if (sensors & UPDATE_ACCEL)
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <_ZN11MPU9250_DMP6updateEh+0x2e>
		aErr = updateAccel();
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f827 	bl	8001f8c <_ZN11MPU9250_DMP11updateAccelEv>
 8001f3e:	6178      	str	r0, [r7, #20]
	if (sensors & UPDATE_GYRO)
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <_ZN11MPU9250_DMP6updateEh+0x40>
		gErr = updateGyro();
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f849 	bl	8001fe2 <_ZN11MPU9250_DMP10updateGyroEv>
 8001f50:	6138      	str	r0, [r7, #16]
	if (sensors & UPDATE_COMPASS)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <_ZN11MPU9250_DMP6updateEh+0x52>
		mErr = updateCompass();
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f86b 	bl	8002038 <_ZN11MPU9250_DMP13updateCompassEv>
 8001f62:	60f8      	str	r0, [r7, #12]
	if (sensors & UPDATE_TEMP)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <_ZN11MPU9250_DMP6updateEh+0x64>
		tErr = updateTemperature();
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f88d 	bl	800208e <_ZN11MPU9250_DMP17updateTemperatureEv>
 8001f74:	60b8      	str	r0, [r7, #8]
	
	return aErr | gErr | mErr | tErr;
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZN11MPU9250_DMP11updateAccelEv>:

int MPU9250_DMP::updateAccel(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	short data[3];
	
	if (mpu_get_accel_reg(data, &time))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fd59 	bl	8002a58 <mpu_get_accel_reg>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <_ZN11MPU9250_DMP11updateAccelEv+0x2e>
	{
		return INV_ERROR;		
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	e00f      	b.n	8001fda <_ZN11MPU9250_DMP11updateAccelEv+0x4e>
	}
	ax = data[X_AXIS];
 8001fba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	601a      	str	r2, [r3, #0]
	ay = data[Y_AXIS];
 8001fc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]
	az = data[Z_AXIS];
 8001fce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
	return INV_SUCCESS;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZN11MPU9250_DMP10updateGyroEv>:

int MPU9250_DMP::updateGyro(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	short data[3];
	
	if (mpu_get_gyro_reg(data, &time))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fce2 	bl	80029c0 <mpu_get_gyro_reg>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <_ZN11MPU9250_DMP10updateGyroEv+0x2e>
	{
		return INV_ERROR;		
 800200c:	2320      	movs	r3, #32
 800200e:	e00f      	b.n	8002030 <_ZN11MPU9250_DMP10updateGyroEv+0x4e>
	}
	gx = data[X_AXIS];
 8002010:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
	gy = data[Y_AXIS];
 800201a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	611a      	str	r2, [r3, #16]
	gz = data[Z_AXIS];
 8002024:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	615a      	str	r2, [r3, #20]
	return INV_SUCCESS;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_ZN11MPU9250_DMP13updateCompassEv>:

int MPU9250_DMP::updateCompass(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	short data[3];
	
	if (mpu_get_compass_reg(data, &time))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fe93 	bl	8003d78 <mpu_get_compass_reg>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <_ZN11MPU9250_DMP13updateCompassEv+0x2e>
	{
		return INV_ERROR;		
 8002062:	2320      	movs	r3, #32
 8002064:	e00f      	b.n	8002086 <_ZN11MPU9250_DMP13updateCompassEv+0x4e>
	}
	mx = data[X_AXIS];
 8002066:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
	my = data[Y_AXIS];
 8002070:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	61da      	str	r2, [r3, #28]
	mz = data[Z_AXIS];
 800207a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	621a      	str	r2, [r3, #32]
	return INV_SUCCESS;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_ZN11MPU9250_DMP17updateTemperatureEv>:

inv_error_t MPU9250_DMP::updateTemperature(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	return mpu_get_temperature(&temperature, &time);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 fd24 	bl	8002af0 <mpu_get_temperature>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_ZN11MPU9250_DMP9constrainEfff>:
{
	long gyro[3], accel[3];
	return mpu_run_self_test(gyro, accel);
}

float MPU9250_DMP::constrain(float x, float a, float b){
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	603b      	str	r3, [r7, #0]
	if(x > b) return b;
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	f7fe ff2c 	bl	8000f20 <__aeabi_fcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZN11MPU9250_DMP9constrainEfff+0x20>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	e009      	b.n	80020e6 <_ZN11MPU9250_DMP9constrainEfff+0x34>
	if (x < a) return a;
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68b8      	ldr	r0, [r7, #8]
 80020d6:	f7fe ff05 	bl	8000ee4 <__aeabi_fcmplt>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN11MPU9250_DMP9constrainEfff+0x32>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	e000      	b.n	80020e6 <_ZN11MPU9250_DMP9constrainEfff+0x34>
	return x;
 80020e4:	68bb      	ldr	r3, [r7, #8]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN11MPU9250_DMP7dmpLoadEv>:

inv_error_t MPU9250_DMP::dmpLoad(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return dmp_load_motion_driver_firmware();
 80020f6:	f001 fecb 	bl	8003e90 <dmp_load_motion_driver_firmware>
 80020fa:	4603      	mov	r3, r0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN11MPU9250_DMP14dmpSetFifoRateEt>:
	
	return 0;
}

inv_error_t MPU9250_DMP::dmpSetFifoRate(unsigned short rate)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
	if (rate > MAX_DMP_SAMPLE_RATE) rate = MAX_DMP_SAMPLE_RATE;
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	2bc8      	cmp	r3, #200	; 0xc8
 8002114:	d901      	bls.n	800211a <_ZN11MPU9250_DMP14dmpSetFifoRateEt+0x16>
 8002116:	23c8      	movs	r3, #200	; 0xc8
 8002118:	807b      	strh	r3, [r7, #2]
	return dmp_set_fifo_rate(rate);
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fec7 	bl	8003eb0 <dmp_set_fifo_rate>
 8002122:	4603      	mov	r3, r0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZN11MPU9250_DMP13dmpUpdateFifoEv>:

inv_error_t MPU9250_DMP::dmpUpdateFifo(void)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08f      	sub	sp, #60	; 0x3c
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
	long quat[4];
	unsigned long timestamp;
	short sensors;
	unsigned char more;
	
	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 8002134:	f107 040c 	add.w	r4, r7, #12
 8002138:	f107 0210 	add.w	r2, r7, #16
 800213c:	f107 0120 	add.w	r1, r7, #32
 8002140:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002144:	f107 0309 	add.w	r3, r7, #9
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f107 030a 	add.w	r3, r7, #10
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4623      	mov	r3, r4
 8002152:	f002 fb15 	bl	8004780 <dmp_read_fifo>
 8002156:	4603      	mov	r3, r0
		   != INV_SUCCESS)
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0x3e>
    {
	   return INV_ERROR;
 8002166:	2320      	movs	r3, #32
 8002168:	e050      	b.n	800220c <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0xe0>
    }
	
	if (sensors & INV_XYZ_ACCEL)
 800216a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0x6a>
	{
		ax = accel[X_AXIS];
 8002178:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
		ay = accel[Y_AXIS];
 8002182:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	605a      	str	r2, [r3, #4]
		az = accel[Z_AXIS];
 800218c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]
	}
	if (sensors & INV_X_GYRO)
 8002196:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0x82>
		gx = gyro[X_AXIS];
 80021a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60da      	str	r2, [r3, #12]
	if (sensors & INV_Y_GYRO)
 80021ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0x9a>
		gy = gyro[Y_AXIS];
 80021bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
	if (sensors & INV_Z_GYRO)
 80021c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0xb2>
		gz = gyro[Z_AXIS];
 80021d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	615a      	str	r2, [r3, #20]
	if (sensors & INV_WXYZ_QUAT)
 80021de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <_ZN11MPU9250_DMP13dmpUpdateFifoEv+0xd8>
	{
		qw = quat[0];
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
		qx = quat[1];
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
		qy = quat[2];
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
		qz = quat[3];
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
	}
	
	time = timestamp;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
	
	return INV_SUCCESS;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3734      	adds	r7, #52	; 0x34
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <_ZN11MPU9250_DMP17dmpEnableFeaturesEt>:

inv_error_t MPU9250_DMP::dmpEnableFeatures(unsigned short mask)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
	unsigned short enMask = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	81fb      	strh	r3, [r7, #14]
	enMask |= mask;
 8002224:	89fa      	ldrh	r2, [r7, #14]
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	4313      	orrs	r3, r2
 800222a:	81fb      	strh	r3, [r7, #14]
	// Combat known issue where fifo sample rate is incorrect
	// unless tap is enabled in the DMP.
	enMask |= DMP_FEATURE_TAP; 
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	81fb      	strh	r3, [r7, #14]
	return dmp_enable_feature(enMask);
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	4618      	mov	r0, r3
 8002238:	f002 f8b8 	bl	80043ac <dmp_enable_feature>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN11MPU9250_DMP9calcAccelEi>:
{
	return dmp_set_pedometer_walk_time(time);
}

float MPU9250_DMP::calcAccel(int axis)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
	return (float) axis / (float) _aSense;
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f7fe fc55 	bl	8000b00 <__aeabi_i2f>
 8002256:	4604      	mov	r4, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fc4a 	bl	8000af8 <__aeabi_ui2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4619      	mov	r1, r3
 8002268:	4620      	mov	r0, r4
 800226a:	f7fe fd51 	bl	8000d10 <__aeabi_fdiv>
 800226e:	4603      	mov	r3, r0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <_ZN11MPU9250_DMP8calcGyroEi>:

float MPU9250_DMP::calcGyro(int axis)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	return (float) axis / (float) _gSense;
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f7fe fc3c 	bl	8000b00 <__aeabi_i2f>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f7fe fd3d 	bl	8000d10 <__aeabi_fdiv>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZN11MPU9250_DMP7calcMagEi>:

float MPU9250_DMP::calcMag(int axis)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	return (float) axis / (float) _mSense;
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f7fe fc28 	bl	8000b00 <__aeabi_i2f>
 80022b0:	4602      	mov	r2, r0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f7fe fd29 	bl	8000d10 <__aeabi_fdiv>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_ZN11MPU9250_DMP8calcQuatEl>:

float MPU9250_DMP::calcQuat(long axis)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
	return qToFloat(axis, 30);
 80022d2:	221e      	movs	r2, #30
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f805 	bl	80022e6 <_ZN11MPU9250_DMP8qToFloatElh>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_ZN11MPU9250_DMP8qToFloatElh>:
	
float MPU9250_DMP::qToFloat(long number, unsigned char q)
{
 80022e6:	b5b0      	push	{r4, r5, r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
	unsigned long mask = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
	for (int i=0; i<q; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	da0b      	bge.n	800231c <_ZN11MPU9250_DMP8qToFloatElh+0x36>
	{
		mask |= (1<<i);
 8002304:	2201      	movs	r2, #1
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	461a      	mov	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
	for (int i=0; i<q; i++)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3301      	adds	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e7ef      	b.n	80022fc <_ZN11MPU9250_DMP8qToFloatElh+0x16>
	}
	return (number >> q) + ((number & mask) / (float) (2<<(q-1)));
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	fa42 f303 	asr.w	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fbeb 	bl	8000b00 <__aeabi_i2f>
 800232a:	4604      	mov	r4, r0
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fbe0 	bl	8000af8 <__aeabi_ui2f>
 8002338:	4605      	mov	r5, r0
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	3b01      	subs	r3, #1
 800233e:	2202      	movs	r2, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fbdb 	bl	8000b00 <__aeabi_i2f>
 800234a:	4603      	mov	r3, r0
 800234c:	4619      	mov	r1, r3
 800234e:	4628      	mov	r0, r5
 8002350:	f7fe fcde 	bl	8000d10 <__aeabi_fdiv>
 8002354:	4603      	mov	r3, r0
 8002356:	4619      	mov	r1, r3
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe fb1d 	bl	8000998 <__addsf3>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}

08002368 <_ZN11MPU9250_DMP18computeEulerAnglesEb>:

void MPU9250_DMP::computeEulerAngles(bool degrees)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b08d      	sub	sp, #52	; 0x34
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
    float dqw = qToFloat(qw, 30);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	221e      	movs	r2, #30
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffb2 	bl	80022e6 <_ZN11MPU9250_DMP8qToFloatElh>
 8002382:	62f8      	str	r0, [r7, #44]	; 0x2c
    float dqx = qToFloat(qx, 30);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	221e      	movs	r2, #30
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffaa 	bl	80022e6 <_ZN11MPU9250_DMP8qToFloatElh>
 8002392:	62b8      	str	r0, [r7, #40]	; 0x28
    float dqy = qToFloat(qy, 30);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	221e      	movs	r2, #30
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ffa2 	bl	80022e6 <_ZN11MPU9250_DMP8qToFloatElh>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24
    float dqz = qToFloat(qz, 30);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	221e      	movs	r2, #30
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff9a 	bl	80022e6 <_ZN11MPU9250_DMP8qToFloatElh>
 80023b2:	6238      	str	r0, [r7, #32]
    
    float ysqr = dqy * dqy;
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b8:	f7fe fbf6 	bl	8000ba8 <__aeabi_fmul>
 80023bc:	4603      	mov	r3, r0
 80023be:	61fb      	str	r3, [r7, #28]
    float t0 = -2.0f * (ysqr + dqz * dqz) + 1.0f;
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	f7fe fbf0 	bl	8000ba8 <__aeabi_fmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	69f9      	ldr	r1, [r7, #28]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fae3 	bl	8000998 <__addsf3>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fbe5 	bl	8000ba8 <__aeabi_fmul>
 80023de:	4603      	mov	r3, r0
 80023e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fad7 	bl	8000998 <__addsf3>
 80023ea:	4603      	mov	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
    float t1 = +2.0f * (dqx * dqy - dqw * dqz);
 80023ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023f2:	f7fe fbd9 	bl	8000ba8 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	6a39      	ldr	r1, [r7, #32]
 80023fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023fe:	f7fe fbd3 	bl	8000ba8 <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	4620      	mov	r0, r4
 8002408:	f7fe fac4 	bl	8000994 <__aeabi_fsub>
 800240c:	4603      	mov	r3, r0
 800240e:	4619      	mov	r1, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fac1 	bl	8000998 <__addsf3>
 8002416:	4603      	mov	r3, r0
 8002418:	617b      	str	r3, [r7, #20]
    float t2 = -2.0f * (dqx * dqz + dqw * dqy);
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241e:	f7fe fbc3 	bl	8000ba8 <__aeabi_fmul>
 8002422:	4603      	mov	r3, r0
 8002424:	461c      	mov	r4, r3
 8002426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800242a:	f7fe fbbd 	bl	8000ba8 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	4619      	mov	r1, r3
 8002432:	4620      	mov	r0, r4
 8002434:	f7fe fab0 	bl	8000998 <__addsf3>
 8002438:	4603      	mov	r3, r0
 800243a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fbb2 	bl	8000ba8 <__aeabi_fmul>
 8002444:	4603      	mov	r3, r0
 8002446:	613b      	str	r3, [r7, #16]
    float t3 = +2.0f * (dqy * dqz - dqw * dqx);
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800244c:	f7fe fbac 	bl	8000ba8 <__aeabi_fmul>
 8002450:	4603      	mov	r3, r0
 8002452:	461c      	mov	r4, r3
 8002454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002458:	f7fe fba6 	bl	8000ba8 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	4619      	mov	r1, r3
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe fa97 	bl	8000994 <__aeabi_fsub>
 8002466:	4603      	mov	r3, r0
 8002468:	4619      	mov	r1, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fa94 	bl	8000998 <__addsf3>
 8002470:	4603      	mov	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]
    float t4 = -2.0f * (dqx * dqx + ysqr) + 1.0f;
 8002474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002478:	f7fe fb96 	bl	8000ba8 <__aeabi_fmul>
 800247c:	4603      	mov	r3, r0
 800247e:	69f9      	ldr	r1, [r7, #28]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fa89 	bl	8000998 <__addsf3>
 8002486:	4603      	mov	r3, r0
 8002488:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fb8b 	bl	8000ba8 <__aeabi_fmul>
 8002492:	4603      	mov	r3, r0
 8002494:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fa7d 	bl	8000998 <__addsf3>
 800249e:	4603      	mov	r3, r0
 80024a0:	60bb      	str	r3, [r7, #8]
  
	// Keep t2 within range of asin (-1, 1)
    t2 = t2 > 1.0f ? 1.0f : t2;
 80024a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80024a6:	6938      	ldr	r0, [r7, #16]
 80024a8:	f7fe fd3a 	bl	8000f20 <__aeabi_fcmpgt>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x150>
 80024b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024b6:	e000      	b.n	80024ba <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x152>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	613b      	str	r3, [r7, #16]
    t2 = t2 < -1.0f ? -1.0f : t2;
 80024bc:	4952      	ldr	r1, [pc, #328]	; (8002608 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x2a0>)
 80024be:	6938      	ldr	r0, [r7, #16]
 80024c0:	f7fe fd10 	bl	8000ee4 <__aeabi_fcmplt>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x166>
 80024ca:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x2a0>)
 80024cc:	e000      	b.n	80024d0 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x168>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	613b      	str	r3, [r7, #16]
  
    pitch = asin(t2) * 2;
 80024d2:	6938      	ldr	r0, [r7, #16]
 80024d4:	f7fe fd8a 	bl	8000fec <_ZSt4asinf>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fa5b 	bl	8000998 <__addsf3>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
    roll = atan2(t3, t4);
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7fe fd89 	bl	8001004 <_ZSt5atan2ff>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    yaw = atan2(t1, t0);
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7fe fd82 	bl	8001004 <_ZSt5atan2ff>
 8002500:	4602      	mov	r2, r0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
	
	if (degrees)
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d075      	beq.n	80025f8 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x290>
	{
		pitch *= (180.0 / PI);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ff81 	bl	8000418 <__aeabi_f2d>
 8002516:	a33a      	add	r3, pc, #232	; (adr r3, 8002600 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x298>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fd ffd4 	bl	80004c8 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe f9e0 	bl	80008ec <__aeabi_d2f>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c
		roll *= (180.0 / PI);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ff6e 	bl	8000418 <__aeabi_f2d>
 800253c:	a330      	add	r3, pc, #192	; (adr r3, 8002600 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x298>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fd ffc1 	bl	80004c8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe f9cd 	bl	80008ec <__aeabi_d2f>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
		yaw *= (180.0 / PI);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff5b 	bl	8000418 <__aeabi_f2d>
 8002562:	a327      	add	r3, pc, #156	; (adr r3, 8002600 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x298>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd ffae 	bl	80004c8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe f9ba 	bl	80008ec <__aeabi_d2f>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
		if (pitch < 0) pitch = 360.0 + pitch;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fcac 	bl	8000ee4 <__aeabi_fcmplt>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x23e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	491d      	ldr	r1, [pc, #116]	; (800260c <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x2a4>)
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe f9fd 	bl	8000998 <__addsf3>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	63da      	str	r2, [r3, #60]	; 0x3c
		if (roll < 0) roll = 360.0 + roll;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fc98 	bl	8000ee4 <__aeabi_fcmplt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x266>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4913      	ldr	r1, [pc, #76]	; (800260c <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x2a4>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe f9e9 	bl	8000998 <__addsf3>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
		if (yaw < 0) yaw = 360.0 + yaw;	
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fc84 	bl	8000ee4 <__aeabi_fcmplt>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d100      	bne.n	80025e4 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x27c>
	}
}
 80025e2:	e009      	b.n	80025f8 <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x290>
		if (yaw < 0) yaw = 360.0 + yaw;	
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <_ZN11MPU9250_DMP18computeEulerAnglesEb+0x2a4>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f9d4 	bl	8000998 <__addsf3>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80025f8:	bf00      	nop
 80025fa:	3734      	adds	r7, #52	; 0x34
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	79de2e87 	.word	0x79de2e87
 8002604:	404ca613 	.word	0x404ca613
 8002608:	bf800000 	.word	0xbf800000
 800260c:	43b40000 	.word	0x43b40000

08002610 <reg_int_cb>:
#define delay_ms  HAL_Delay
#define get_ms(timestamp) (*timestamp=HAL_GetTick())
#define log_i     printf
#define log_e     printf
static inline int reg_int_cb(struct int_param_s *int_param)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

}
 8002618:	bf00      	nop
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <set_int_enable+0xb0>)
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <set_int_enable+0x4e>
        if (enable)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800263e:	2302      	movs	r3, #2
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e001      	b.n	8002648 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <set_int_enable+0xb0>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	7818      	ldrb	r0, [r3, #0]
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <set_int_enable+0xb0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	7c59      	ldrb	r1, [r3, #17]
 8002654:	f107 030f 	add.w	r3, r7, #15
 8002658:	2201      	movs	r2, #1
 800265a:	f7ff f8f1 	bl	8001840 <I2C_write>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <set_int_enable+0x46>
            return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e030      	b.n	80026cc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <set_int_enable+0xb0>)
 800266e:	745a      	strb	r2, [r3, #17]
 8002670:	e02b      	b.n	80026ca <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <set_int_enable+0xb0>)
 8002674:	7a9b      	ldrb	r3, [r3, #10]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <set_int_enable+0x5c>
            return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e025      	b.n	80026cc <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <set_int_enable+0x6e>
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <set_int_enable+0xb0>)
 8002688:	7c5b      	ldrb	r3, [r3, #17]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <set_int_enable+0x6e>
            return 0;
 800268e:	2300      	movs	r3, #0
 8002690:	e01c      	b.n	80026cc <set_int_enable+0xa8>
        if (enable)
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e001      	b.n	80026a2 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <set_int_enable+0xb0>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	7818      	ldrb	r0, [r3, #0]
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <set_int_enable+0xb0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	7c59      	ldrb	r1, [r3, #17]
 80026ae:	f107 030f 	add.w	r3, r7, #15
 80026b2:	2201      	movs	r2, #1
 80026b4:	f7ff f8c4 	bl	8001840 <I2C_write>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <set_int_enable+0xa0>
            return -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e003      	b.n	80026cc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <set_int_enable+0xb0>)
 80026c8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000000c 	.word	0x2000000c

080026d8 <mpu_read_reg>:
 *  @param[in]  reg     Register address.
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <mpu_read_reg+0x58>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	7b5b      	ldrb	r3, [r3, #13]
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d005      	beq.n	80026fc <mpu_read_reg+0x24>
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <mpu_read_reg+0x58>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	7e1b      	ldrb	r3, [r3, #24]
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d102      	bne.n	8002702 <mpu_read_reg+0x2a>
        return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e011      	b.n	8002726 <mpu_read_reg+0x4e>
    if (reg >= st.hw->num_reg)
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <mpu_read_reg+0x58>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <mpu_read_reg+0x3c>
        return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e008      	b.n	8002726 <mpu_read_reg+0x4e>
    return i2c_read(st.hw->addr, reg, 1, data);
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <mpu_read_reg+0x58>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	7818      	ldrb	r0, [r3, #0]
 800271a:	79f9      	ldrb	r1, [r7, #7]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	f7ff f8b0 	bl	8001884 <I2C_read>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c

08002734 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <mpu_init+0x18c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	7818      	ldrb	r0, [r3, #0]
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <mpu_init+0x18c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	7d59      	ldrb	r1, [r3, #21]
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	2201      	movs	r2, #1
 8002752:	f7ff f875 	bl	8001840 <I2C_write>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <mpu_init+0x2e>
        return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	e0a9      	b.n	80028b6 <mpu_init+0x182>
    delay_ms(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f002 fa0e 	bl	8004b84 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800276c:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <mpu_init+0x18c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	7818      	ldrb	r0, [r3, #0]
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <mpu_init+0x18c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	7d59      	ldrb	r1, [r3, #21]
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	2201      	movs	r2, #1
 800277e:	f7ff f85f 	bl	8001840 <I2C_write>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <mpu_init+0x5a>
        return -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	e093      	b.n	80028b6 <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
 800278e:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <mpu_init+0x18c>)
 8002790:	2200      	movs	r2, #0
 8002792:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8002794:	2348      	movs	r3, #72	; 0x48
 8002796:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <mpu_init+0x18c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	7818      	ldrb	r0, [r3, #0]
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <mpu_init+0x18c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	7a19      	ldrb	r1, [r3, #8]
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	2201      	movs	r2, #1
 80027aa:	f7ff f849 	bl	8001840 <I2C_write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <mpu_init+0x86>
        return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	e07d      	b.n	80028b6 <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <mpu_init+0x18c>)
 80027bc:	22ff      	movs	r2, #255	; 0xff
 80027be:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <mpu_init+0x18c>)
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <mpu_init+0x18c>)
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80027cc:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <mpu_init+0x18c>)
 80027ce:	22ff      	movs	r2, #255	; 0xff
 80027d0:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <mpu_init+0x18c>)
 80027d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d8:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <mpu_init+0x18c>)
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <mpu_init+0x18c>)
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <mpu_init+0x18c>)
 80027e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ec:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <mpu_init+0x18c>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <mpu_init+0x18c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 80027fc:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <mpu_init+0x18c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <mpu_init+0x18c>)
 8002806:	2200      	movs	r2, #0
 8002808:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <mpu_init+0x18c>)
 800280c:	2200      	movs	r2, #0
 800280e:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8002810:	220c      	movs	r2, #12
 8002812:	2100      	movs	r1, #0
 8002814:	482b      	ldr	r0, [pc, #172]	; (80028c4 <mpu_init+0x190>)
 8002816:	f004 fe1d 	bl	8007454 <memset>
    st.chip_cfg.dmp_on = 0;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <mpu_init+0x18c>)
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <mpu_init+0x18c>)
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <mpu_init+0x18c>)
 800282c:	2200      	movs	r2, #0
 800282e:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8002830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002834:	f000 fac6 	bl	8002dc4 <mpu_set_gyro_fsr>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <mpu_init+0x110>
        return -1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e038      	b.n	80028b6 <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
 8002844:	2002      	movs	r0, #2
 8002846:	f000 fb4b 	bl	8002ee0 <mpu_set_accel_fsr>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <mpu_init+0x122>
        return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	e02f      	b.n	80028b6 <mpu_init+0x182>
    if (mpu_set_lpf(42))
 8002856:	202a      	movs	r0, #42	; 0x2a
 8002858:	f000 fbaa 	bl	8002fb0 <mpu_set_lpf>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <mpu_init+0x134>
        return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	e026      	b.n	80028b6 <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
 8002868:	2032      	movs	r0, #50	; 0x32
 800286a:	f000 fbef 	bl	800304c <mpu_set_sample_rate>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <mpu_init+0x146>
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e01d      	b.n	80028b6 <mpu_init+0x182>
    if (mpu_configure_fifo(0))
 800287a:	2000      	movs	r0, #0
 800287c:	f000 fd0a 	bl	8003294 <mpu_configure_fifo>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <mpu_init+0x158>
        return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e014      	b.n	80028b6 <mpu_init+0x182>

#ifndef EMPL_TARGET_STM32F4    
    if (int_param)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <mpu_init+0x164>
        reg_int_cb(int_param);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff febc 	bl	8002610 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8002898:	f001 f92a 	bl	8003af0 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 800289c:	200a      	movs	r0, #10
 800289e:	f000 fc43 	bl	8003128 <mpu_set_compass_sample_rate>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <mpu_init+0x17a>
        return -1;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	e003      	b.n	80028b6 <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 fd42 	bl	8003338 <mpu_set_sensors>
    return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	20000022 	.word	0x20000022

080028c8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b28      	cmp	r3, #40	; 0x28
 80028d6:	d902      	bls.n	80028de <mpu_lp_accel_mode+0x16>
        return -1;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	e06a      	b.n	80029b4 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11c      	bne.n	800291e <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 ff49 	bl	800377c <mpu_set_int_latched>
        tmp[0] = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80028ee:	2307      	movs	r3, #7
 80028f0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	7818      	ldrb	r0, [r3, #0]
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	7d59      	ldrb	r1, [r3, #21]
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	2202      	movs	r2, #2
 8002904:	f7fe ff9c 	bl	8001840 <I2C_write>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <mpu_lp_accel_mode+0x4c>
            return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e04f      	b.n	80029b4 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 8002916:	2200      	movs	r2, #0
 8002918:	751a      	strb	r2, [r3, #20]
        return 0;
 800291a:	2300      	movs	r3, #0
 800291c:	e04a      	b.n	80029b4 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 ff2c 	bl	800377c <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8002924:	2320      	movs	r3, #32
 8002926:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 800292e:	2302      	movs	r3, #2
 8002930:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002932:	2005      	movs	r0, #5
 8002934:	f000 fb3c 	bl	8002fb0 <mpu_set_lpf>
 8002938:	e016      	b.n	8002968 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d805      	bhi.n	800294c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8002940:	2304      	movs	r3, #4
 8002942:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002944:	2005      	movs	r0, #5
 8002946:	f000 fb33 	bl	8002fb0 <mpu_set_lpf>
 800294a:	e00d      	b.n	8002968 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b14      	cmp	r3, #20
 8002950:	d805      	bhi.n	800295e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8002952:	2306      	movs	r3, #6
 8002954:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8002956:	200a      	movs	r0, #10
 8002958:	f000 fb2a 	bl	8002fb0 <mpu_set_lpf>
 800295c:	e004      	b.n	8002968 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 800295e:	2307      	movs	r3, #7
 8002960:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002962:	2014      	movs	r0, #20
 8002964:	f000 fb24 	bl	8002fb0 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	019b      	lsls	r3, r3, #6
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f043 0307 	orr.w	r3, r3, #7
 8002972:	b25b      	sxtb	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	7818      	ldrb	r0, [r3, #0]
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	7d59      	ldrb	r1, [r3, #21]
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2202      	movs	r2, #2
 800298a:	f7fe ff59 	bl	8001840 <I2C_write>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <mpu_lp_accel_mode+0xd2>
        return -1;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	e00c      	b.n	80029b4 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 800299c:	2208      	movs	r2, #8
 800299e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <mpu_lp_accel_mode+0xf4>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 fc71 	bl	8003294 <mpu_configure_fifo>

    return 0;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000000c 	.word	0x2000000c

080029c0 <mpu_get_gyro_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <mpu_get_gyro_reg+0x94>)
 80029cc:	7a9b      	ldrb	r3, [r3, #10]
 80029ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <mpu_get_gyro_reg+0x1c>
        return -1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e036      	b.n	8002a4a <mpu_get_gyro_reg+0x8a>

    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <mpu_get_gyro_reg+0x94>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	7818      	ldrb	r0, [r3, #0]
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <mpu_get_gyro_reg+0x94>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	7b99      	ldrb	r1, [r3, #14]
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	2206      	movs	r2, #6
 80029ee:	f7fe ff49 	bl	8001884 <I2C_read>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <mpu_get_gyro_reg+0x3e>
        return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e025      	b.n	8002a4a <mpu_get_gyro_reg+0x8a>
    data[0] = (tmp[0] << 8) | tmp[1];
 80029fe:	7a3b      	ldrb	r3, [r7, #8]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	7a7b      	ldrb	r3, [r7, #9]
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b219      	sxth	r1, r3
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	b212      	sxth	r2, r2
 8002a22:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 8002a24:	7b3b      	ldrb	r3, [r7, #12]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b219      	sxth	r1, r3
 8002a2a:	7b7b      	ldrb	r3, [r7, #13]
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	430a      	orrs	r2, r1
 8002a34:	b212      	sxth	r2, r2
 8002a36:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <mpu_get_gyro_reg+0x88>
        get_ms(timestamp);
 8002a3e:	f002 f897 	bl	8004b70 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
    return 0;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c

08002a58 <mpu_get_accel_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_accel_reg(short *data, unsigned long *timestamp)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <mpu_get_accel_reg+0x94>)
 8002a64:	7a9b      	ldrb	r3, [r3, #10]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <mpu_get_accel_reg+0x1c>
        return -1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e036      	b.n	8002ae2 <mpu_get_accel_reg+0x8a>

    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <mpu_get_accel_reg+0x94>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	7818      	ldrb	r0, [r3, #0]
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <mpu_get_accel_reg+0x94>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	7bd9      	ldrb	r1, [r3, #15]
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	2206      	movs	r2, #6
 8002a86:	f7fe fefd 	bl	8001884 <I2C_read>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <mpu_get_accel_reg+0x3e>
        return -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	e025      	b.n	8002ae2 <mpu_get_accel_reg+0x8a>
    data[0] = (tmp[0] << 8) | tmp[1];
 8002a96:	7a3b      	ldrb	r3, [r7, #8]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	7a7b      	ldrb	r3, [r7, #9]
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8002aa8:	7abb      	ldrb	r3, [r7, #10]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b219      	sxth	r1, r3
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	b212      	sxth	r2, r2
 8002aba:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 8002abc:	7b3b      	ldrb	r3, [r7, #12]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	b219      	sxth	r1, r3
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	430a      	orrs	r2, r1
 8002acc:	b212      	sxth	r2, r2
 8002ace:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <mpu_get_accel_reg+0x88>
        get_ms(timestamp);
 8002ad6:	f002 f84b 	bl	8004b70 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	601a      	str	r2, [r3, #0]
    return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <mpu_get_temperature+0xc4>)
 8002afc:	7a9b      	ldrb	r3, [r3, #10]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <mpu_get_temperature+0x18>
        return -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e051      	b.n	8002bac <mpu_get_temperature+0xbc>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <mpu_get_temperature+0xc4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	7818      	ldrb	r0, [r3, #0]
 8002b0e:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <mpu_get_temperature+0xc4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	7c19      	ldrb	r1, [r3, #16]
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f7fe feb3 	bl	8001884 <I2C_read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <mpu_get_temperature+0x3a>
        return -1;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	e040      	b.n	8002bac <mpu_get_temperature+0xbc>
    raw = (tmp[0] << 8) | tmp[1];
 8002b2a:	7b3b      	ldrb	r3, [r7, #12]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	7b7b      	ldrb	r3, [r7, #13]
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <mpu_get_temperature+0x58>
        get_ms(timestamp);
 8002b3e:	f002 f817 	bl	8004b70 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	601a      	str	r2, [r3, #0]

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 8002b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd ffd7 	bl	8000b00 <__aeabi_i2f>
 8002b52:	4604      	mov	r4, r0
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <mpu_get_temperature+0xc4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd ffcf 	bl	8000b00 <__aeabi_i2f>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4619      	mov	r1, r3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7fd ff14 	bl	8000994 <__aeabi_fsub>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461c      	mov	r4, r3
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <mpu_get_temperature+0xc4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	88db      	ldrh	r3, [r3, #6]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd ffc2 	bl	8000b00 <__aeabi_i2f>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7fe f8c5 	bl	8000d10 <__aeabi_fdiv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <mpu_get_temperature+0xc8>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd ff04 	bl	8000998 <__addsf3>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe f806 	bl	8000ba8 <__aeabi_fmul>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f9de 	bl	8000f60 <__aeabi_f2iz>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	601a      	str	r2, [r3, #0]
    return 0;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	2000000c 	.word	0x2000000c
 8002bb8:	420c0000 	.word	0x420c0000

08002bbc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002bc2:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002bc4:	7a9b      	ldrb	r3, [r3, #10]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <mpu_reset_fifo+0x14>
        return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e0f1      	b.n	8002db4 <mpu_reset_fifo+0x1f8>

    data = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	7818      	ldrb	r0, [r3, #0]
 8002bda:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	7c59      	ldrb	r1, [r3, #17]
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	2201      	movs	r2, #1
 8002be4:	f7fe fe2c 	bl	8001840 <I2C_write>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <mpu_reset_fifo+0x38>
        return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e0df      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002bf4:	4b71      	ldr	r3, [pc, #452]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	7818      	ldrb	r0, [r3, #0]
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	7959      	ldrb	r1, [r3, #5]
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	2201      	movs	r2, #1
 8002c04:	f7fe fe1c 	bl	8001840 <I2C_write>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <mpu_reset_fifo+0x58>
        return -1;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	e0cf      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c14:	4b69      	ldr	r3, [pc, #420]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	7818      	ldrb	r0, [r3, #0]
 8002c1a:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	7919      	ldrb	r1, [r3, #4]
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	2201      	movs	r2, #1
 8002c24:	f7fe fe0c 	bl	8001840 <I2C_write>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <mpu_reset_fifo+0x78>
        return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e0bf      	b.n	8002db4 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d05c      	beq.n	8002cf8 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002c3e:	230c      	movs	r3, #12
 8002c40:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c42:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	7818      	ldrb	r0, [r3, #0]
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	7919      	ldrb	r1, [r3, #4]
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	2201      	movs	r2, #1
 8002c52:	f7fe fdf5 	bl	8001840 <I2C_write>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <mpu_reset_fifo+0xa6>
            return -1;
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	e0a8      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002c62:	2032      	movs	r0, #50	; 0x32
 8002c64:	f001 ff8e 	bl	8004b84 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002c68:	23c0      	movs	r3, #192	; 0xc0
 8002c6a:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c6e:	7a9b      	ldrb	r3, [r3, #10]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	7818      	ldrb	r0, [r3, #0]
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	7919      	ldrb	r1, [r3, #4]
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	2201      	movs	r2, #1
 8002c92:	f7fe fdd5 	bl	8001840 <I2C_write>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <mpu_reset_fifo+0xe6>
            return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	e088      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002ca4:	7c5b      	ldrb	r3, [r3, #17]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8002caa:	2302      	movs	r3, #2
 8002cac:	71fb      	strb	r3, [r7, #7]
 8002cae:	e001      	b.n	8002cb4 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	7818      	ldrb	r0, [r3, #0]
 8002cba:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	7c59      	ldrb	r1, [r3, #17]
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f7fe fdbc 	bl	8001840 <I2C_write>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <mpu_reset_fifo+0x118>
            return -1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e06f      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        data = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002cd8:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	7818      	ldrb	r0, [r3, #0]
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	7959      	ldrb	r1, [r3, #5]
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f7fe fdaa 	bl	8001840 <I2C_write>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d05f      	beq.n	8002db2 <mpu_reset_fifo+0x1f6>
            return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e05d      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	7818      	ldrb	r0, [r3, #0]
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	7919      	ldrb	r1, [r3, #4]
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f7fe fd98 	bl	8001840 <I2C_write>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <mpu_reset_fifo+0x160>
            return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e04b      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d1e:	7c9b      	ldrb	r3, [r3, #18]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <mpu_reset_fifo+0x174>
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d26:	7a9b      	ldrb	r3, [r3, #10]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	e001      	b.n	8002d3a <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002d36:	2360      	movs	r3, #96	; 0x60
 8002d38:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	7818      	ldrb	r0, [r3, #0]
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	7919      	ldrb	r1, [r3, #4]
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f7fe fd79 	bl	8001840 <I2C_write>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <mpu_reset_fifo+0x19e>
            return -1;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	e02c      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002d5a:	2032      	movs	r0, #50	; 0x32
 8002d5c:	f001 ff12 	bl	8004b84 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d62:	7c5b      	ldrb	r3, [r3, #17]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	71fb      	strb	r3, [r7, #7]
 8002d6c:	e001      	b.n	8002d72 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	7818      	ldrb	r0, [r3, #0]
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	7c59      	ldrb	r1, [r3, #17]
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	2201      	movs	r2, #1
 8002d82:	f7fe fd5d 	bl	8001840 <I2C_write>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <mpu_reset_fifo+0x1d6>
            return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	e010      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	7818      	ldrb	r0, [r3, #0]
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <mpu_reset_fifo+0x200>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	7959      	ldrb	r1, [r3, #5]
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <mpu_reset_fifo+0x204>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	f7fe fd4d 	bl	8001840 <I2C_write>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <mpu_reset_fifo+0x1f6>
            return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	e000      	b.n	8002db4 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <mpu_set_gyro_fsr+0xa4>)
 8002dd0:	7a9b      	ldrb	r3, [r3, #10]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <mpu_set_gyro_fsr+0x18>
        return -1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e041      	b.n	8002e60 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002de2:	d017      	beq.n	8002e14 <mpu_set_gyro_fsr+0x50>
 8002de4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002de8:	dc17      	bgt.n	8002e1a <mpu_set_gyro_fsr+0x56>
 8002dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dee:	d00e      	beq.n	8002e0e <mpu_set_gyro_fsr+0x4a>
 8002df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df4:	dc11      	bgt.n	8002e1a <mpu_set_gyro_fsr+0x56>
 8002df6:	2bfa      	cmp	r3, #250	; 0xfa
 8002df8:	d003      	beq.n	8002e02 <mpu_set_gyro_fsr+0x3e>
 8002dfa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dfe:	d003      	beq.n	8002e08 <mpu_set_gyro_fsr+0x44>
 8002e00:	e00b      	b.n	8002e1a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
        break;
 8002e06:	e00b      	b.n	8002e20 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002e08:	2308      	movs	r3, #8
 8002e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002e0c:	e008      	b.n	8002e20 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002e0e:	2310      	movs	r3, #16
 8002e10:	73fb      	strb	r3, [r7, #15]
        break;
 8002e12:	e005      	b.n	8002e20 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002e14:	2318      	movs	r3, #24
 8002e16:	73fb      	strb	r3, [r7, #15]
        break;
 8002e18:	e002      	b.n	8002e20 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e01f      	b.n	8002e60 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <mpu_set_gyro_fsr+0xa4>)
 8002e22:	7a1a      	ldrb	r2, [r3, #8]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	08db      	lsrs	r3, r3, #3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d101      	bne.n	8002e32 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e016      	b.n	8002e60 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <mpu_set_gyro_fsr+0xa4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	7818      	ldrb	r0, [r3, #0]
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <mpu_set_gyro_fsr+0xa4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	7999      	ldrb	r1, [r3, #6]
 8002e3e:	f107 030f 	add.w	r3, r7, #15
 8002e42:	2201      	movs	r2, #1
 8002e44:	f7fe fcfc 	bl	8001840 <I2C_write>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <mpu_set_gyro_fsr+0x90>
        return -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	e005      	b.n	8002e60 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <mpu_set_gyro_fsr+0xa4>)
 8002e5c:	721a      	strb	r2, [r3, #8]
    return 0;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <mpu_get_accel_fsr+0x70>)
 8002e76:	7a5b      	ldrb	r3, [r3, #9]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d81b      	bhi.n	8002eb4 <mpu_get_accel_fsr+0x48>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <mpu_get_accel_fsr+0x18>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002e9d 	.word	0x08002e9d
 8002e8c:	08002ea5 	.word	0x08002ea5
 8002e90:	08002ead 	.word	0x08002ead
    case INV_FSR_2G:
        fsr[0] = 2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
        break;
 8002e9a:	e00e      	b.n	8002eba <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	701a      	strb	r2, [r3, #0]
        break;
 8002ea2:	e00a      	b.n	8002eba <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	701a      	strb	r2, [r3, #0]
        break;
 8002eaa:	e006      	b.n	8002eba <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	701a      	strb	r2, [r3, #0]
        break;
 8002eb2:	e002      	b.n	8002eba <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb8:	e00a      	b.n	8002ed0 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <mpu_get_accel_fsr+0x70>)
 8002ebc:	7cdb      	ldrb	r3, [r3, #19]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	701a      	strb	r2, [r3, #0]
    return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <mpu_set_accel_fsr+0xcc>)
 8002eec:	7a9b      	ldrb	r3, [r3, #10]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <mpu_set_accel_fsr+0x18>
        return -1;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	e054      	b.n	8002fa2 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	3b02      	subs	r3, #2
 8002efc:	2b0e      	cmp	r3, #14
 8002efe:	d82d      	bhi.n	8002f5c <mpu_set_accel_fsr+0x7c>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <mpu_set_accel_fsr+0x28>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f45 	.word	0x08002f45
 8002f0c:	08002f5d 	.word	0x08002f5d
 8002f10:	08002f4b 	.word	0x08002f4b
 8002f14:	08002f5d 	.word	0x08002f5d
 8002f18:	08002f5d 	.word	0x08002f5d
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f5d 	.word	0x08002f5d
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08002f5d 	.word	0x08002f5d
 8002f30:	08002f5d 	.word	0x08002f5d
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f5d 	.word	0x08002f5d
 8002f40:	08002f57 	.word	0x08002f57
    case 2:
        data = INV_FSR_2G << 3;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
        break;
 8002f48:	e00b      	b.n	8002f62 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4e:	e008      	b.n	8002f62 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002f50:	2310      	movs	r3, #16
 8002f52:	73fb      	strb	r3, [r7, #15]
        break;
 8002f54:	e005      	b.n	8002f62 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8002f56:	2318      	movs	r3, #24
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e002      	b.n	8002f62 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e01f      	b.n	8002fa2 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <mpu_set_accel_fsr+0xcc>)
 8002f64:	7a5a      	ldrb	r2, [r3, #9]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d101      	bne.n	8002f74 <mpu_set_accel_fsr+0x94>
        return 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e016      	b.n	8002fa2 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <mpu_set_accel_fsr+0xcc>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	7818      	ldrb	r0, [r3, #0]
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <mpu_set_accel_fsr+0xcc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	79d9      	ldrb	r1, [r3, #7]
 8002f80:	f107 030f 	add.w	r3, r7, #15
 8002f84:	2201      	movs	r2, #1
 8002f86:	f7fe fc5b 	bl	8001840 <I2C_write>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <mpu_set_accel_fsr+0xb6>
        return -1;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
 8002f94:	e005      	b.n	8002fa2 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <mpu_set_accel_fsr+0xcc>)
 8002f9e:	725a      	strb	r2, [r3, #9]
    return 0;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <mpu_set_lpf+0x98>)
 8002fbc:	7a9b      	ldrb	r3, [r3, #10]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <mpu_set_lpf+0x18>
        return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e03b      	b.n	8003040 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2bbb      	cmp	r3, #187	; 0xbb
 8002fcc:	d902      	bls.n	8002fd4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e019      	b.n	8003008 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b61      	cmp	r3, #97	; 0x61
 8002fd8:	d902      	bls.n	8002fe0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e013      	b.n	8003008 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	2b29      	cmp	r3, #41	; 0x29
 8002fe4:	d902      	bls.n	8002fec <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e00d      	b.n	8003008 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b13      	cmp	r3, #19
 8002ff0:	d902      	bls.n	8002ff8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e007      	b.n	8003008 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b09      	cmp	r3, #9
 8002ffc:	d902      	bls.n	8003004 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8002ffe:	2305      	movs	r3, #5
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e001      	b.n	8003008 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8003004:	2306      	movs	r3, #6
 8003006:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <mpu_set_lpf+0x98>)
 800300a:	7ada      	ldrb	r2, [r3, #11]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	429a      	cmp	r2, r3
 8003010:	d101      	bne.n	8003016 <mpu_set_lpf+0x66>
        return 0;
 8003012:	2300      	movs	r3, #0
 8003014:	e014      	b.n	8003040 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <mpu_set_lpf+0x98>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	7818      	ldrb	r0, [r3, #0]
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <mpu_set_lpf+0x98>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	7899      	ldrb	r1, [r3, #2]
 8003022:	f107 030f 	add.w	r3, r7, #15
 8003026:	2201      	movs	r2, #1
 8003028:	f7fe fc0a 	bl	8001840 <I2C_write>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <mpu_set_lpf+0x88>
        return -1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e003      	b.n	8003040 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	4b03      	ldr	r3, [pc, #12]	; (8003048 <mpu_set_lpf+0x98>)
 800303c:	72da      	strb	r2, [r3, #11]
    return 0;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000000c 	.word	0x2000000c

0800304c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003056:	4b33      	ldr	r3, [pc, #204]	; (8003124 <mpu_set_sample_rate+0xd8>)
 8003058:	7a9b      	ldrb	r3, [r3, #10]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <mpu_set_sample_rate+0x18>
        return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e05b      	b.n	800311c <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <mpu_set_sample_rate+0xd8>)
 8003066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <mpu_set_sample_rate+0x28>
        return -1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e053      	b.n	800311c <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <mpu_set_sample_rate+0xd8>)
 8003076:	7d1b      	ldrb	r3, [r3, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <mpu_set_sample_rate+0x48>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b28      	cmp	r3, #40	; 0x28
 8003086:	d805      	bhi.n	8003094 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fc1c 	bl	80028c8 <mpu_lp_accel_mode>
                return 0;
 8003090:	2300      	movs	r3, #0
 8003092:	e043      	b.n	800311c <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fc17 	bl	80028c8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d802      	bhi.n	80030a6 <mpu_set_sample_rate+0x5a>
            rate = 4;
 80030a0:	2304      	movs	r3, #4
 80030a2:	80fb      	strh	r3, [r7, #6]
 80030a4:	e006      	b.n	80030b4 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ac:	d902      	bls.n	80030b4 <mpu_set_sample_rate+0x68>
            rate = 1000;
 80030ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b2:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <mpu_set_sample_rate+0xd8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	7818      	ldrb	r0, [r3, #0]
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <mpu_set_sample_rate+0xd8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	7859      	ldrb	r1, [r3, #1]
 80030d2:	f107 030f 	add.w	r3, r7, #15
 80030d6:	2201      	movs	r2, #1
 80030d8:	f7fe fbb2 	bl	8001840 <I2C_write>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <mpu_set_sample_rate+0x9c>
            return -1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
 80030e6:	e019      	b.n	800311c <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	3301      	adds	r3, #1
 80030ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <mpu_set_sample_rate+0xd8>)
 80030f8:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <mpu_set_sample_rate+0xd8>)
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	bf28      	it	cs
 8003102:	2364      	movcs	r3, #100	; 0x64
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f80e 	bl	8003128 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <mpu_set_sample_rate+0xd8>)
 800310e:	89db      	ldrh	r3, [r3, #14]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff4b 	bl	8002fb0 <mpu_set_lpf>
        return 0;
 800311a:	2300      	movs	r3, #0
    }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000000c 	.word	0x2000000c

08003128 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <mpu_set_compass_sample_rate+0x20>
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 800313a:	89db      	ldrh	r3, [r3, #14]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	429a      	cmp	r2, r3
 8003140:	d802      	bhi.n	8003148 <mpu_set_compass_sample_rate+0x20>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d902      	bls.n	800314e <mpu_set_compass_sample_rate+0x26>
        return -1;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	e026      	b.n	800319c <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 8003150:	89da      	ldrh	r2, [r3, #14]
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	b29b      	uxth	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	7818      	ldrb	r0, [r3, #0]
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8003170:	f107 030f 	add.w	r3, r7, #15
 8003174:	2201      	movs	r2, #1
 8003176:	f7fe fb63 	bl	8001840 <I2C_write>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	e00a      	b.n	800319c <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 8003188:	89db      	ldrh	r3, [r3, #14]
 800318a:	461a      	mov	r2, r3
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	fb92 f3f3 	sdiv	r3, r2, r3
 8003194:	b29a      	uxth	r2, r3
 8003196:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <mpu_set_compass_sample_rate+0x7c>)
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 800319a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <mpu_get_gyro_sens+0x5c>)
 80031b2:	7a1b      	ldrb	r3, [r3, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d81b      	bhi.n	80031f0 <mpu_get_gyro_sens+0x48>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <mpu_get_gyro_sens+0x18>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031e1 	.word	0x080031e1
 80031cc:	080031e9 	.word	0x080031e9
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <mpu_get_gyro_sens+0x60>)
 80031d4:	601a      	str	r2, [r3, #0]
        break;
 80031d6:	e00e      	b.n	80031f6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <mpu_get_gyro_sens+0x64>)
 80031dc:	601a      	str	r2, [r3, #0]
        break;
 80031de:	e00a      	b.n	80031f6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <mpu_get_gyro_sens+0x68>)
 80031e4:	601a      	str	r2, [r3, #0]
        break;
 80031e6:	e006      	b.n	80031f6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <mpu_get_gyro_sens+0x6c>)
 80031ec:	601a      	str	r2, [r3, #0]
        break;
 80031ee:	e002      	b.n	80031f6 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	e000      	b.n	80031f8 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	2000000c 	.word	0x2000000c
 8003208:	43030000 	.word	0x43030000
 800320c:	42830000 	.word	0x42830000
 8003210:	42033333 	.word	0x42033333
 8003214:	41833333 	.word	0x41833333

08003218 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <mpu_get_accel_sens+0x78>)
 8003222:	7a5b      	ldrb	r3, [r3, #9]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d81f      	bhi.n	8003268 <mpu_get_accel_sens+0x50>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <mpu_get_accel_sens+0x18>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	0800324b 	.word	0x0800324b
 8003238:	08003255 	.word	0x08003255
 800323c:	0800325f 	.word	0x0800325f
    case INV_FSR_2G:
        sens[0] = 16384;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003246:	801a      	strh	r2, [r3, #0]
        break;
 8003248:	e011      	b.n	800326e <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003250:	801a      	strh	r2, [r3, #0]
        break;
 8003252:	e00c      	b.n	800326e <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800325a:	801a      	strh	r2, [r3, #0]
        break;
 800325c:	e007      	b.n	800326e <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	801a      	strh	r2, [r3, #0]
        break;
 8003266:	e002      	b.n	800326e <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	e00a      	b.n	8003284 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <mpu_get_accel_sens+0x78>)
 8003270:	7cdb      	ldrb	r3, [r3, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	801a      	strh	r2, [r3, #0]
    return 0;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c

08003294 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <mpu_configure_fifo+0x24>
        return 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e038      	b.n	800332a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032ba:	7a9b      	ldrb	r3, [r3, #10]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <mpu_configure_fifo+0x32>
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e031      	b.n	800332a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032c8:	7c1b      	ldrb	r3, [r3, #16]
 80032ca:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032ce:	7a9a      	ldrb	r2, [r3, #10]
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4013      	ands	r3, r2
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032d8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032dc:	7c1b      	ldrb	r3, [r3, #16]
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d003      	beq.n	80032ec <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e001      	b.n	80032f0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <mpu_configure_fifo+0x6a>
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <mpu_configure_fifo+0xa0>)
 80032f8:	7d1b      	ldrb	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff f990 	bl	8002624 <set_int_enable>
 8003304:	e002      	b.n	800330c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8003306:	2000      	movs	r0, #0
 8003308:	f7ff f98c 	bl	8002624 <set_int_enable>
        if (sensors) {
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8003312:	f7ff fc53 	bl	8002bbc <mpu_reset_fifo>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800331c:	4a05      	ldr	r2, [pc, #20]	; (8003334 <mpu_configure_fifo+0xa0>)
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	7413      	strb	r3, [r2, #16]
                return -1;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	e000      	b.n	800332a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000000c 	.word	0x2000000c

08003338 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e007      	b.n	8003362 <mpu_set_sensors+0x2a>
    else if (sensors)
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <mpu_set_sensors+0x26>
        data = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e001      	b.n	8003362 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	7818      	ldrb	r0, [r3, #0]
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <mpu_set_sensors+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	7d59      	ldrb	r1, [r3, #21]
 800336e:	f107 030f 	add.w	r3, r7, #15
 8003372:	2201      	movs	r2, #1
 8003374:	f7fe fa64 	bl	8001840 <I2C_write>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 800337e:	4b5c      	ldr	r3, [pc, #368]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003380:	2200      	movs	r2, #0
 8003382:	729a      	strb	r2, [r3, #10]
        return -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	e0ae      	b.n	80034e8 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4b57      	ldr	r3, [pc, #348]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003394:	731a      	strb	r2, [r3, #12]

    data = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	7818      	ldrb	r0, [r3, #0]
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	7d99      	ldrb	r1, [r3, #22]
 80033f6:	f107 030f 	add.w	r3, r7, #15
 80033fa:	2201      	movs	r2, #1
 80033fc:	f7fe fa20 	bl	8001840 <I2C_write>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003408:	2200      	movs	r2, #0
 800340a:	729a      	strb	r2, [r3, #10]
        return -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	e06a      	b.n	80034e8 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <mpu_set_sensors+0xec>
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d002      	beq.n	8003424 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800341e:	2000      	movs	r0, #0
 8003420:	f000 f9ac 	bl	800377c <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	7818      	ldrb	r0, [r3, #0]
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <mpu_set_sensors+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	7919      	ldrb	r1, [r3, #4]
 8003430:	f107 030e 	add.w	r3, r7, #14
 8003434:	2201      	movs	r2, #1
 8003436:	f7fe fa25 	bl	8001884 <I2C_read>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <mpu_set_sensors+0x10e>
        return -1;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
 8003444:	e050      	b.n	80034e8 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8003450:	2311      	movs	r3, #17
 8003452:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	f043 0320 	orr.w	r3, r3, #32
 800345a:	b2db      	uxtb	r3, r3
 800345c:	73bb      	strb	r3, [r7, #14]
 800345e:	e006      	b.n	800346e <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8003460:	2310      	movs	r3, #16
 8003462:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	f023 0320 	bic.w	r3, r3, #32
 800346a:	b2db      	uxtb	r3, r3
 800346c:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 8003478:	7bbb      	ldrb	r3, [r7, #14]
 800347a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800347e:	b2db      	uxtb	r3, r3
 8003480:	73bb      	strb	r3, [r7, #14]
 8003482:	e004      	b.n	800348e <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800348a:	b2db      	uxtb	r3, r3
 800348c:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	7818      	ldrb	r0, [r3, #0]
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <mpu_set_sensors+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800349c:	f107 030f 	add.w	r3, r7, #15
 80034a0:	2201      	movs	r2, #1
 80034a2:	f7fe f9cd 	bl	8001840 <I2C_write>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <mpu_set_sensors+0x17a>
        return -1;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
 80034b0:	e01a      	b.n	80034e8 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	7818      	ldrb	r0, [r3, #0]
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	7919      	ldrb	r1, [r3, #4]
 80034be:	f107 030e 	add.w	r3, r7, #14
 80034c2:	2201      	movs	r2, #1
 80034c4:	f7fe f9bc 	bl	8001840 <I2C_write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <mpu_set_sensors+0x19c>
        return -1;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e009      	b.n	80034e8 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80034d4:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <mpu_set_sensors+0x1b8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80034e0:	2032      	movs	r0, #50	; 0x32
 80034e2:	f001 fb4f 	bl	8004b84 <HAL_Delay>
    return 0;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <mpu_read_fifo_stream+0x1e>
        return -1;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e068      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003514:	7a9b      	ldrb	r3, [r3, #10]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <mpu_read_fifo_stream+0x2c>
        return -1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e061      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	7818      	ldrb	r0, [r3, #0]
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	7b19      	ldrb	r1, [r3, #12]
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	2202      	movs	r2, #2
 8003532:	f7fe f9a7 	bl	8001884 <I2C_read>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <mpu_read_fifo_stream+0x4e>
        return -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	e050      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8003542:	7d3b      	ldrb	r3, [r7, #20]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	b21a      	sxth	r2, r3
 8003548:	7d7b      	ldrb	r3, [r7, #21]
 800354a:	b21b      	sxth	r3, r3
 800354c:	4313      	orrs	r3, r2
 800354e:	b21b      	sxth	r3, r3
 8003550:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8003552:	8afa      	ldrh	r2, [r7, #22]
 8003554:	89fb      	ldrh	r3, [r7, #14]
 8003556:	429a      	cmp	r2, r3
 8003558:	d205      	bcs.n	8003566 <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
        return -1;
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	e03e      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	885b      	ldrh	r3, [r3, #2]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	8afa      	ldrh	r2, [r7, #22]
 8003572:	429a      	cmp	r2, r3
 8003574:	d91a      	bls.n	80035ac <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	7818      	ldrb	r0, [r3, #0]
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	7cd9      	ldrb	r1, [r3, #19]
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	2201      	movs	r2, #1
 8003588:	f7fe f97c 	bl	8001884 <I2C_read>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <mpu_read_fifo_stream+0xa4>
            return -1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e025      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8003598:	7d3b      	ldrb	r3, [r7, #20]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 80035a2:	f7ff fb0b 	bl	8002bbc <mpu_reset_fifo>
            return -2;
 80035a6:	f06f 0301 	mvn.w	r3, #1
 80035aa:	e01b      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	7818      	ldrb	r0, [r3, #0]
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <mpu_read_fifo_stream+0xf8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	7b59      	ldrb	r1, [r3, #13]
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f7fe f961 	bl	8001884 <I2C_read>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <mpu_read_fifo_stream+0xda>
        return -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	e00a      	b.n	80035e4 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 80035ce:	8afa      	ldrh	r2, [r7, #22]
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	701a      	strb	r2, [r3, #0]
    return 0;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	2000000c 	.word	0x2000000c

080035f0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <mpu_set_bypass+0x188>)
 80035fc:	7c9b      	ldrb	r3, [r3, #18]
 80035fe:	79fa      	ldrb	r2, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d101      	bne.n	8003608 <mpu_set_bypass+0x18>
        return 0;
 8003604:	2300      	movs	r3, #0
 8003606:	e0b2      	b.n	800376e <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d050      	beq.n	80036b0 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800360e:	4b5a      	ldr	r3, [pc, #360]	; (8003778 <mpu_set_bypass+0x188>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	7818      	ldrb	r0, [r3, #0]
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <mpu_set_bypass+0x188>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	7919      	ldrb	r1, [r3, #4]
 800361a:	f107 030f 	add.w	r3, r7, #15
 800361e:	2201      	movs	r2, #1
 8003620:	f7fe f930 	bl	8001884 <I2C_read>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <mpu_set_bypass+0x40>
            return -1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e09e      	b.n	800376e <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	f023 0320 	bic.w	r3, r3, #32
 8003636:	b2db      	uxtb	r3, r3
 8003638:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800363a:	4b4f      	ldr	r3, [pc, #316]	; (8003778 <mpu_set_bypass+0x188>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	7818      	ldrb	r0, [r3, #0]
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <mpu_set_bypass+0x188>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	7919      	ldrb	r1, [r3, #4]
 8003646:	f107 030f 	add.w	r3, r7, #15
 800364a:	2201      	movs	r2, #1
 800364c:	f7fe f8f8 	bl	8001840 <I2C_write>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <mpu_set_bypass+0x6c>
            return -1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	e088      	b.n	800376e <mpu_set_bypass+0x17e>
        delay_ms(3);
 800365c:	2003      	movs	r0, #3
 800365e:	f001 fa91 	bl	8004b84 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8003662:	2302      	movs	r3, #2
 8003664:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8003666:	4b44      	ldr	r3, [pc, #272]	; (8003778 <mpu_set_bypass+0x188>)
 8003668:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003676:	b2db      	uxtb	r3, r3
 8003678:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <mpu_set_bypass+0x188>)
 800367c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800368a:	b2db      	uxtb	r3, r3
 800368c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800368e:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <mpu_set_bypass+0x188>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	7818      	ldrb	r0, [r3, #0]
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <mpu_set_bypass+0x188>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	7dd9      	ldrb	r1, [r3, #23]
 800369a:	f107 030f 	add.w	r3, r7, #15
 800369e:	2201      	movs	r2, #1
 80036a0:	f7fe f8ce 	bl	8001840 <I2C_write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d05d      	beq.n	8003766 <mpu_set_bypass+0x176>
            return -1;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	e05e      	b.n	800376e <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <mpu_set_bypass+0x188>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	7818      	ldrb	r0, [r3, #0]
 80036b6:	4b30      	ldr	r3, [pc, #192]	; (8003778 <mpu_set_bypass+0x188>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	7919      	ldrb	r1, [r3, #4]
 80036bc:	f107 030f 	add.w	r3, r7, #15
 80036c0:	2201      	movs	r2, #1
 80036c2:	f7fe f8df 	bl	8001884 <I2C_read>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <mpu_set_bypass+0xe2>
            return -1;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	e04d      	b.n	800376e <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <mpu_set_bypass+0x188>)
 80036d4:	7a9b      	ldrb	r3, [r3, #10]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e004      	b.n	80036f4 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	f023 0320 	bic.w	r3, r3, #32
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <mpu_set_bypass+0x188>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	7818      	ldrb	r0, [r3, #0]
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <mpu_set_bypass+0x188>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	7919      	ldrb	r1, [r3, #4]
 8003700:	f107 030f 	add.w	r3, r7, #15
 8003704:	2201      	movs	r2, #1
 8003706:	f7fe f89b 	bl	8001840 <I2C_write>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <mpu_set_bypass+0x126>
            return -1;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	e02b      	b.n	800376e <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003716:	2003      	movs	r0, #3
 8003718:	f001 fa34 	bl	8004b84 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <mpu_set_bypass+0x188>)
 800371e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e001      	b.n	8003730 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <mpu_set_bypass+0x188>)
 8003732:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003740:	b2db      	uxtb	r3, r3
 8003742:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <mpu_set_bypass+0x188>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	7818      	ldrb	r0, [r3, #0]
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <mpu_set_bypass+0x188>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	7dd9      	ldrb	r1, [r3, #23]
 8003750:	f107 030f 	add.w	r3, r7, #15
 8003754:	2201      	movs	r2, #1
 8003756:	f7fe f873 	bl	8001840 <I2C_write>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <mpu_set_bypass+0x176>
            return -1;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295
 8003764:	e003      	b.n	800376e <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8003766:	4a04      	ldr	r2, [pc, #16]	; (8003778 <mpu_set_bypass+0x188>)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	7493      	strb	r3, [r2, #18]
    return 0;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c

0800377c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <mpu_set_int_latched+0x84>)
 8003788:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800378c:	79fa      	ldrb	r2, [r7, #7]
 800378e:	429a      	cmp	r2, r3
 8003790:	d101      	bne.n	8003796 <mpu_set_int_latched+0x1a>
        return 0;
 8003792:	2300      	movs	r3, #0
 8003794:	e030      	b.n	80037f8 <mpu_set_int_latched+0x7c>

    if (enable)
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800379c:	2330      	movs	r3, #48	; 0x30
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <mpu_set_int_latched+0x84>)
 80037a8:	7c9b      	ldrb	r3, [r3, #18]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <mpu_set_int_latched+0x84>)
 80037ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <mpu_set_int_latched+0x84>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	7818      	ldrb	r0, [r3, #0]
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <mpu_set_int_latched+0x84>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	7dd9      	ldrb	r1, [r3, #23]
 80037d8:	f107 030f 	add.w	r3, r7, #15
 80037dc:	2201      	movs	r2, #1
 80037de:	f7fe f82f 	bl	8001840 <I2C_write>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <mpu_set_int_latched+0x72>
        return -1;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	e004      	b.n	80037f8 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <mpu_set_int_latched+0x84>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000000c 	.word	0x2000000c

08003804 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	603a      	str	r2, [r7, #0]
 800380e:	80fb      	strh	r3, [r7, #6]
 8003810:	460b      	mov	r3, r1
 8003812:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <mpu_write_mem+0x1c>
        return -1;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e03d      	b.n	800389c <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <mpu_write_mem+0xa0>)
 8003822:	7a9b      	ldrb	r3, [r3, #10]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <mpu_write_mem+0x2a>
        return -1;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e036      	b.n	800389c <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	b29b      	uxth	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800383e:	7b7b      	ldrb	r3, [r7, #13]
 8003840:	461a      	mov	r2, r3
 8003842:	88bb      	ldrh	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <mpu_write_mem+0xa0>)
 8003848:	6852      	ldr	r2, [r2, #4]
 800384a:	8952      	ldrh	r2, [r2, #10]
 800384c:	4293      	cmp	r3, r2
 800384e:	dd02      	ble.n	8003856 <mpu_write_mem+0x52>
        return -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	e022      	b.n	800389c <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <mpu_write_mem+0xa0>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	7818      	ldrb	r0, [r3, #0]
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <mpu_write_mem+0xa0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	7ed9      	ldrb	r1, [r3, #27]
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	2202      	movs	r2, #2
 8003868:	f7fd ffea 	bl	8001840 <I2C_write>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <mpu_write_mem+0x74>
        return -1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e011      	b.n	800389c <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <mpu_write_mem+0xa0>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	7818      	ldrb	r0, [r3, #0]
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <mpu_write_mem+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	7e19      	ldrb	r1, [r3, #24]
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f7fd ffd9 	bl	8001840 <I2C_write>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <mpu_write_mem+0x96>
        return -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	e000      	b.n	800389c <mpu_write_mem+0x98>
    return 0;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000000c 	.word	0x2000000c

080038a8 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	603a      	str	r2, [r7, #0]
 80038b2:	80fb      	strh	r3, [r7, #6]
 80038b4:	460b      	mov	r3, r1
 80038b6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <mpu_read_mem+0x1c>
        return -1;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e03d      	b.n	8003940 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <mpu_read_mem+0xa0>)
 80038c6:	7a9b      	ldrb	r3, [r3, #10]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <mpu_read_mem+0x2a>
        return -1;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	e036      	b.n	8003940 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80038e2:	7b7b      	ldrb	r3, [r7, #13]
 80038e4:	461a      	mov	r2, r3
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <mpu_read_mem+0xa0>)
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	8952      	ldrh	r2, [r2, #10]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	dd02      	ble.n	80038fa <mpu_read_mem+0x52>
        return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	e022      	b.n	8003940 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <mpu_read_mem+0xa0>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	7818      	ldrb	r0, [r3, #0]
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <mpu_read_mem+0xa0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	7ed9      	ldrb	r1, [r3, #27]
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	2202      	movs	r2, #2
 800390c:	f7fd ff98 	bl	8001840 <I2C_write>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <mpu_read_mem+0x74>
        return -1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e011      	b.n	8003940 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <mpu_read_mem+0xa0>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	7818      	ldrb	r0, [r3, #0]
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <mpu_read_mem+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	7e19      	ldrb	r1, [r3, #24]
 8003928:	88bb      	ldrh	r3, [r7, #4]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f7fd ffa9 	bl	8001884 <I2C_read>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <mpu_read_mem+0x96>
        return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	e000      	b.n	8003940 <mpu_read_mem+0x98>
    return 0;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000000c 	.word	0x2000000c

0800394c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	4611      	mov	r1, r2
 8003956:	461a      	mov	r2, r3
 8003958:	4603      	mov	r3, r0
 800395a:	81fb      	strh	r3, [r7, #14]
 800395c:	460b      	mov	r3, r1
 800395e:	81bb      	strh	r3, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <mpu_load_firmware+0xf8>)
 8003966:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e062      	b.n	8003a3a <mpu_load_firmware+0xee>

    if (!firmware)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <mpu_load_firmware+0x34>
        return -1;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	e05c      	b.n	8003a3a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003980:	2300      	movs	r3, #0
 8003982:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003984:	e034      	b.n	80039f0 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003986:	89fa      	ldrh	r2, [r7, #14]
 8003988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b10      	cmp	r3, #16
 800398e:	bfa8      	it	ge
 8003990:	2310      	movge	r3, #16
 8003992:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	441a      	add	r2, r3
 800399a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800399c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff30 	bl	8003804 <mpu_write_mem>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <mpu_load_firmware+0x64>
            return -1;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	e044      	b.n	8003a3a <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 80039b0:	f107 0214 	add.w	r2, r7, #20
 80039b4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80039b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff75 	bl	80038a8 <mpu_read_mem>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <mpu_load_firmware+0x7e>
            return -1;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
 80039c8:	e037      	b.n	8003a3a <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 80039ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4413      	add	r3, r2
 80039d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039d2:	f107 0114 	add.w	r1, r7, #20
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 fd2e 	bl	8007438 <memcmp>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <mpu_load_firmware+0x9c>
            return -2;
 80039e2:	f06f 0301 	mvn.w	r3, #1
 80039e6:	e028      	b.n	8003a3a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80039e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039ec:	4413      	add	r3, r2
 80039ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039f2:	89fb      	ldrh	r3, [r7, #14]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d3c6      	bcc.n	8003986 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80039f8:	89bb      	ldrh	r3, [r7, #12]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8003a02:	89bb      	ldrh	r3, [r7, #12]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <mpu_load_firmware+0xf8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	7818      	ldrb	r0, [r3, #0]
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <mpu_load_firmware+0xf8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	7f59      	ldrb	r1, [r3, #29]
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f7fd ff11 	bl	8001840 <I2C_write>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <mpu_load_firmware+0xde>
        return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	e007      	b.n	8003a3a <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <mpu_load_firmware+0xf8>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <mpu_load_firmware+0xf8>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3728      	adds	r7, #40	; 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a58:	79fa      	ldrb	r2, [r7, #7]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d101      	bne.n	8003a62 <mpu_set_dmp_state+0x1a>
        return 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e040      	b.n	8003ae4 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d027      	beq.n	8003ab8 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003a6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <mpu_set_dmp_state+0x30>
            return -1;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	e035      	b.n	8003ae4 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7fe fdd3 	bl	8002624 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7ff fdb6 	bl	80035f0 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fadf 	bl	800304c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	7818      	ldrb	r0, [r3, #0]
 8003a98:	f107 030f 	add.w	r3, r7, #15
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	2123      	movs	r1, #35	; 0x23
 8003aa0:	f7fd fece 	bl	8001840 <I2C_write>
        st.chip_cfg.dmp_on = 1;
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7fe fdb9 	bl	8002624 <set_int_enable>
        mpu_reset_fifo();
 8003ab2:	f7ff f883 	bl	8002bbc <mpu_reset_fifo>
 8003ab6:	e014      	b.n	8003ae2 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fe fdb3 	bl	8002624 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003ac0:	7c1b      	ldrb	r3, [r3, #16]
 8003ac2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	7818      	ldrb	r0, [r3, #0]
 8003aca:	f107 030f 	add.w	r3, r7, #15
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2123      	movs	r1, #35	; 0x23
 8003ad2:	f7fd feb5 	bl	8001840 <I2C_write>
        st.chip_cfg.dmp_on = 0;
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <mpu_set_dmp_state+0xa4>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8003ade:	f7ff f86d 	bl	8002bbc <mpu_reset_fifo>
    }
    return 0;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000000c 	.word	0x2000000c

08003af0 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7ff fd7a 	bl	80035f0 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003afc:	230c      	movs	r3, #12
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e010      	b.n	8003b24 <setup_compass+0x34>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	7bf8      	ldrb	r0, [r7, #15]
 8003b06:	2201      	movs	r2, #1
 8003b08:	2100      	movs	r1, #0
 8003b0a:	f7fd febb 	bl	8001884 <I2C_read>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <setup_compass+0x2e>
 8003b18:	793b      	ldrb	r3, [r7, #4]
 8003b1a:	2b48      	cmp	r3, #72	; 0x48
 8003b1c:	d006      	beq.n	8003b2c <setup_compass+0x3c>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	3301      	adds	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d9eb      	bls.n	8003b02 <setup_compass+0x12>
 8003b2a:	e000      	b.n	8003b2e <setup_compass+0x3e>
            break;
 8003b2c:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d905      	bls.n	8003b40 <setup_compass+0x50>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
 8003b34:	488e      	ldr	r0, [pc, #568]	; (8003d70 <setup_compass+0x280>)
 8003b36:	f003 fd03 	bl	8007540 <puts>
        return -1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e112      	b.n	8003d66 <setup_compass+0x276>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8003b40:	4a8c      	ldr	r2, [pc, #560]	; (8003d74 <setup_compass+0x284>)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8003b48:	2310      	movs	r3, #16
 8003b4a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003b4c:	4b89      	ldr	r3, [pc, #548]	; (8003d74 <setup_compass+0x284>)
 8003b4e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	2201      	movs	r2, #1
 8003b56:	210a      	movs	r1, #10
 8003b58:	f7fd fe72 	bl	8001840 <I2C_write>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <setup_compass+0x78>
        return -1;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e0fe      	b.n	8003d66 <setup_compass+0x276>
    delay_ms(1);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f001 f80b 	bl	8004b84 <HAL_Delay>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8003b6e:	231f      	movs	r3, #31
 8003b70:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003b72:	4b80      	ldr	r3, [pc, #512]	; (8003d74 <setup_compass+0x284>)
 8003b74:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	210a      	movs	r1, #10
 8003b7e:	f7fd fe5f 	bl	8001840 <I2C_write>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <setup_compass+0x9e>
        return -1;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e0eb      	b.n	8003d66 <setup_compass+0x276>
    delay_ms(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 fff8 	bl	8004b84 <HAL_Delay>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8003b94:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <setup_compass+0x284>)
 8003b96:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	f7fd fe70 	bl	8001884 <I2C_read>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <setup_compass+0xc0>
        return -1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e0da      	b.n	8003d66 <setup_compass+0x276>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8003bb0:	793b      	ldrb	r3, [r7, #4]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3380      	adds	r3, #128	; 0x80
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <setup_compass+0x284>)
 8003bbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8003bbe:	797b      	ldrb	r3, [r7, #5]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3380      	adds	r3, #128	; 0x80
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <setup_compass+0x284>)
 8003bca:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8003bcc:	79bb      	ldrb	r3, [r7, #6]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3380      	adds	r3, #128	; 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b21a      	sxth	r2, r3
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <setup_compass+0x284>)
 8003bd8:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8003bda:	2310      	movs	r3, #16
 8003bdc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <setup_compass+0x284>)
 8003be0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	2201      	movs	r2, #1
 8003be8:	210a      	movs	r1, #10
 8003bea:	f7fd fe29 	bl	8001840 <I2C_write>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <setup_compass+0x10a>
        return -1;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	e0b5      	b.n	8003d66 <setup_compass+0x276>
    delay_ms(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f000 ffc2 	bl	8004b84 <HAL_Delay>

    mpu_set_bypass(0);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff fcf5 	bl	80035f0 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8003c06:	2340      	movs	r3, #64	; 0x40
 8003c08:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003c0a:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <setup_compass+0x284>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	7818      	ldrb	r0, [r3, #0]
 8003c10:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <setup_compass+0x284>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	7e99      	ldrb	r1, [r3, #26]
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f7fd fe11 	bl	8001840 <I2C_write>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <setup_compass+0x13a>
        return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e09d      	b.n	8003d66 <setup_compass+0x276>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003c2a:	4b52      	ldr	r3, [pc, #328]	; (8003d74 <setup_compass+0x284>)
 8003c2c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <setup_compass+0x284>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	7818      	ldrb	r0, [r3, #0]
 8003c3e:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <setup_compass+0x284>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	7f99      	ldrb	r1, [r3, #30]
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	2201      	movs	r2, #1
 8003c48:	f7fd fdfa 	bl	8001840 <I2C_write>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <setup_compass+0x168>
        return -1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	e086      	b.n	8003d66 <setup_compass+0x276>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <setup_compass+0x284>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	7818      	ldrb	r0, [r3, #0]
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <setup_compass+0x284>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	7fd9      	ldrb	r1, [r3, #31]
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f7fd fde8 	bl	8001840 <I2C_write>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <setup_compass+0x18c>
        return -1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e074      	b.n	8003d66 <setup_compass+0x276>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8003c7c:	2388      	movs	r3, #136	; 0x88
 8003c7e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003c80:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <setup_compass+0x284>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	7818      	ldrb	r0, [r3, #0]
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <setup_compass+0x284>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	2201      	movs	r2, #1
 8003c92:	f7fd fdd5 	bl	8001840 <I2C_write>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <setup_compass+0x1b2>
        return -1;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e061      	b.n	8003d66 <setup_compass+0x276>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <setup_compass+0x284>)
 8003ca4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ca8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <setup_compass+0x284>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	7818      	ldrb	r0, [r3, #0]
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <setup_compass+0x284>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f7fd fdc0 	bl	8001840 <I2C_write>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <setup_compass+0x1dc>
        return -1;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	e04c      	b.n	8003d66 <setup_compass+0x276>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8003ccc:	230a      	movs	r3, #10
 8003cce:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <setup_compass+0x284>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	7818      	ldrb	r0, [r3, #0]
 8003cd6:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <setup_compass+0x284>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f7fd fdad 	bl	8001840 <I2C_write>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <setup_compass+0x202>
        return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e039      	b.n	8003d66 <setup_compass+0x276>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8003cf2:	2381      	movs	r3, #129	; 0x81
 8003cf4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <setup_compass+0x284>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	7818      	ldrb	r0, [r3, #0]
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <setup_compass+0x284>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	2201      	movs	r2, #1
 8003d08:	f7fd fd9a 	bl	8001840 <I2C_write>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <setup_compass+0x228>
        return -1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e026      	b.n	8003d66 <setup_compass+0x276>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8003d18:	2311      	movs	r3, #17
 8003d1a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <setup_compass+0x284>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	7818      	ldrb	r0, [r3, #0]
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <setup_compass+0x284>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f7fd fd87 	bl	8001840 <I2C_write>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <setup_compass+0x24e>
        return -1;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	e013      	b.n	8003d66 <setup_compass+0x276>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <setup_compass+0x284>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	7818      	ldrb	r0, [r3, #0]
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <setup_compass+0x284>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	2201      	movs	r2, #1
 8003d54:	f7fd fd74 	bl	8001840 <I2C_write>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <setup_compass+0x274>
        return -1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	e000      	b.n	8003d66 <setup_compass+0x276>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	08008238 	.word	0x08008238
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003d82:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003d84:	7a9b      	ldrb	r3, [r3, #10]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <mpu_get_compass_reg+0x1c>
        return -1;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	e076      	b.n	8003e82 <mpu_get_compass_reg+0x10a>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8003d94:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	7818      	ldrb	r0, [r3, #0]
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	2208      	movs	r2, #8
 8003da8:	f7fd fd6c 	bl	8001884 <I2C_read>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <mpu_get_compass_reg+0x40>
        return -1;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	e064      	b.n	8003e82 <mpu_get_compass_reg+0x10a>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8003db8:	7b3b      	ldrb	r3, [r7, #12]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <mpu_get_compass_reg+0x54>
 8003dc2:	7b3b      	ldrb	r3, [r7, #12]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <mpu_get_compass_reg+0x5a>
        return -2;
 8003dcc:	f06f 0301 	mvn.w	r3, #1
 8003dd0:	e057      	b.n	8003e82 <mpu_get_compass_reg+0x10a>
    if (tmp[7] & AKM_OVERFLOW)
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da02      	bge.n	8003de0 <mpu_get_compass_reg+0x68>
        return -3;
 8003dda:	f06f 0302 	mvn.w	r3, #2
 8003dde:	e050      	b.n	8003e82 <mpu_get_compass_reg+0x10a>
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8003de0:	7bbb      	ldrb	r3, [r7, #14]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	7b7b      	ldrb	r3, [r7, #13]
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	b21a      	sxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8003df2:	7c3b      	ldrb	r3, [r7, #16]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	b219      	sxth	r1, r3
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	b21a      	sxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	430a      	orrs	r2, r1
 8003e02:	b212      	sxth	r2, r2
 8003e04:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[6] << 8) | tmp[5];
 8003e06:	7cbb      	ldrb	r3, [r7, #18]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	b219      	sxth	r1, r3
 8003e0c:	7c7b      	ldrb	r3, [r7, #17]
 8003e0e:	b21a      	sxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	430a      	orrs	r2, r1
 8003e16:	b212      	sxth	r2, r2
 8003e18:	801a      	strh	r2, [r3, #0]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003e24:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003e28:	fb03 f302 	mul.w	r3, r3, r2
 8003e2c:	121b      	asrs	r3, r3, #8
 8003e2e:	b21a      	sxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	801a      	strh	r2, [r3, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3302      	adds	r3, #2
 8003e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003e40:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003e44:	fb03 f302 	mul.w	r3, r3, r2
 8003e48:	121a      	asrs	r2, r3, #8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	b212      	sxth	r2, r2
 8003e50:	801a      	strh	r2, [r3, #0]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <mpu_get_compass_reg+0x114>)
 8003e5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003e62:	fb03 f302 	mul.w	r3, r3, r2
 8003e66:	121a      	asrs	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	b212      	sxth	r2, r2
 8003e6e:	801a      	strh	r2, [r3, #0]

    if (timestamp)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <mpu_get_compass_reg+0x108>
        get_ms(timestamp);
 8003e76:	f000 fe7b 	bl	8004b70 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	601a      	str	r2, [r3, #0]
    return 0;
 8003e80:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e98:	23c8      	movs	r3, #200	; 0xc8
 8003e9a:	4904      	ldr	r1, [pc, #16]	; (8003eac <dmp_load_motion_driver_firmware+0x1c>)
 8003e9c:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8003ea0:	f7ff fd54 	bl	800394c <mpu_load_firmware>
 8003ea4:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	0800832c 	.word	0x0800832c

08003eb0 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <dmp_set_fifo_rate+0x88>)
 8003ebc:	f107 0310 	add.w	r3, r7, #16
 8003ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8003eca:	d902      	bls.n	8003ed2 <dmp_set_fifo_rate+0x22>
        return -1;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e02e      	b.n	8003f30 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	22c8      	movs	r2, #200	; 0xc8
 8003ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003ee0:	8bfb      	ldrh	r3, [r7, #30]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003eea:	8bfb      	ldrh	r3, [r7, #30]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	f240 2016 	movw	r0, #534	; 0x216
 8003efc:	f7ff fc82 	bl	8003804 <mpu_write_mem>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <dmp_set_fifo_rate+0x5c>
        return -1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e011      	b.n	8003f30 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	461a      	mov	r2, r3
 8003f12:	210c      	movs	r1, #12
 8003f14:	f640 20c1 	movw	r0, #2753	; 0xac1
 8003f18:	f7ff fc74 	bl	8003804 <mpu_write_mem>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <dmp_set_fifo_rate+0x78>
        return -1;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e003      	b.n	8003f30 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <dmp_set_fifo_rate+0x8c>)
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	8193      	strh	r3, [r2, #12]
    return 0;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	0800825c 	.word	0x0800825c
 8003f3c:	200001b4 	.word	0x200001b4

08003f40 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	460a      	mov	r2, r1
 8003f4a:	71fb      	strb	r3, [r7, #7]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <dmp_set_tap_thresh+0x22>
 8003f5a:	88bb      	ldrh	r3, [r7, #4]
 8003f5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f60:	d902      	bls.n	8003f68 <dmp_set_tap_thresh+0x28>
        return -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	e107      	b.n	8004178 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc fdc4 	bl	8000af8 <__aeabi_ui2f>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4983      	ldr	r1, [pc, #524]	; (8004180 <dmp_set_tap_thresh+0x240>)
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fecb 	bl	8000d10 <__aeabi_fdiv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003f7e:	f107 030b 	add.w	r3, r7, #11
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe ff72 	bl	8002e6c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	3b02      	subs	r3, #2
 8003f8c:	2b0e      	cmp	r3, #14
 8003f8e:	d879      	bhi.n	8004084 <dmp_set_tap_thresh+0x144>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <dmp_set_tap_thresh+0x58>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fd5 	.word	0x08003fd5
 8003f9c:	08004085 	.word	0x08004085
 8003fa0:	08004001 	.word	0x08004001
 8003fa4:	08004085 	.word	0x08004085
 8003fa8:	08004085 	.word	0x08004085
 8003fac:	08004085 	.word	0x08004085
 8003fb0:	0800402d 	.word	0x0800402d
 8003fb4:	08004085 	.word	0x08004085
 8003fb8:	08004085 	.word	0x08004085
 8003fbc:	08004085 	.word	0x08004085
 8003fc0:	08004085 	.word	0x08004085
 8003fc4:	08004085 	.word	0x08004085
 8003fc8:	08004085 	.word	0x08004085
 8003fcc:	08004085 	.word	0x08004085
 8003fd0:	08004059 	.word	0x08004059
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003fd4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003fd8:	6938      	ldr	r0, [r7, #16]
 8003fda:	f7fc fde5 	bl	8000ba8 <__aeabi_fmul>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc ffe3 	bl	8000fac <__aeabi_f2uiz>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003fea:	4966      	ldr	r1, [pc, #408]	; (8004184 <dmp_set_tap_thresh+0x244>)
 8003fec:	6938      	ldr	r0, [r7, #16]
 8003fee:	f7fc fddb 	bl	8000ba8 <__aeabi_fmul>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc ffd9 	bl	8000fac <__aeabi_f2uiz>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	82bb      	strh	r3, [r7, #20]
        break;
 8003ffe:	e044      	b.n	800408a <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004000:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8004004:	6938      	ldr	r0, [r7, #16]
 8004006:	f7fc fdcf 	bl	8000ba8 <__aeabi_fmul>
 800400a:	4603      	mov	r3, r0
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc ffcd 	bl	8000fac <__aeabi_f2uiz>
 8004012:	4603      	mov	r3, r0
 8004014:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004016:	495c      	ldr	r1, [pc, #368]	; (8004188 <dmp_set_tap_thresh+0x248>)
 8004018:	6938      	ldr	r0, [r7, #16]
 800401a:	f7fc fdc5 	bl	8000ba8 <__aeabi_fmul>
 800401e:	4603      	mov	r3, r0
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc ffc3 	bl	8000fac <__aeabi_f2uiz>
 8004026:	4603      	mov	r3, r0
 8004028:	82bb      	strh	r3, [r7, #20]
        break;
 800402a:	e02e      	b.n	800408a <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800402c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8004030:	6938      	ldr	r0, [r7, #16]
 8004032:	f7fc fdb9 	bl	8000ba8 <__aeabi_fmul>
 8004036:	4603      	mov	r3, r0
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc ffb7 	bl	8000fac <__aeabi_f2uiz>
 800403e:	4603      	mov	r3, r0
 8004040:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8004042:	4952      	ldr	r1, [pc, #328]	; (800418c <dmp_set_tap_thresh+0x24c>)
 8004044:	6938      	ldr	r0, [r7, #16]
 8004046:	f7fc fdaf 	bl	8000ba8 <__aeabi_fmul>
 800404a:	4603      	mov	r3, r0
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc ffad 	bl	8000fac <__aeabi_f2uiz>
 8004052:	4603      	mov	r3, r0
 8004054:	82bb      	strh	r3, [r7, #20]
        break;
 8004056:	e018      	b.n	800408a <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004058:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800405c:	6938      	ldr	r0, [r7, #16]
 800405e:	f7fc fda3 	bl	8000ba8 <__aeabi_fmul>
 8004062:	4603      	mov	r3, r0
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc ffa1 	bl	8000fac <__aeabi_f2uiz>
 800406a:	4603      	mov	r3, r0
 800406c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800406e:	4948      	ldr	r1, [pc, #288]	; (8004190 <dmp_set_tap_thresh+0x250>)
 8004070:	6938      	ldr	r0, [r7, #16]
 8004072:	f7fc fd99 	bl	8000ba8 <__aeabi_fmul>
 8004076:	4603      	mov	r3, r0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc ff97 	bl	8000fac <__aeabi_f2uiz>
 800407e:	4603      	mov	r3, r0
 8004080:	82bb      	strh	r3, [r7, #20]
        break;
 8004082:	e002      	b.n	800408a <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	e076      	b.n	8004178 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	b29b      	uxth	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004094:	8afb      	ldrh	r3, [r7, #22]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800409a:	8abb      	ldrh	r3, [r7, #20]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	b29b      	uxth	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80040a4:	8abb      	ldrh	r3, [r7, #20]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01c      	beq.n	80040ee <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80040b4:	f107 030c 	add.w	r3, r7, #12
 80040b8:	461a      	mov	r2, r3
 80040ba:	2102      	movs	r1, #2
 80040bc:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80040c0:	f7ff fba0 	bl	8003804 <mpu_write_mem>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <dmp_set_tap_thresh+0x190>
            return -1;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	e053      	b.n	8004178 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	3302      	adds	r3, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	2102      	movs	r1, #2
 80040da:	f44f 7092 	mov.w	r0, #292	; 0x124
 80040de:	f7ff fb91 	bl	8003804 <mpu_write_mem>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <dmp_set_tap_thresh+0x1ae>
            return -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e044      	b.n	8004178 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01c      	beq.n	8004132 <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	461a      	mov	r2, r3
 80040fe:	2102      	movs	r1, #2
 8004100:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004104:	f7ff fb7e 	bl	8003804 <mpu_write_mem>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <dmp_set_tap_thresh+0x1d4>
            return -1;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	e031      	b.n	8004178 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	3302      	adds	r3, #2
 800411a:	461a      	mov	r2, r3
 800411c:	2102      	movs	r1, #2
 800411e:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004122:	f7ff fb6f 	bl	8003804 <mpu_write_mem>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <dmp_set_tap_thresh+0x1f2>
            return -1;
 800412c:	f04f 33ff 	mov.w	r3, #4294967295
 8004130:	e022      	b.n	8004178 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01c      	beq.n	8004176 <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	461a      	mov	r2, r3
 8004142:	2102      	movs	r1, #2
 8004144:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8004148:	f7ff fb5c 	bl	8003804 <mpu_write_mem>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <dmp_set_tap_thresh+0x218>
            return -1;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	e00f      	b.n	8004178 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	3302      	adds	r3, #2
 800415e:	461a      	mov	r2, r3
 8004160:	2102      	movs	r1, #2
 8004162:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004166:	f7ff fb4d 	bl	8003804 <mpu_write_mem>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <dmp_set_tap_thresh+0x236>
            return -1;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
 8004174:	e000      	b.n	8004178 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	43480000 	.word	0x43480000
 8004184:	46400000 	.word	0x46400000
 8004188:	45c00000 	.word	0x45c00000
 800418c:	45400000 	.word	0x45400000
 8004190:	44c00000 	.word	0x44c00000

08004194 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	f043 030c 	orr.w	r3, r3, #12
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	f043 0303 	orr.w	r3, r3, #3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80041de:	f107 030f 	add.w	r3, r7, #15
 80041e2:	461a      	mov	r2, r3
 80041e4:	2101      	movs	r1, #1
 80041e6:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80041ea:	f7ff fb0b 	bl	8003804 <mpu_write_mem>
 80041ee:	4603      	mov	r3, r0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <dmp_set_tap_count+0x16>
        min_taps = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	71fb      	strb	r3, [r7, #7]
 800420c:	e004      	b.n	8004218 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d901      	bls.n	8004218 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8004214:	2304      	movs	r3, #4
 8004216:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	3b01      	subs	r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004220:	f107 030f 	add.w	r3, r7, #15
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	f240 104f 	movw	r0, #335	; 0x14f
 800422c:	f7ff faea 	bl	8003804 <mpu_write_mem>
 8004230:	4603      	mov	r3, r0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <dmp_set_tap_time+0x40>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29b      	uxth	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	461a      	mov	r2, r3
 8004268:	2102      	movs	r1, #2
 800426a:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800426e:	f7ff fac9 	bl	8003804 <mpu_write_mem>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	cccccccd 	.word	0xcccccccd

08004280 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <dmp_set_tap_time_multi+0x40>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004296:	89fb      	ldrh	r3, [r7, #14]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	b29b      	uxth	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80042a0:	89fb      	ldrh	r3, [r7, #14]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80042a6:	f107 030c 	add.w	r3, r7, #12
 80042aa:	461a      	mov	r2, r3
 80042ac:	2102      	movs	r1, #2
 80042ae:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80042b2:	f7ff faa7 	bl	8003804 <mpu_write_mem>
 80042b6:	4603      	mov	r3, r0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	cccccccd 	.word	0xcccccccd

080042c4 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <dmp_set_shake_reject_thresh+0x5c>)
 80042d4:	fb82 1203 	smull	r1, r2, r2, r3
 80042d8:	1192      	asrs	r2, r2, #6
 80042da:	17db      	asrs	r3, r3, #31
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	161b      	asrs	r3, r3, #24
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	141b      	asrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	121b      	asrs	r3, r3, #8
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	461a      	mov	r2, r3
 800430a:	2104      	movs	r1, #4
 800430c:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004310:	f7ff fa78 	bl	8003804 <mpu_write_mem>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <dmp_set_shake_reject_time+0x40>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	b29b      	uxth	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800434a:	f107 030c 	add.w	r3, r7, #12
 800434e:	461a      	mov	r2, r3
 8004350:	2102      	movs	r1, #2
 8004352:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8004356:	f7ff fa55 	bl	8003804 <mpu_write_mem>
 800435a:	4603      	mov	r3, r0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	cccccccd 	.word	0xcccccccd

08004368 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <dmp_set_shake_reject_timeout+0x40>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	b29b      	uxth	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800438e:	f107 030c 	add.w	r3, r7, #12
 8004392:	461a      	mov	r2, r3
 8004394:	2102      	movs	r1, #2
 8004396:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800439a:	f7ff fa33 	bl	8003804 <mpu_write_mem>
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	cccccccd 	.word	0xcccccccd

080043ac <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80043b6:	2302      	movs	r3, #2
 80043b8:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80043ba:	23ca      	movs	r3, #202	; 0xca
 80043bc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80043be:	23e3      	movs	r3, #227	; 0xe3
 80043c0:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80043c2:	2309      	movs	r3, #9
 80043c4:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80043c6:	f107 030c 	add.w	r3, r7, #12
 80043ca:	461a      	mov	r2, r3
 80043cc:	2104      	movs	r1, #4
 80043ce:	2068      	movs	r0, #104	; 0x68
 80043d0:	f7ff fa18 	bl	8003804 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80043d4:	23a3      	movs	r3, #163	; 0xa3
 80043d6:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80043e2:	23c0      	movs	r3, #192	; 0xc0
 80043e4:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80043e6:	23c8      	movs	r3, #200	; 0xc8
 80043e8:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80043ea:	23c2      	movs	r3, #194	; 0xc2
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e005      	b.n	80043fc <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80043f0:	23a3      	movs	r3, #163	; 0xa3
 80043f2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80043f4:	23a3      	movs	r3, #163	; 0xa3
 80043f6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80043f8:	23a3      	movs	r3, #163	; 0xa3
 80043fa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8004406:	23c4      	movs	r3, #196	; 0xc4
 8004408:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800440a:	23cc      	movs	r3, #204	; 0xcc
 800440c:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800440e:	23c6      	movs	r3, #198	; 0xc6
 8004410:	74bb      	strb	r3, [r7, #18]
 8004412:	e005      	b.n	8004420 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004414:	23a3      	movs	r3, #163	; 0xa3
 8004416:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8004418:	23a3      	movs	r3, #163	; 0xa3
 800441a:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800441c:	23a3      	movs	r3, #163	; 0xa3
 800441e:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8004420:	23a3      	movs	r3, #163	; 0xa3
 8004422:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004424:	23a3      	movs	r3, #163	; 0xa3
 8004426:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8004428:	23a3      	movs	r3, #163	; 0xa3
 800442a:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	461a      	mov	r2, r3
 8004432:	210a      	movs	r1, #10
 8004434:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8004438:	f7ff f9e4 	bl	8003804 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8004446:	2320      	movs	r3, #32
 8004448:	733b      	strb	r3, [r7, #12]
 800444a:	e001      	b.n	8004450 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800444c:	23d8      	movs	r3, #216	; 0xd8
 800444e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	461a      	mov	r2, r3
 8004456:	2101      	movs	r1, #1
 8004458:	f640 20b6 	movw	r0, #2742	; 0xab6
 800445c:	f7ff f9d2 	bl	8003804 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800446a:	2001      	movs	r0, #1
 800446c:	f000 f8c6 	bl	80045fc <dmp_enable_gyro_cal>
 8004470:	e002      	b.n	8004478 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004472:	2000      	movs	r0, #0
 8004474:	f000 f8c2 	bl	80045fc <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01d      	beq.n	80044be <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800448c:	23b2      	movs	r3, #178	; 0xb2
 800448e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004490:	238b      	movs	r3, #139	; 0x8b
 8004492:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004494:	23b6      	movs	r3, #182	; 0xb6
 8004496:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004498:	239b      	movs	r3, #155	; 0x9b
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e007      	b.n	80044ae <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800449e:	23b0      	movs	r3, #176	; 0xb0
 80044a0:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80044a6:	23b4      	movs	r3, #180	; 0xb4
 80044a8:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80044aa:	2390      	movs	r3, #144	; 0x90
 80044ac:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80044ae:	f107 030c 	add.w	r3, r7, #12
 80044b2:	461a      	mov	r2, r3
 80044b4:	2104      	movs	r1, #4
 80044b6:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80044ba:	f7ff f9a3 	bl	8003804 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d025      	beq.n	8004514 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80044c8:	23f8      	movs	r3, #248	; 0xf8
 80044ca:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	461a      	mov	r2, r3
 80044d2:	2101      	movs	r1, #1
 80044d4:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80044d8:	f7ff f994 	bl	8003804 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80044dc:	21fa      	movs	r1, #250	; 0xfa
 80044de:	2007      	movs	r0, #7
 80044e0:	f7ff fd2e 	bl	8003f40 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80044e4:	2007      	movs	r0, #7
 80044e6:	f7ff fe55 	bl	8004194 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7ff fe84 	bl	80041f8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80044f0:	2064      	movs	r0, #100	; 0x64
 80044f2:	f7ff fea3 	bl	800423c <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80044f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044fa:	f7ff fec1 	bl	8004280 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80044fe:	21c8      	movs	r1, #200	; 0xc8
 8004500:	483c      	ldr	r0, [pc, #240]	; (80045f4 <dmp_enable_feature+0x248>)
 8004502:	f7ff fedf 	bl	80042c4 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004506:	2028      	movs	r0, #40	; 0x28
 8004508:	f7ff ff0c 	bl	8004324 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800450c:	200a      	movs	r0, #10
 800450e:	f7ff ff2b 	bl	8004368 <dmp_set_shake_reject_timeout>
 8004512:	e009      	b.n	8004528 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004514:	23d8      	movs	r3, #216	; 0xd8
 8004516:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	461a      	mov	r2, r3
 800451e:	2101      	movs	r1, #1
 8004520:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004524:	f7ff f96e 	bl	8003804 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8004532:	23d9      	movs	r3, #217	; 0xd9
 8004534:	733b      	strb	r3, [r7, #12]
 8004536:	e001      	b.n	800453c <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8004538:	23d8      	movs	r3, #216	; 0xd8
 800453a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	461a      	mov	r2, r3
 8004542:	2101      	movs	r1, #1
 8004544:	f240 703d 	movw	r0, #1853	; 0x73d
 8004548:	f7ff f95c 	bl	8003804 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004556:	2001      	movs	r0, #1
 8004558:	f000 f880 	bl	800465c <dmp_enable_lp_quat>
 800455c:	e002      	b.n	8004564 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 f87c 	bl	800465c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800456e:	2001      	movs	r0, #1
 8004570:	f000 f89b 	bl	80046aa <dmp_enable_6x_lp_quat>
 8004574:	e002      	b.n	800457c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004576:	2000      	movs	r0, #0
 8004578:	f000 f897 	bl	80046aa <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	b29a      	uxth	r2, r3
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <dmp_enable_feature+0x24c>)
 8004586:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004588:	f7fe fb18 	bl	8002bbc <mpu_reset_fifo>

    dmp.packet_length = 0;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <dmp_enable_feature+0x24c>)
 800458e:	2200      	movs	r2, #0
 8004590:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800459c:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <dmp_enable_feature+0x24c>)
 800459e:	7b9b      	ldrb	r3, [r3, #14]
 80045a0:	3306      	adds	r3, #6
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045a6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045b4:	7b9b      	ldrb	r3, [r3, #14]
 80045b6:	3306      	adds	r3, #6
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045bc:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	f003 0314 	and.w	r3, r3, #20
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045ca:	7b9b      	ldrb	r3, [r3, #14]
 80045cc:	3310      	adds	r3, #16
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045d2:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045e0:	7b9b      	ldrb	r3, [r3, #14]
 80045e2:	3304      	adds	r3, #4
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <dmp_enable_feature+0x24c>)
 80045e8:	739a      	strb	r2, [r3, #14]

    return 0;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	02cae309 	.word	0x02cae309
 80045f8:	200001b4 	.word	0x200001b4

080045fc <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00f      	beq.n	800462c <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <dmp_enable_gyro_cal+0x58>)
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	ca07      	ldmia	r2, {r0, r1, r2}
 8004614:	c303      	stmia	r3!, {r0, r1}
 8004616:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	461a      	mov	r2, r3
 800461e:	2109      	movs	r1, #9
 8004620:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004624:	f7ff f8ee 	bl	8003804 <mpu_write_mem>
 8004628:	4603      	mov	r3, r0
 800462a:	e00e      	b.n	800464a <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <dmp_enable_gyro_cal+0x5c>)
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	ca07      	ldmia	r2, {r0, r1, r2}
 8004634:	c303      	stmia	r3!, {r0, r1}
 8004636:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	461a      	mov	r2, r3
 800463e:	2109      	movs	r1, #9
 8004640:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004644:	f7ff f8de 	bl	8003804 <mpu_write_mem>
 8004648:	4603      	mov	r3, r0
    }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	08008268 	.word	0x08008268
 8004658:	08008274 	.word	0x08008274

0800465c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800466c:	23c0      	movs	r3, #192	; 0xc0
 800466e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004670:	23c2      	movs	r3, #194	; 0xc2
 8004672:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004674:	23c4      	movs	r3, #196	; 0xc4
 8004676:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004678:	23c6      	movs	r3, #198	; 0xc6
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e006      	b.n	800468c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800467e:	f107 030c 	add.w	r3, r7, #12
 8004682:	2204      	movs	r2, #4
 8004684:	218b      	movs	r1, #139	; 0x8b
 8004686:	4618      	mov	r0, r3
 8004688:	f002 fee4 	bl	8007454 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	461a      	mov	r2, r3
 8004692:	2104      	movs	r1, #4
 8004694:	f640 2098 	movw	r0, #2712	; 0xa98
 8004698:	f7ff f8b4 	bl	8003804 <mpu_write_mem>

    return mpu_reset_fifo();
 800469c:	f7fe fa8e 	bl	8002bbc <mpu_reset_fifo>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 80046ba:	2320      	movs	r3, #32
 80046bc:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 80046be:	2328      	movs	r3, #40	; 0x28
 80046c0:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 80046c2:	2330      	movs	r3, #48	; 0x30
 80046c4:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 80046c6:	2338      	movs	r3, #56	; 0x38
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	e006      	b.n	80046da <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	2204      	movs	r2, #4
 80046d2:	21a3      	movs	r1, #163	; 0xa3
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 febd 	bl	8007454 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	461a      	mov	r2, r3
 80046e0:	2104      	movs	r1, #4
 80046e2:	f640 209e 	movw	r0, #2718	; 0xa9e
 80046e6:	f7ff f88d 	bl	8003804 <mpu_write_mem>

    return mpu_reset_fifo();
 80046ea:	f7fe fa67 	bl	8002bbc <mpu_reset_fifo>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3303      	adds	r3, #3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800470a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3303      	adds	r3, #3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004716:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3301      	adds	r3, #1
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d012      	beq.n	800474c <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8004726:	7bbb      	ldrb	r3, [r7, #14]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3301      	adds	r3, #1
 8004736:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <decode_gesture+0x84>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <decode_gesture+0x84>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	7b39      	ldrb	r1, [r7, #12]
 8004746:	7b7a      	ldrb	r2, [r7, #13]
 8004748:	4610      	mov	r0, r2
 800474a:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3301      	adds	r3, #1
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <decode_gesture+0x84>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <decode_gesture+0x84>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	0992      	lsrs	r2, r2, #6
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
    }

    return 0;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200001b4 	.word	0x200001b4

08004780 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b092      	sub	sp, #72	; 0x48
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8004794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004796:	2200      	movs	r2, #0
 8004798:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800479a:	4bb5      	ldr	r3, [pc, #724]	; (8004a70 <dmp_read_fifo+0x2f0>)
 800479c:	7b9b      	ldrb	r3, [r3, #14]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f107 0120 	add.w	r1, r7, #32
 80047a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fea4 	bl	80034f4 <mpu_read_fifo_stream>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <dmp_read_fifo+0x38>
        return -1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e156      	b.n	8004a66 <dmp_read_fifo+0x2e6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 80047b8:	4bad      	ldr	r3, [pc, #692]	; (8004a70 <dmp_read_fifo+0x2f0>)
 80047ba:	895b      	ldrh	r3, [r3, #10]
 80047bc:	f003 0314 	and.w	r3, r3, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 808a 	beq.w	80048da <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80047c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047ca:	061a      	lsls	r2, r3, #24
 80047cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80047d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80047d8:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80047da:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80047dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80047e0:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047ea:	061a      	lsls	r2, r3, #24
 80047ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80047f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047f8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047fa:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80047fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004800:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004806:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004808:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800480a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800480e:	061a      	lsls	r2, r3, #24
 8004810:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004818:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800481c:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800481e:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004824:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800482a:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800482c:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800482e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004832:	061a      	lsls	r2, r3, #24
 8004834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800483c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004840:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004842:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004848:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800484e:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004850:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004852:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004856:	3310      	adds	r3, #16
 8004858:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	141b      	asrs	r3, r3, #16
 8004862:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	141b      	asrs	r3, r3, #16
 800486c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3308      	adds	r3, #8
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	141b      	asrs	r3, r3, #16
 8004876:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	330c      	adds	r3, #12
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	141b      	asrs	r3, r3, #16
 8004880:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	fb02 f203 	mul.w	r2, r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6979      	ldr	r1, [r7, #20]
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	69b9      	ldr	r1, [r7, #24]
 8004898:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800489c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	69f9      	ldr	r1, [r7, #28]
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80048a6:	4413      	add	r3, r2
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80048aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80048b0:	db03      	blt.n	80048ba <dmp_read_fifo+0x13a>
 80048b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b4:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 80048b8:	dd07      	ble.n	80048ca <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 80048ba:	f7fe f97f 	bl	8002bbc <mpu_reset_fifo>
            sensors[0] = 0;
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]
            return -1;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e0cd      	b.n	8004a66 <dmp_read_fifo+0x2e6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80048ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	b21a      	sxth	r2, r3
 80048d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d8:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80048da:	4b65      	ldr	r3, [pc, #404]	; (8004a70 <dmp_read_fifo+0x2f0>)
 80048dc:	895b      	ldrh	r3, [r3, #10]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d052      	beq.n	800498c <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80048e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ee:	4413      	add	r3, r2
 80048f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	b21a      	sxth	r2, r3
 80048f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048fc:	3301      	adds	r3, #1
 80048fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004902:	440b      	add	r3, r1
 8004904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004908:	b21b      	sxth	r3, r3
 800490a:	4313      	orrs	r3, r2
 800490c:	b21a      	sxth	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004916:	3302      	adds	r3, #2
 8004918:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800491c:	4413      	add	r3, r2
 800491e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	b219      	sxth	r1, r3
 8004926:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800492a:	3303      	adds	r3, #3
 800492c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004930:	4413      	add	r3, r2
 8004932:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004936:	b21a      	sxth	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3302      	adds	r3, #2
 800493c:	430a      	orrs	r2, r1
 800493e:	b212      	sxth	r2, r2
 8004940:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004942:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004946:	3304      	adds	r3, #4
 8004948:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800494c:	4413      	add	r3, r2
 800494e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	b219      	sxth	r1, r3
 8004956:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800495a:	3305      	adds	r3, #5
 800495c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004960:	4413      	add	r3, r2
 8004962:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004966:	b21a      	sxth	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3304      	adds	r3, #4
 800496c:	430a      	orrs	r2, r1
 800496e:	b212      	sxth	r2, r2
 8004970:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004976:	3306      	adds	r3, #6
 8004978:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800497c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004982:	f043 0308 	orr.w	r3, r3, #8
 8004986:	b21a      	sxth	r2, r3
 8004988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498a:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800498c:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <dmp_read_fifo+0x2f0>)
 800498e:	895b      	ldrh	r3, [r3, #10]
 8004990:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004994:	2b00      	cmp	r3, #0
 8004996:	d052      	beq.n	8004a3e <dmp_read_fifo+0x2be>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800499c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049a0:	4413      	add	r3, r2
 80049a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	b21a      	sxth	r2, r3
 80049aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049ae:	3301      	adds	r3, #1
 80049b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80049b4:	440b      	add	r3, r1
 80049b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	b21a      	sxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80049c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049c8:	3302      	adds	r3, #2
 80049ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ce:	4413      	add	r3, r2
 80049d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	b219      	sxth	r1, r3
 80049d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049dc:	3303      	adds	r3, #3
 80049de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049e2:	4413      	add	r3, r2
 80049e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3302      	adds	r3, #2
 80049ee:	430a      	orrs	r2, r1
 80049f0:	b212      	sxth	r2, r2
 80049f2:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80049f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049f8:	3304      	adds	r3, #4
 80049fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049fe:	4413      	add	r3, r2
 8004a00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	b219      	sxth	r1, r3
 8004a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a0c:	3305      	adds	r3, #5
 8004a0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a12:	4413      	add	r3, r2
 8004a14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	b212      	sxth	r2, r2
 8004a22:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a28:	3306      	adds	r3, #6
 8004a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a34:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004a38:	b21a      	sxth	r2, r3
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <dmp_read_fifo+0x2f0>)
 8004a40:	895b      	ldrh	r3, [r3, #10]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 8004a4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a4e:	f107 0220 	add.w	r2, r7, #32
 8004a52:	4413      	add	r3, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fe4f 	bl	80046f8 <decode_gesture>

    get_ms(timestamp);
 8004a5a:	f000 f889 	bl	8004b70 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	601a      	str	r2, [r3, #0]
    return 0;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3748      	adds	r7, #72	; 0x48
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200001b4 	.word	0x200001b4

08004a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a74:	480c      	ldr	r0, [pc, #48]	; (8004aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a78:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a7c:	e002      	b.n	8004a84 <LoopCopyDataInit>

08004a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a82:	3304      	adds	r3, #4

08004a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a88:	d3f9      	bcc.n	8004a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a8c:	4c0a      	ldr	r4, [pc, #40]	; (8004ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a90:	e001      	b.n	8004a96 <LoopFillZerobss>

08004a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a94:	3204      	adds	r2, #4

08004a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a98:	d3fb      	bcc.n	8004a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a9a:	f7fd f89f 	bl	8001bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a9e:	f002 fca7 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004aa2:	f7fc fabd 	bl	8001020 <main>
  bx lr
 8004aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8004aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aac:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004ab0:	08008fc8 	.word	0x08008fc8
  ldr r2, =_sbss
 8004ab4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004ab8:	200001e0 	.word	0x200001e0

08004abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004abc:	e7fe      	b.n	8004abc <ADC1_2_IRQHandler>
	...

08004ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_Init+0x28>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_Init+0x28>)
 8004aca:	f043 0310 	orr.w	r3, r3, #16
 8004ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad0:	2003      	movs	r0, #3
 8004ad2:	f000 fb59 	bl	8005188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad6:	200f      	movs	r0, #15
 8004ad8:	f000 f808 	bl	8004aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004adc:	f7fc fefa 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40022000 	.word	0x40022000

08004aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_InitTick+0x54>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_InitTick+0x58>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb63 	bl	80051d6 <HAL_SYSTICK_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00e      	b.n	8004b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b0f      	cmp	r3, #15
 8004b1e:	d80a      	bhi.n	8004b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b20:	2200      	movs	r2, #0
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	f000 fb39 	bl	800519e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b2c:	4a06      	ldr	r2, [pc, #24]	; (8004b48 <HAL_InitTick+0x5c>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000000 	.word	0x20000000
 8004b44:	20000048 	.word	0x20000048
 8004b48:	20000044 	.word	0x20000044

08004b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_IncTick+0x1c>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_IncTick+0x20>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4a03      	ldr	r2, [pc, #12]	; (8004b6c <HAL_IncTick+0x20>)
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	20000048 	.word	0x20000048
 8004b6c:	200001cc 	.word	0x200001cc

08004b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <HAL_GetTick+0x10>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	200001cc 	.word	0x200001cc

08004b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d005      	beq.n	8004baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_Delay+0x44>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004baa:	bf00      	nop
 8004bac:	f7ff ffe0 	bl	8004b70 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d8f7      	bhi.n	8004bac <HAL_Delay+0x28>
  {
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000048 	.word	0x20000048

08004bcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e0ed      	b.n	8004dba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fea4 	bl	8001938 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c00:	f7ff ffb6 	bl	8004b70 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c06:	e012      	b.n	8004c2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c08:	f7ff ffb2 	bl	8004b70 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b0a      	cmp	r3, #10
 8004c14:	d90b      	bls.n	8004c2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2205      	movs	r2, #5
 8004c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0c5      	b.n	8004dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0e5      	beq.n	8004c08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0202 	bic.w	r2, r2, #2
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c4c:	f7ff ff90 	bl	8004b70 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c52:	e012      	b.n	8004c7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c54:	f7ff ff8c 	bl	8004b70 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b0a      	cmp	r3, #10
 8004c60:	d90b      	bls.n	8004c7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2205      	movs	r2, #5
 8004c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e09f      	b.n	8004dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	7e1b      	ldrb	r3, [r3, #24]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d108      	bne.n	8004ca2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7e5b      	ldrb	r3, [r3, #25]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d108      	bne.n	8004ccc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e007      	b.n	8004cdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	7e9b      	ldrb	r3, [r3, #26]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d108      	bne.n	8004cf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e007      	b.n	8004d06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0220 	bic.w	r2, r2, #32
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7edb      	ldrb	r3, [r3, #27]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0210 	bic.w	r2, r2, #16
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e007      	b.n	8004d30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0210 	orr.w	r2, r2, #16
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7f1b      	ldrb	r3, [r3, #28]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d108      	bne.n	8004d4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e007      	b.n	8004d5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0208 	bic.w	r2, r2, #8
 8004d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7f5b      	ldrb	r3, [r3, #29]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d108      	bne.n	8004d74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0204 	orr.w	r2, r2, #4
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e007      	b.n	8004d84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0204 	bic.w	r2, r2, #4
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	1e5a      	subs	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b087      	sub	sp, #28
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d003      	beq.n	8004de8 <HAL_CAN_ConfigFilter+0x26>
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	f040 80aa 	bne.w	8004f3c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2201      	movs	r2, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d123      	bne.n	8004e6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	3248      	adds	r2, #72	; 0x48
 8004e4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	3348      	adds	r3, #72	; 0x48
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	440b      	add	r3, r1
 8004e68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d122      	bne.n	8004eb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3248      	adds	r2, #72	; 0x48
 8004e98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	3348      	adds	r3, #72	; 0x48
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ed2:	e007      	b.n	8004ee4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004efe:	e007      	b.n	8004f10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e006      	b.n	8004f4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d12e      	bne.n	8004fc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f80:	f7ff fdf6 	bl	8004b70 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f86:	e012      	b.n	8004fae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f88:	f7ff fdf2 	bl	8004b70 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b0a      	cmp	r3, #10
 8004f94:	d90b      	bls.n	8004fae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2205      	movs	r2, #5
 8004fa6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e012      	b.n	8004fd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e006      	b.n	8004fd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <HAL_CAN_ActivateNotification+0x1e>
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d109      	bne.n	800500e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6959      	ldr	r1, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	e006      	b.n	800501c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
	...

08005028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800505a:	4a04      	ldr	r2, [pc, #16]	; (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	60d3      	str	r3, [r2, #12]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <__NVIC_GetPriorityGrouping+0x18>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	f003 0307 	and.w	r3, r3, #7
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	; (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	bf28      	it	cs
 80050fe:	2304      	movcs	r3, #4
 8005100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	2b06      	cmp	r3, #6
 8005108:	d902      	bls.n	8005110 <NVIC_EncodePriority+0x30>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3b03      	subs	r3, #3
 800510e:	e000      	b.n	8005112 <NVIC_EncodePriority+0x32>
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005114:	f04f 32ff 	mov.w	r2, #4294967295
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	401a      	ands	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005128:	f04f 31ff 	mov.w	r1, #4294967295
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43d9      	mvns	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005138:	4313      	orrs	r3, r2
         );
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	; 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005154:	d301      	bcc.n	800515a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005156:	2301      	movs	r3, #1
 8005158:	e00f      	b.n	800517a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <SysTick_Config+0x40>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005162:	210f      	movs	r1, #15
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f7ff ff90 	bl	800508c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SysTick_Config+0x40>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <SysTick_Config+0x40>)
 8005174:	2207      	movs	r2, #7
 8005176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	e000e010 	.word	0xe000e010

08005188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff49 	bl	8005028 <__NVIC_SetPriorityGrouping>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800519e:	b580      	push	{r7, lr}
 80051a0:	b086      	sub	sp, #24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051b0:	f7ff ff5e 	bl	8005070 <__NVIC_GetPriorityGrouping>
 80051b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff90 	bl	80050e0 <NVIC_EncodePriority>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ff5f 	bl	800508c <__NVIC_SetPriority>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ffb0 	bl	8005144 <SysTick_Config>
 80051e4:	4603      	mov	r3, r0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b08b      	sub	sp, #44	; 0x2c
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005202:	e169      	b.n	80054d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005204:	2201      	movs	r2, #1
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 8158 	bne.w	80054d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4a9a      	ldr	r2, [pc, #616]	; (8005490 <HAL_GPIO_Init+0x2a0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d05e      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
 800522c:	4a98      	ldr	r2, [pc, #608]	; (8005490 <HAL_GPIO_Init+0x2a0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d875      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 8005232:	4a98      	ldr	r2, [pc, #608]	; (8005494 <HAL_GPIO_Init+0x2a4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d058      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
 8005238:	4a96      	ldr	r2, [pc, #600]	; (8005494 <HAL_GPIO_Init+0x2a4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d86f      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 800523e:	4a96      	ldr	r2, [pc, #600]	; (8005498 <HAL_GPIO_Init+0x2a8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d052      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
 8005244:	4a94      	ldr	r2, [pc, #592]	; (8005498 <HAL_GPIO_Init+0x2a8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d869      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 800524a:	4a94      	ldr	r2, [pc, #592]	; (800549c <HAL_GPIO_Init+0x2ac>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d04c      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
 8005250:	4a92      	ldr	r2, [pc, #584]	; (800549c <HAL_GPIO_Init+0x2ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d863      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 8005256:	4a92      	ldr	r2, [pc, #584]	; (80054a0 <HAL_GPIO_Init+0x2b0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d046      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
 800525c:	4a90      	ldr	r2, [pc, #576]	; (80054a0 <HAL_GPIO_Init+0x2b0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d85d      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 8005262:	2b12      	cmp	r3, #18
 8005264:	d82a      	bhi.n	80052bc <HAL_GPIO_Init+0xcc>
 8005266:	2b12      	cmp	r3, #18
 8005268:	d859      	bhi.n	800531e <HAL_GPIO_Init+0x12e>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_GPIO_Init+0x80>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	080052eb 	.word	0x080052eb
 8005274:	080052c5 	.word	0x080052c5
 8005278:	080052d7 	.word	0x080052d7
 800527c:	08005319 	.word	0x08005319
 8005280:	0800531f 	.word	0x0800531f
 8005284:	0800531f 	.word	0x0800531f
 8005288:	0800531f 	.word	0x0800531f
 800528c:	0800531f 	.word	0x0800531f
 8005290:	0800531f 	.word	0x0800531f
 8005294:	0800531f 	.word	0x0800531f
 8005298:	0800531f 	.word	0x0800531f
 800529c:	0800531f 	.word	0x0800531f
 80052a0:	0800531f 	.word	0x0800531f
 80052a4:	0800531f 	.word	0x0800531f
 80052a8:	0800531f 	.word	0x0800531f
 80052ac:	0800531f 	.word	0x0800531f
 80052b0:	0800531f 	.word	0x0800531f
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	4a79      	ldr	r2, [pc, #484]	; (80054a4 <HAL_GPIO_Init+0x2b4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052c2:	e02c      	b.n	800531e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	623b      	str	r3, [r7, #32]
          break;
 80052ca:	e029      	b.n	8005320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	3304      	adds	r3, #4
 80052d2:	623b      	str	r3, [r7, #32]
          break;
 80052d4:	e024      	b.n	8005320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	3308      	adds	r3, #8
 80052dc:	623b      	str	r3, [r7, #32]
          break;
 80052de:	e01f      	b.n	8005320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	330c      	adds	r3, #12
 80052e6:	623b      	str	r3, [r7, #32]
          break;
 80052e8:	e01a      	b.n	8005320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80052f2:	2304      	movs	r3, #4
 80052f4:	623b      	str	r3, [r7, #32]
          break;
 80052f6:	e013      	b.n	8005320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005300:	2308      	movs	r3, #8
 8005302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	611a      	str	r2, [r3, #16]
          break;
 800530a:	e009      	b.n	8005320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800530c:	2308      	movs	r3, #8
 800530e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	615a      	str	r2, [r3, #20]
          break;
 8005316:	e003      	b.n	8005320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005318:	2300      	movs	r3, #0
 800531a:	623b      	str	r3, [r7, #32]
          break;
 800531c:	e000      	b.n	8005320 <HAL_GPIO_Init+0x130>
          break;
 800531e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2bff      	cmp	r3, #255	; 0xff
 8005324:	d801      	bhi.n	800532a <HAL_GPIO_Init+0x13a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	e001      	b.n	800532e <HAL_GPIO_Init+0x13e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2bff      	cmp	r3, #255	; 0xff
 8005334:	d802      	bhi.n	800533c <HAL_GPIO_Init+0x14c>
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	e002      	b.n	8005342 <HAL_GPIO_Init+0x152>
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	3b08      	subs	r3, #8
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	210f      	movs	r1, #15
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	6a39      	ldr	r1, [r7, #32]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80b1 	beq.w	80054d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005370:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <HAL_GPIO_Init+0x2b8>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4a4c      	ldr	r2, [pc, #304]	; (80054a8 <HAL_GPIO_Init+0x2b8>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6193      	str	r3, [r2, #24]
 800537c:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_GPIO_Init+0x2b8>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005388:	4a48      	ldr	r2, [pc, #288]	; (80054ac <HAL_GPIO_Init+0x2bc>)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	089b      	lsrs	r3, r3, #2
 800538e:	3302      	adds	r3, #2
 8005390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	220f      	movs	r2, #15
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <HAL_GPIO_Init+0x2c0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <HAL_GPIO_Init+0x1ec>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <HAL_GPIO_Init+0x2c4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00d      	beq.n	80053d8 <HAL_GPIO_Init+0x1e8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3e      	ldr	r2, [pc, #248]	; (80054b8 <HAL_GPIO_Init+0x2c8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <HAL_GPIO_Init+0x1e4>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <HAL_GPIO_Init+0x2cc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_GPIO_Init+0x1e0>
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <HAL_GPIO_Init+0x1ee>
 80053d0:	2304      	movs	r3, #4
 80053d2:	e004      	b.n	80053de <HAL_GPIO_Init+0x1ee>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e002      	b.n	80053de <HAL_GPIO_Init+0x1ee>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_GPIO_Init+0x1ee>
 80053dc:	2300      	movs	r3, #0
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	f002 0203 	and.w	r2, r2, #3
 80053e4:	0092      	lsls	r2, r2, #2
 80053e6:	4093      	lsls	r3, r2
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80053ee:	492f      	ldr	r1, [pc, #188]	; (80054ac <HAL_GPIO_Init+0x2bc>)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	3302      	adds	r3, #2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005408:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	492c      	ldr	r1, [pc, #176]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	e006      	b.n	8005424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005416:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	43db      	mvns	r3, r3
 800541e:	4928      	ldr	r1, [pc, #160]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005420:	4013      	ands	r3, r2
 8005422:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005430:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4922      	ldr	r1, [pc, #136]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4313      	orrs	r3, r2
 800543a:	604b      	str	r3, [r1, #4]
 800543c:	e006      	b.n	800544c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	43db      	mvns	r3, r3
 8005446:	491e      	ldr	r1, [pc, #120]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005448:	4013      	ands	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	4918      	ldr	r1, [pc, #96]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]
 8005464:	e006      	b.n	8005474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	43db      	mvns	r3, r3
 800546e:	4914      	ldr	r1, [pc, #80]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005470:	4013      	ands	r3, r2
 8005472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d021      	beq.n	80054c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	490e      	ldr	r1, [pc, #56]	; (80054c0 <HAL_GPIO_Init+0x2d0>)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	60cb      	str	r3, [r1, #12]
 800548c:	e021      	b.n	80054d2 <HAL_GPIO_Init+0x2e2>
 800548e:	bf00      	nop
 8005490:	10320000 	.word	0x10320000
 8005494:	10310000 	.word	0x10310000
 8005498:	10220000 	.word	0x10220000
 800549c:	10210000 	.word	0x10210000
 80054a0:	10120000 	.word	0x10120000
 80054a4:	10110000 	.word	0x10110000
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010800 	.word	0x40010800
 80054b4:	40010c00 	.word	0x40010c00
 80054b8:	40011000 	.word	0x40011000
 80054bc:	40011400 	.word	0x40011400
 80054c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_GPIO_Init+0x304>)
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	4909      	ldr	r1, [pc, #36]	; (80054f4 <HAL_GPIO_Init+0x304>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	3301      	adds	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f47f ae8e 	bne.w	8005204 <HAL_GPIO_Init+0x14>
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	40010400 	.word	0x40010400

080054f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
 8005504:	4613      	mov	r3, r2
 8005506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005508:	787b      	ldrb	r3, [r7, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005514:	e003      	b.n	800551e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005516:	887b      	ldrh	r3, [r7, #2]
 8005518:	041a      	lsls	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e12b      	b.n	8005792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc fa3e 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	; 0x24
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800557a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800558a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800558c:	f001 fba0 	bl	8006cd0 <HAL_RCC_GetPCLK1Freq>
 8005590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a81      	ldr	r2, [pc, #516]	; (800579c <HAL_I2C_Init+0x274>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d807      	bhi.n	80055ac <HAL_I2C_Init+0x84>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a80      	ldr	r2, [pc, #512]	; (80057a0 <HAL_I2C_Init+0x278>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	bf94      	ite	ls
 80055a4:	2301      	movls	r3, #1
 80055a6:	2300      	movhi	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e006      	b.n	80055ba <HAL_I2C_Init+0x92>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a7d      	ldr	r2, [pc, #500]	; (80057a4 <HAL_I2C_Init+0x27c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf94      	ite	ls
 80055b4:	2301      	movls	r3, #1
 80055b6:	2300      	movhi	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0e7      	b.n	8005792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a78      	ldr	r2, [pc, #480]	; (80057a8 <HAL_I2C_Init+0x280>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0c9b      	lsrs	r3, r3, #18
 80055cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_I2C_Init+0x274>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d802      	bhi.n	80055fc <HAL_I2C_Init+0xd4>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	e009      	b.n	8005610 <HAL_I2C_Init+0xe8>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	4a69      	ldr	r2, [pc, #420]	; (80057ac <HAL_I2C_Init+0x284>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	3301      	adds	r3, #1
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	495c      	ldr	r1, [pc, #368]	; (800579c <HAL_I2C_Init+0x274>)
 800562c:	428b      	cmp	r3, r1
 800562e:	d819      	bhi.n	8005664 <HAL_I2C_Init+0x13c>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1e59      	subs	r1, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	fbb1 f3f3 	udiv	r3, r1, r3
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005644:	400b      	ands	r3, r1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_I2C_Init+0x138>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1e59      	subs	r1, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fbb1 f3f3 	udiv	r3, r1, r3
 8005658:	3301      	adds	r3, #1
 800565a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565e:	e051      	b.n	8005704 <HAL_I2C_Init+0x1dc>
 8005660:	2304      	movs	r3, #4
 8005662:	e04f      	b.n	8005704 <HAL_I2C_Init+0x1dc>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d111      	bne.n	8005690 <HAL_I2C_Init+0x168>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1e58      	subs	r0, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	440b      	add	r3, r1
 800567a:	fbb0 f3f3 	udiv	r3, r0, r3
 800567e:	3301      	adds	r3, #1
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e012      	b.n	80056b6 <HAL_I2C_Init+0x18e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1e58      	subs	r0, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	0099      	lsls	r1, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a6:	3301      	adds	r3, #1
 80056a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_Init+0x196>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e022      	b.n	8005704 <HAL_I2C_Init+0x1dc>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10e      	bne.n	80056e4 <HAL_I2C_Init+0x1bc>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1e58      	subs	r0, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	440b      	add	r3, r1
 80056d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d8:	3301      	adds	r3, #1
 80056da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e2:	e00f      	b.n	8005704 <HAL_I2C_Init+0x1dc>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1e58      	subs	r0, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	0099      	lsls	r1, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	6809      	ldr	r1, [r1, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6911      	ldr	r1, [r2, #16]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68d2      	ldr	r2, [r2, #12]
 800573e:	4311      	orrs	r1, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	430b      	orrs	r3, r1
 8005746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	000186a0 	.word	0x000186a0
 80057a0:	001e847f 	.word	0x001e847f
 80057a4:	003d08ff 	.word	0x003d08ff
 80057a8:	431bde83 	.word	0x431bde83
 80057ac:	10624dd3 	.word	0x10624dd3

080057b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	4608      	mov	r0, r1
 80057ba:	4611      	mov	r1, r2
 80057bc:	461a      	mov	r2, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	817b      	strh	r3, [r7, #10]
 80057c2:	460b      	mov	r3, r1
 80057c4:	813b      	strh	r3, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057ca:	f7ff f9d1 	bl	8004b70 <HAL_GetTick>
 80057ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b20      	cmp	r3, #32
 80057da:	f040 80d9 	bne.w	8005990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2319      	movs	r3, #25
 80057e4:	2201      	movs	r2, #1
 80057e6:	496d      	ldr	r1, [pc, #436]	; (800599c <HAL_I2C_Mem_Write+0x1ec>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fcc1 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
 80057f6:	e0cc      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_I2C_Mem_Write+0x56>
 8005802:	2302      	movs	r3, #2
 8005804:	e0c5      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d007      	beq.n	800582c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800583a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2221      	movs	r2, #33	; 0x21
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2240      	movs	r2, #64	; 0x40
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800585c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a4d      	ldr	r2, [pc, #308]	; (80059a0 <HAL_I2C_Mem_Write+0x1f0>)
 800586c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800586e:	88f8      	ldrh	r0, [r7, #6]
 8005870:	893a      	ldrh	r2, [r7, #8]
 8005872:	8979      	ldrh	r1, [r7, #10]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4603      	mov	r3, r0
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 faf8 	bl	8005e74 <I2C_RequestMemoryWrite>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d052      	beq.n	8005930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e081      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fd42 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d107      	bne.n	80058b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e06b      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d11b      	bne.n	8005930 <HAL_I2C_Mem_Write+0x180>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1aa      	bne.n	800588e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fd2e 	bl	800639e <I2C_WaitOnBTFFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b04      	cmp	r3, #4
 800594e:	d107      	bne.n	8005960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e016      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	00100002 	.word	0x00100002
 80059a0:	ffff0000 	.word	0xffff0000

080059a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	; 0x30
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	460b      	mov	r3, r1
 80059b8:	813b      	strh	r3, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059c2:	f7ff f8d5 	bl	8004b70 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	f040 8244 	bne.w	8005e5e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2319      	movs	r3, #25
 80059dc:	2201      	movs	r2, #1
 80059de:	4982      	ldr	r1, [pc, #520]	; (8005be8 <HAL_I2C_Mem_Read+0x244>)
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fbc5 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
 80059ee:	e237      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_Mem_Read+0x5a>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e230      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d007      	beq.n	8005a24 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2222      	movs	r2, #34	; 0x22
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a62      	ldr	r2, [pc, #392]	; (8005bec <HAL_I2C_Mem_Read+0x248>)
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a66:	88f8      	ldrh	r0, [r7, #6]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	8979      	ldrh	r1, [r7, #10]
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fa92 	bl	8005fa0 <I2C_RequestMemoryRead>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e1ec      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d113      	bne.n	8005ab6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e1c0      	b.n	8005e38 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11e      	bne.n	8005afc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005acc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ace:	b672      	cpsid	i
}
 8005ad0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005af8:	b662      	cpsie	i
}
 8005afa:	e035      	b.n	8005b68 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d11e      	bne.n	8005b42 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b14:	b672      	cpsid	i
}
 8005b16:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b3e:	b662      	cpsie	i
}
 8005b40:	e012      	b.n	8005b68 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b50:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005b68:	e166      	b.n	8005e38 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	f200 811f 	bhi.w	8005db2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d123      	bne.n	8005bc4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fc4d 	bl	8006420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e167      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc2:	e139      	b.n	8005e38 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d152      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4906      	ldr	r1, [pc, #24]	; (8005bf0 <HAL_I2C_Mem_Read+0x24c>)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 faca 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e13c      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
 8005be6:	bf00      	nop
 8005be8:	00100002 	.word	0x00100002
 8005bec:	ffff0000 	.word	0xffff0000
 8005bf0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf4:	b672      	cpsid	i
}
 8005bf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c3a:	b662      	cpsie	i
}
 8005c3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c70:	e0e2      	b.n	8005e38 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2200      	movs	r2, #0
 8005c7a:	497b      	ldr	r1, [pc, #492]	; (8005e68 <HAL_I2C_Mem_Read+0x4c4>)
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fa77 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0e9      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c9c:	b672      	cpsid	i
}
 8005c9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cd2:	4b66      	ldr	r3, [pc, #408]	; (8005e6c <HAL_I2C_Mem_Read+0x4c8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_I2C_Mem_Read+0x4cc>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a1a      	lsrs	r2, r3, #8
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d118      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f043 0220 	orr.w	r2, r3, #32
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005d1a:	b662      	cpsie	i
}
 8005d1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e09a      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d1d9      	bne.n	8005cec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d7a:	b662      	cpsie	i
}
 8005d7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db0:	e042      	b.n	8005e38 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fb32 	bl	8006420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e04c      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d118      	bne.n	8005e38 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f ae94 	bne.w	8005b6a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00010004 	.word	0x00010004
 8005e6c:	20000000 	.word	0x20000000
 8005e70:	14f8b589 	.word	0x14f8b589

08005e74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	460b      	mov	r3, r1
 8005e88:	813b      	strh	r3, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f960 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec4:	d103      	bne.n	8005ece <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e05f      	b.n	8005f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	6a3a      	ldr	r2, [r7, #32]
 8005ee6:	492d      	ldr	r1, [pc, #180]	; (8005f9c <I2C_RequestMemoryWrite+0x128>)
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f998 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e04c      	b.n	8005f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	6a39      	ldr	r1, [r7, #32]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fa02 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d107      	bne.n	8005f36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e02b      	b.n	8005f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d105      	bne.n	8005f4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f40:	893b      	ldrh	r3, [r7, #8]
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	e021      	b.n	8005f90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f4c:	893b      	ldrh	r3, [r7, #8]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f9dc 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d107      	bne.n	8005f82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e005      	b.n	8005f92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f86:	893b      	ldrh	r3, [r7, #8]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	00010002 	.word	0x00010002

08005fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	817b      	strh	r3, [r7, #10]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	813b      	strh	r3, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f8c2 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00d      	beq.n	800600e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006000:	d103      	bne.n	800600a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0aa      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800601c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	4952      	ldr	r1, [pc, #328]	; (800616c <I2C_RequestMemoryRead+0x1cc>)
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f8fa 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e097      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	6a39      	ldr	r1, [r7, #32]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f964 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b04      	cmp	r3, #4
 8006060:	d107      	bne.n	8006072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e076      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	611a      	str	r2, [r3, #16]
 8006086:	e021      	b.n	80060cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006088:	893b      	ldrh	r3, [r7, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	b29b      	uxth	r3, r3
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f93e 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d107      	bne.n	80060be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e050      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060c2:	893b      	ldrh	r3, [r7, #8]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	6a39      	ldr	r1, [r7, #32]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f923 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00d      	beq.n	80060f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d107      	bne.n	80060f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e035      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2200      	movs	r2, #0
 8006110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f82b 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00d      	beq.n	800613c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612e:	d103      	bne.n	8006138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e013      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800613c:	897b      	ldrh	r3, [r7, #10]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	4906      	ldr	r1, [pc, #24]	; (800616c <I2C_RequestMemoryRead+0x1cc>)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f863 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00010002 	.word	0x00010002

08006170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006180:	e025      	b.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d021      	beq.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618a:	f7fe fcf1 	bl	8004b70 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d116      	bne.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e023      	b.n	8006216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10d      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	43da      	mvns	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf0c      	ite	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	2300      	movne	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	e00c      	b.n	800620e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	43da      	mvns	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d0b6      	beq.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800622c:	e051      	b.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d123      	bne.n	8006286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e046      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d021      	beq.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fe fc6f 	bl	8004b70 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e020      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10c      	bne.n	80062f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	43da      	mvns	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	e00b      	b.n	800630e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	43da      	mvns	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4013      	ands	r3, r2
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d18d      	bne.n	800622e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006328:	e02d      	b.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f8ce 	bl	80064cc <I2C_IsAcknowledgeFailed>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02d      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d021      	beq.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fe fc15 	bl	8004b70 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d116      	bne.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0220 	orr.w	r2, r3, #32
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e007      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d1ca      	bne.n	800632a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063aa:	e02d      	b.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f88d 	bl	80064cc <I2C_IsAcknowledgeFailed>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02d      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d021      	beq.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fe fbd4 	bl	8004b70 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d1ca      	bne.n	80063ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800642c:	e042      	b.n	80064b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b10      	cmp	r3, #16
 800643a:	d119      	bne.n	8006470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0210 	mvn.w	r2, #16
 8006444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e029      	b.n	80064c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006470:	f7fe fb7e 	bl	8004b70 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d302      	bcc.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d116      	bne.n	80064b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e007      	b.n	80064c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d1b5      	bne.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e2:	d11b      	bne.n	800651c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f043 0204 	orr.w	r2, r3, #4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e26c      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8087 	beq.w	8006656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006548:	4b92      	ldr	r3, [pc, #584]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b04      	cmp	r3, #4
 8006552:	d00c      	beq.n	800656e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006554:	4b8f      	ldr	r3, [pc, #572]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 030c 	and.w	r3, r3, #12
 800655c:	2b08      	cmp	r3, #8
 800655e:	d112      	bne.n	8006586 <HAL_RCC_OscConfig+0x5e>
 8006560:	4b8c      	ldr	r3, [pc, #560]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d10b      	bne.n	8006586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656e:	4b89      	ldr	r3, [pc, #548]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d06c      	beq.n	8006654 <HAL_RCC_OscConfig+0x12c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d168      	bne.n	8006654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e246      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658e:	d106      	bne.n	800659e <HAL_RCC_OscConfig+0x76>
 8006590:	4b80      	ldr	r3, [pc, #512]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a7f      	ldr	r2, [pc, #508]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e02e      	b.n	80065fc <HAL_RCC_OscConfig+0xd4>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x98>
 80065a6:	4b7b      	ldr	r3, [pc, #492]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a7a      	ldr	r2, [pc, #488]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b78      	ldr	r3, [pc, #480]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a77      	ldr	r2, [pc, #476]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e01d      	b.n	80065fc <HAL_RCC_OscConfig+0xd4>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCC_OscConfig+0xbc>
 80065ca:	4b72      	ldr	r3, [pc, #456]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a71      	ldr	r2, [pc, #452]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	4b6f      	ldr	r3, [pc, #444]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a6e      	ldr	r2, [pc, #440]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e00b      	b.n	80065fc <HAL_RCC_OscConfig+0xd4>
 80065e4:	4b6b      	ldr	r3, [pc, #428]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4b68      	ldr	r3, [pc, #416]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a67      	ldr	r2, [pc, #412]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80065f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d013      	beq.n	800662c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006604:	f7fe fab4 	bl	8004b70 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800660c:	f7fe fab0 	bl	8004b70 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b64      	cmp	r3, #100	; 0x64
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e1fa      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	4b5d      	ldr	r3, [pc, #372]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f0      	beq.n	800660c <HAL_RCC_OscConfig+0xe4>
 800662a:	e014      	b.n	8006656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7fe faa0 	bl	8004b70 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006634:	f7fe fa9c 	bl	8004b70 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	; 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e1e6      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006646:	4b53      	ldr	r3, [pc, #332]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCC_OscConfig+0x10c>
 8006652:	e000      	b.n	8006656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d063      	beq.n	800672a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006662:	4b4c      	ldr	r3, [pc, #304]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800666e:	4b49      	ldr	r3, [pc, #292]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b08      	cmp	r3, #8
 8006678:	d11c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x18c>
 800667a:	4b46      	ldr	r3, [pc, #280]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d116      	bne.n	80066b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006686:	4b43      	ldr	r3, [pc, #268]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <HAL_RCC_OscConfig+0x176>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d001      	beq.n	800669e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e1ba      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669e:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	4939      	ldr	r1, [pc, #228]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b2:	e03a      	b.n	800672a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d020      	beq.n	80066fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066bc:	4b36      	ldr	r3, [pc, #216]	; (8006798 <HAL_RCC_OscConfig+0x270>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c2:	f7fe fa55 	bl	8004b70 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ca:	f7fe fa51 	bl	8004b70 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e19b      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e8:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4927      	ldr	r1, [pc, #156]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	600b      	str	r3, [r1, #0]
 80066fc:	e015      	b.n	800672a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fe:	4b26      	ldr	r3, [pc, #152]	; (8006798 <HAL_RCC_OscConfig+0x270>)
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006704:	f7fe fa34 	bl	8004b70 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670c:	f7fe fa30 	bl	8004b70 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e17a      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d03a      	beq.n	80067ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d019      	beq.n	8006772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800673e:	4b17      	ldr	r3, [pc, #92]	; (800679c <HAL_RCC_OscConfig+0x274>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006744:	f7fe fa14 	bl	8004b70 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800674c:	f7fe fa10 	bl	8004b70 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e15a      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675e:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <HAL_RCC_OscConfig+0x26c>)
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800676a:	2001      	movs	r0, #1
 800676c:	f000 fac4 	bl	8006cf8 <RCC_Delay>
 8006770:	e01c      	b.n	80067ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <HAL_RCC_OscConfig+0x274>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fe f9fa 	bl	8004b70 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800677e:	e00f      	b.n	80067a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006780:	f7fe f9f6 	bl	8004b70 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d908      	bls.n	80067a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e140      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	42420000 	.word	0x42420000
 800679c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a0:	4b9e      	ldr	r3, [pc, #632]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e9      	bne.n	8006780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80a6 	beq.w	8006906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067be:	4b97      	ldr	r3, [pc, #604]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	4b94      	ldr	r3, [pc, #592]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4a93      	ldr	r2, [pc, #588]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	61d3      	str	r3, [r2, #28]
 80067d6:	4b91      	ldr	r3, [pc, #580]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e2:	2301      	movs	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	4b8e      	ldr	r3, [pc, #568]	; (8006a20 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d118      	bne.n	8006824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067f2:	4b8b      	ldr	r3, [pc, #556]	; (8006a20 <HAL_RCC_OscConfig+0x4f8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a8a      	ldr	r2, [pc, #552]	; (8006a20 <HAL_RCC_OscConfig+0x4f8>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067fe:	f7fe f9b7 	bl	8004b70 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006806:	f7fe f9b3 	bl	8004b70 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b64      	cmp	r3, #100	; 0x64
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e0fd      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006818:	4b81      	ldr	r3, [pc, #516]	; (8006a20 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d106      	bne.n	800683a <HAL_RCC_OscConfig+0x312>
 800682c:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	4a7a      	ldr	r2, [pc, #488]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	6213      	str	r3, [r2, #32]
 8006838:	e02d      	b.n	8006896 <HAL_RCC_OscConfig+0x36e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0x334>
 8006842:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	4a75      	ldr	r2, [pc, #468]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	6213      	str	r3, [r2, #32]
 800684e:	4b73      	ldr	r3, [pc, #460]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	4a72      	ldr	r2, [pc, #456]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006854:	f023 0304 	bic.w	r3, r3, #4
 8006858:	6213      	str	r3, [r2, #32]
 800685a:	e01c      	b.n	8006896 <HAL_RCC_OscConfig+0x36e>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b05      	cmp	r3, #5
 8006862:	d10c      	bne.n	800687e <HAL_RCC_OscConfig+0x356>
 8006864:	4b6d      	ldr	r3, [pc, #436]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	4a6c      	ldr	r2, [pc, #432]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 800686a:	f043 0304 	orr.w	r3, r3, #4
 800686e:	6213      	str	r3, [r2, #32]
 8006870:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	4a69      	ldr	r2, [pc, #420]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	6213      	str	r3, [r2, #32]
 800687c:	e00b      	b.n	8006896 <HAL_RCC_OscConfig+0x36e>
 800687e:	4b67      	ldr	r3, [pc, #412]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	4a66      	ldr	r2, [pc, #408]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	6213      	str	r3, [r2, #32]
 800688a:	4b64      	ldr	r3, [pc, #400]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	4a63      	ldr	r2, [pc, #396]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006890:	f023 0304 	bic.w	r3, r3, #4
 8006894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d015      	beq.n	80068ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689e:	f7fe f967 	bl	8004b70 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a4:	e00a      	b.n	80068bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a6:	f7fe f963 	bl	8004b70 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e0ab      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068bc:	4b57      	ldr	r3, [pc, #348]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0ee      	beq.n	80068a6 <HAL_RCC_OscConfig+0x37e>
 80068c8:	e014      	b.n	80068f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ca:	f7fe f951 	bl	8004b70 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fe f94d 	bl	8004b70 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e095      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e8:	4b4c      	ldr	r3, [pc, #304]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ee      	bne.n	80068d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d105      	bne.n	8006906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068fa:	4b48      	ldr	r3, [pc, #288]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	4a47      	ldr	r2, [pc, #284]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8081 	beq.w	8006a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006910:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f003 030c 	and.w	r3, r3, #12
 8006918:	2b08      	cmp	r3, #8
 800691a:	d061      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d146      	bne.n	80069b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006924:	4b3f      	ldr	r3, [pc, #252]	; (8006a24 <HAL_RCC_OscConfig+0x4fc>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692a:	f7fe f921 	bl	8004b70 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006932:	f7fe f91d 	bl	8004b70 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e067      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006944:	4b35      	ldr	r3, [pc, #212]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f0      	bne.n	8006932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006958:	d108      	bne.n	800696c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800695a:	4b30      	ldr	r3, [pc, #192]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	492d      	ldr	r1, [pc, #180]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006968:	4313      	orrs	r3, r2
 800696a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a19      	ldr	r1, [r3, #32]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	430b      	orrs	r3, r1
 800697e:	4927      	ldr	r1, [pc, #156]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006984:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x4fc>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fe f8f1 	bl	8004b70 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006992:	f7fe f8ed 	bl	8004b70 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e037      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x46a>
 80069b0:	e02f      	b.n	8006a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <HAL_RCC_OscConfig+0x4fc>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fe f8da 	bl	8004b70 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fe f8d6 	bl	8004b70 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e020      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x498>
 80069de:	e018      	b.n	8006a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e013      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_RCC_OscConfig+0x4f4>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d106      	bne.n	8006a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d001      	beq.n	8006a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	40007000 	.word	0x40007000
 8006a24:	42420060 	.word	0x42420060

08006a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0d0      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d910      	bls.n	8006a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4a:	4b67      	ldr	r3, [pc, #412]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f023 0207 	bic.w	r2, r3, #7
 8006a52:	4965      	ldr	r1, [pc, #404]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5a:	4b63      	ldr	r3, [pc, #396]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0b8      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d020      	beq.n	8006aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a84:	4b59      	ldr	r3, [pc, #356]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4a58      	ldr	r2, [pc, #352]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a9c:	4b53      	ldr	r3, [pc, #332]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a52      	ldr	r2, [pc, #328]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aa8:	4b50      	ldr	r3, [pc, #320]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	494d      	ldr	r1, [pc, #308]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d040      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	4b47      	ldr	r3, [pc, #284]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d115      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e07f      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae6:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e073      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af6:	4b3d      	ldr	r3, [pc, #244]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06b      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b06:	4b39      	ldr	r3, [pc, #228]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f023 0203 	bic.w	r2, r3, #3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4936      	ldr	r1, [pc, #216]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b18:	f7fe f82a 	bl	8004b70 <HAL_GetTick>
 8006b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b20:	f7fe f826 	bl	8004b70 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e053      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 020c 	and.w	r2, r3, #12
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1eb      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b27      	ldr	r3, [pc, #156]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d210      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 0207 	bic.w	r2, r3, #7
 8006b5e:	4922      	ldr	r1, [pc, #136]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e032      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b84:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4916      	ldr	r1, [pc, #88]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	490e      	ldr	r1, [pc, #56]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bb6:	f000 f821 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	490a      	ldr	r1, [pc, #40]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc8:	5ccb      	ldrb	r3, [r1, r3]
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8006bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd ff88 	bl	8004aec <HAL_InitTick>

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40022000 	.word	0x40022000
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	080082a8 	.word	0x080082a8
 8006bf4:	20000000 	.word	0x20000000
 8006bf8:	20000044 	.word	0x20000044

08006bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	b490      	push	{r4, r7}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c04:	1d3c      	adds	r4, r7, #4
 8006c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c0c:	f240 2301 	movw	r3, #513	; 0x201
 8006c10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c26:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d002      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x40>
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d003      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0x46>
 8006c3a:	e02d      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c3e:	623b      	str	r3, [r7, #32]
      break;
 8006c40:	e02d      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	0c9b      	lsrs	r3, r3, #18
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c4e:	4413      	add	r3, r2
 8006c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c60:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	0c5b      	lsrs	r3, r3, #17
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c6e:	4413      	add	r3, r2
 8006c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c7a:	fb02 f203 	mul.w	r2, r2, r3
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	e004      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	623b      	str	r3, [r7, #32]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c9a:	623b      	str	r3, [r7, #32]
      break;
 8006c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3728      	adds	r7, #40	; 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc90      	pop	{r4, r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	08008298 	.word	0x08008298
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	007a1200 	.word	0x007a1200
 8006cb8:	003d0900 	.word	0x003d0900

08006cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	20000000 	.word	0x20000000

08006cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cd4:	f7ff fff2 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	4903      	ldr	r1, [pc, #12]	; (8006cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce6:	5ccb      	ldrb	r3, [r1, r3]
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	080082b8 	.word	0x080082b8

08006cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <RCC_Delay+0x34>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <RCC_Delay+0x38>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d14:	bf00      	nop
  }
  while (Delay --);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1e5a      	subs	r2, r3, #1
 8006d1a:	60fa      	str	r2, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f9      	bne.n	8006d14 <RCC_Delay+0x1c>
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	20000000 	.word	0x20000000
 8006d30:	10624dd3 	.word	0x10624dd3

08006d34 <asinf>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4604      	mov	r4, r0
 8006d38:	f000 f824 	bl	8006d84 <__ieee754_asinf>
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <asinf+0x44>)
 8006d3e:	4605      	mov	r5, r0
 8006d40:	f993 3000 	ldrsb.w	r3, [r3]
 8006d44:	3301      	adds	r3, #1
 8006d46:	d015      	beq.n	8006d74 <asinf+0x40>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7fa f8f2 	bl	8000f34 <__aeabi_fcmpun>
 8006d50:	b980      	cbnz	r0, 8006d74 <asinf+0x40>
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fb3e 	bl	80073d4 <fabsf>
 8006d58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006d5c:	f7fa f8e0 	bl	8000f20 <__aeabi_fcmpgt>
 8006d60:	b140      	cbz	r0, 8006d74 <asinf+0x40>
 8006d62:	f000 fb3f 	bl	80073e4 <__errno>
 8006d66:	2321      	movs	r3, #33	; 0x21
 8006d68:	6003      	str	r3, [r0, #0]
 8006d6a:	4804      	ldr	r0, [pc, #16]	; (8006d7c <asinf+0x48>)
 8006d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d70:	f000 bb34 	b.w	80073dc <nanf>
 8006d74:	4628      	mov	r0, r5
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	20000049 	.word	0x20000049
 8006d7c:	08008f22 	.word	0x08008f22

08006d80 <atan2f>:
 8006d80:	f000 b944 	b.w	800700c <__ieee754_atan2f>

08006d84 <__ieee754_asinf>:
 8006d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006d8c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006d90:	4604      	mov	r4, r0
 8006d92:	4605      	mov	r5, r0
 8006d94:	d10c      	bne.n	8006db0 <__ieee754_asinf+0x2c>
 8006d96:	498d      	ldr	r1, [pc, #564]	; (8006fcc <__ieee754_asinf+0x248>)
 8006d98:	f7f9 ff06 	bl	8000ba8 <__aeabi_fmul>
 8006d9c:	498c      	ldr	r1, [pc, #560]	; (8006fd0 <__ieee754_asinf+0x24c>)
 8006d9e:	4605      	mov	r5, r0
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7f9 ff01 	bl	8000ba8 <__aeabi_fmul>
 8006da6:	4601      	mov	r1, r0
 8006da8:	4628      	mov	r0, r5
 8006daa:	f7f9 fdf5 	bl	8000998 <__addsf3>
 8006dae:	e006      	b.n	8006dbe <__ieee754_asinf+0x3a>
 8006db0:	dd07      	ble.n	8006dc2 <__ieee754_asinf+0x3e>
 8006db2:	4601      	mov	r1, r0
 8006db4:	f7f9 fdee 	bl	8000994 <__aeabi_fsub>
 8006db8:	4601      	mov	r1, r0
 8006dba:	f7f9 ffa9 	bl	8000d10 <__aeabi_fdiv>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	e00e      	b.n	8006de0 <__ieee754_asinf+0x5c>
 8006dc2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8006dc6:	da58      	bge.n	8006e7a <__ieee754_asinf+0xf6>
 8006dc8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8006dcc:	da0b      	bge.n	8006de6 <__ieee754_asinf+0x62>
 8006dce:	4981      	ldr	r1, [pc, #516]	; (8006fd4 <__ieee754_asinf+0x250>)
 8006dd0:	f7f9 fde2 	bl	8000998 <__addsf3>
 8006dd4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006dd8:	f7fa f8a2 	bl	8000f20 <__aeabi_fcmpgt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d04c      	beq.n	8006e7a <__ieee754_asinf+0xf6>
 8006de0:	4620      	mov	r0, r4
 8006de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de6:	4601      	mov	r1, r0
 8006de8:	f7f9 fede 	bl	8000ba8 <__aeabi_fmul>
 8006dec:	4605      	mov	r5, r0
 8006dee:	497a      	ldr	r1, [pc, #488]	; (8006fd8 <__ieee754_asinf+0x254>)
 8006df0:	f7f9 feda 	bl	8000ba8 <__aeabi_fmul>
 8006df4:	4979      	ldr	r1, [pc, #484]	; (8006fdc <__ieee754_asinf+0x258>)
 8006df6:	f7f9 fdcf 	bl	8000998 <__addsf3>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fed4 	bl	8000ba8 <__aeabi_fmul>
 8006e00:	4977      	ldr	r1, [pc, #476]	; (8006fe0 <__ieee754_asinf+0x25c>)
 8006e02:	f7f9 fdc7 	bl	8000994 <__aeabi_fsub>
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fece 	bl	8000ba8 <__aeabi_fmul>
 8006e0c:	4975      	ldr	r1, [pc, #468]	; (8006fe4 <__ieee754_asinf+0x260>)
 8006e0e:	f7f9 fdc3 	bl	8000998 <__addsf3>
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 fec8 	bl	8000ba8 <__aeabi_fmul>
 8006e18:	4973      	ldr	r1, [pc, #460]	; (8006fe8 <__ieee754_asinf+0x264>)
 8006e1a:	f7f9 fdbb 	bl	8000994 <__aeabi_fsub>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fec2 	bl	8000ba8 <__aeabi_fmul>
 8006e24:	4971      	ldr	r1, [pc, #452]	; (8006fec <__ieee754_asinf+0x268>)
 8006e26:	f7f9 fdb7 	bl	8000998 <__addsf3>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f7f9 febc 	bl	8000ba8 <__aeabi_fmul>
 8006e30:	496f      	ldr	r1, [pc, #444]	; (8006ff0 <__ieee754_asinf+0x26c>)
 8006e32:	4606      	mov	r6, r0
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7f9 feb7 	bl	8000ba8 <__aeabi_fmul>
 8006e3a:	496e      	ldr	r1, [pc, #440]	; (8006ff4 <__ieee754_asinf+0x270>)
 8006e3c:	f7f9 fdaa 	bl	8000994 <__aeabi_fsub>
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 feb1 	bl	8000ba8 <__aeabi_fmul>
 8006e46:	496c      	ldr	r1, [pc, #432]	; (8006ff8 <__ieee754_asinf+0x274>)
 8006e48:	f7f9 fda6 	bl	8000998 <__addsf3>
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7f9 feab 	bl	8000ba8 <__aeabi_fmul>
 8006e52:	496a      	ldr	r1, [pc, #424]	; (8006ffc <__ieee754_asinf+0x278>)
 8006e54:	f7f9 fd9e 	bl	8000994 <__aeabi_fsub>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fea5 	bl	8000ba8 <__aeabi_fmul>
 8006e5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006e62:	f7f9 fd99 	bl	8000998 <__addsf3>
 8006e66:	4601      	mov	r1, r0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7f9 ff51 	bl	8000d10 <__aeabi_fdiv>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	f7f9 fe9a 	bl	8000ba8 <__aeabi_fmul>
 8006e74:	4601      	mov	r1, r0
 8006e76:	4620      	mov	r0, r4
 8006e78:	e797      	b.n	8006daa <__ieee754_asinf+0x26>
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 faaa 	bl	80073d4 <fabsf>
 8006e80:	4601      	mov	r1, r0
 8006e82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006e86:	f7f9 fd85 	bl	8000994 <__aeabi_fsub>
 8006e8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006e8e:	f7f9 fe8b 	bl	8000ba8 <__aeabi_fmul>
 8006e92:	4606      	mov	r6, r0
 8006e94:	4950      	ldr	r1, [pc, #320]	; (8006fd8 <__ieee754_asinf+0x254>)
 8006e96:	f7f9 fe87 	bl	8000ba8 <__aeabi_fmul>
 8006e9a:	4950      	ldr	r1, [pc, #320]	; (8006fdc <__ieee754_asinf+0x258>)
 8006e9c:	f7f9 fd7c 	bl	8000998 <__addsf3>
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	f7f9 fe81 	bl	8000ba8 <__aeabi_fmul>
 8006ea6:	494e      	ldr	r1, [pc, #312]	; (8006fe0 <__ieee754_asinf+0x25c>)
 8006ea8:	f7f9 fd74 	bl	8000994 <__aeabi_fsub>
 8006eac:	4631      	mov	r1, r6
 8006eae:	f7f9 fe7b 	bl	8000ba8 <__aeabi_fmul>
 8006eb2:	494c      	ldr	r1, [pc, #304]	; (8006fe4 <__ieee754_asinf+0x260>)
 8006eb4:	f7f9 fd70 	bl	8000998 <__addsf3>
 8006eb8:	4631      	mov	r1, r6
 8006eba:	f7f9 fe75 	bl	8000ba8 <__aeabi_fmul>
 8006ebe:	494a      	ldr	r1, [pc, #296]	; (8006fe8 <__ieee754_asinf+0x264>)
 8006ec0:	f7f9 fd68 	bl	8000994 <__aeabi_fsub>
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	f7f9 fe6f 	bl	8000ba8 <__aeabi_fmul>
 8006eca:	4948      	ldr	r1, [pc, #288]	; (8006fec <__ieee754_asinf+0x268>)
 8006ecc:	f7f9 fd64 	bl	8000998 <__addsf3>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	f7f9 fe69 	bl	8000ba8 <__aeabi_fmul>
 8006ed6:	4946      	ldr	r1, [pc, #280]	; (8006ff0 <__ieee754_asinf+0x26c>)
 8006ed8:	4681      	mov	r9, r0
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7f9 fe64 	bl	8000ba8 <__aeabi_fmul>
 8006ee0:	4944      	ldr	r1, [pc, #272]	; (8006ff4 <__ieee754_asinf+0x270>)
 8006ee2:	f7f9 fd57 	bl	8000994 <__aeabi_fsub>
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	f7f9 fe5e 	bl	8000ba8 <__aeabi_fmul>
 8006eec:	4942      	ldr	r1, [pc, #264]	; (8006ff8 <__ieee754_asinf+0x274>)
 8006eee:	f7f9 fd53 	bl	8000998 <__addsf3>
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	f7f9 fe58 	bl	8000ba8 <__aeabi_fmul>
 8006ef8:	4940      	ldr	r1, [pc, #256]	; (8006ffc <__ieee754_asinf+0x278>)
 8006efa:	f7f9 fd4b 	bl	8000994 <__aeabi_fsub>
 8006efe:	4631      	mov	r1, r6
 8006f00:	f7f9 fe52 	bl	8000ba8 <__aeabi_fmul>
 8006f04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f08:	f7f9 fd46 	bl	8000998 <__addsf3>
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f902 	bl	8007118 <__ieee754_sqrtf>
 8006f14:	4b3a      	ldr	r3, [pc, #232]	; (8007000 <__ieee754_asinf+0x27c>)
 8006f16:	4607      	mov	r7, r0
 8006f18:	4598      	cmp	r8, r3
 8006f1a:	dd1a      	ble.n	8006f52 <__ieee754_asinf+0x1ce>
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	4648      	mov	r0, r9
 8006f20:	f7f9 fef6 	bl	8000d10 <__aeabi_fdiv>
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 fe3f 	bl	8000ba8 <__aeabi_fmul>
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fd34 	bl	8000998 <__addsf3>
 8006f30:	4601      	mov	r1, r0
 8006f32:	f7f9 fd31 	bl	8000998 <__addsf3>
 8006f36:	4933      	ldr	r1, [pc, #204]	; (8007004 <__ieee754_asinf+0x280>)
 8006f38:	f7f9 fd2e 	bl	8000998 <__addsf3>
 8006f3c:	4601      	mov	r1, r0
 8006f3e:	4823      	ldr	r0, [pc, #140]	; (8006fcc <__ieee754_asinf+0x248>)
 8006f40:	f7f9 fd28 	bl	8000994 <__aeabi_fsub>
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	f73f af4a 	bgt.w	8006de0 <__ieee754_asinf+0x5c>
 8006f4c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006f50:	e735      	b.n	8006dbe <__ieee754_asinf+0x3a>
 8006f52:	4601      	mov	r1, r0
 8006f54:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8006f58:	f7f9 fd1e 	bl	8000998 <__addsf3>
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4648      	mov	r0, r9
 8006f62:	f7f9 fed5 	bl	8000d10 <__aeabi_fdiv>
 8006f66:	4601      	mov	r1, r0
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7f9 fe1d 	bl	8000ba8 <__aeabi_fmul>
 8006f6e:	f028 080f 	bic.w	r8, r8, #15
 8006f72:	4681      	mov	r9, r0
 8006f74:	4641      	mov	r1, r8
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7f9 fe16 	bl	8000ba8 <__aeabi_fmul>
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7f9 fd08 	bl	8000994 <__aeabi_fsub>
 8006f84:	4641      	mov	r1, r8
 8006f86:	4604      	mov	r4, r0
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7f9 fd05 	bl	8000998 <__addsf3>
 8006f8e:	4601      	mov	r1, r0
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7f9 febd 	bl	8000d10 <__aeabi_fdiv>
 8006f96:	4601      	mov	r1, r0
 8006f98:	f7f9 fcfe 	bl	8000998 <__addsf3>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	480c      	ldr	r0, [pc, #48]	; (8006fd0 <__ieee754_asinf+0x24c>)
 8006fa0:	f7f9 fcf8 	bl	8000994 <__aeabi_fsub>
 8006fa4:	4601      	mov	r1, r0
 8006fa6:	4648      	mov	r0, r9
 8006fa8:	f7f9 fcf4 	bl	8000994 <__aeabi_fsub>
 8006fac:	4641      	mov	r1, r8
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7f9 fcf1 	bl	8000998 <__addsf3>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4813      	ldr	r0, [pc, #76]	; (8007008 <__ieee754_asinf+0x284>)
 8006fba:	f7f9 fceb 	bl	8000994 <__aeabi_fsub>
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7f9 fce7 	bl	8000994 <__aeabi_fsub>
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	480f      	ldr	r0, [pc, #60]	; (8007008 <__ieee754_asinf+0x284>)
 8006fca:	e7b9      	b.n	8006f40 <__ieee754_asinf+0x1bc>
 8006fcc:	3fc90fdb 	.word	0x3fc90fdb
 8006fd0:	b33bbd2e 	.word	0xb33bbd2e
 8006fd4:	7149f2ca 	.word	0x7149f2ca
 8006fd8:	3811ef08 	.word	0x3811ef08
 8006fdc:	3a4f7f04 	.word	0x3a4f7f04
 8006fe0:	3d241146 	.word	0x3d241146
 8006fe4:	3e4e0aa8 	.word	0x3e4e0aa8
 8006fe8:	3ea6b090 	.word	0x3ea6b090
 8006fec:	3e2aaaab 	.word	0x3e2aaaab
 8006ff0:	3d9dc62e 	.word	0x3d9dc62e
 8006ff4:	3f303361 	.word	0x3f303361
 8006ff8:	4001572d 	.word	0x4001572d
 8006ffc:	4019d139 	.word	0x4019d139
 8007000:	3f799999 	.word	0x3f799999
 8007004:	333bbd2e 	.word	0x333bbd2e
 8007008:	3f490fdb 	.word	0x3f490fdb

0800700c <__ieee754_atan2f>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007012:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007016:	4603      	mov	r3, r0
 8007018:	dc05      	bgt.n	8007026 <__ieee754_atan2f+0x1a>
 800701a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800701e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007022:	4607      	mov	r7, r0
 8007024:	dd04      	ble.n	8007030 <__ieee754_atan2f+0x24>
 8007026:	4618      	mov	r0, r3
 8007028:	f7f9 fcb6 	bl	8000998 <__addsf3>
 800702c:	4603      	mov	r3, r0
 800702e:	e011      	b.n	8007054 <__ieee754_atan2f+0x48>
 8007030:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007034:	d103      	bne.n	800703e <__ieee754_atan2f+0x32>
 8007036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800703a:	f000 b8bf 	b.w	80071bc <atanf>
 800703e:	178c      	asrs	r4, r1, #30
 8007040:	f004 0402 	and.w	r4, r4, #2
 8007044:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007048:	b932      	cbnz	r2, 8007058 <__ieee754_atan2f+0x4c>
 800704a:	2c02      	cmp	r4, #2
 800704c:	d04c      	beq.n	80070e8 <__ieee754_atan2f+0xdc>
 800704e:	2c03      	cmp	r4, #3
 8007050:	d100      	bne.n	8007054 <__ieee754_atan2f+0x48>
 8007052:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <__ieee754_atan2f+0xec>)
 8007054:	4618      	mov	r0, r3
 8007056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007058:	b91e      	cbnz	r6, 8007062 <__ieee754_atan2f+0x56>
 800705a:	2f00      	cmp	r7, #0
 800705c:	da4a      	bge.n	80070f4 <__ieee754_atan2f+0xe8>
 800705e:	4b27      	ldr	r3, [pc, #156]	; (80070fc <__ieee754_atan2f+0xf0>)
 8007060:	e7f8      	b.n	8007054 <__ieee754_atan2f+0x48>
 8007062:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007066:	d10e      	bne.n	8007086 <__ieee754_atan2f+0x7a>
 8007068:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800706c:	f104 34ff 	add.w	r4, r4, #4294967295
 8007070:	d105      	bne.n	800707e <__ieee754_atan2f+0x72>
 8007072:	2c02      	cmp	r4, #2
 8007074:	d83a      	bhi.n	80070ec <__ieee754_atan2f+0xe0>
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <__ieee754_atan2f+0xf4>)
 8007078:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800707c:	e7ea      	b.n	8007054 <__ieee754_atan2f+0x48>
 800707e:	2c02      	cmp	r4, #2
 8007080:	d836      	bhi.n	80070f0 <__ieee754_atan2f+0xe4>
 8007082:	4b20      	ldr	r3, [pc, #128]	; (8007104 <__ieee754_atan2f+0xf8>)
 8007084:	e7f8      	b.n	8007078 <__ieee754_atan2f+0x6c>
 8007086:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800708a:	d0e6      	beq.n	800705a <__ieee754_atan2f+0x4e>
 800708c:	1b92      	subs	r2, r2, r6
 800708e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8007092:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007096:	da17      	bge.n	80070c8 <__ieee754_atan2f+0xbc>
 8007098:	2900      	cmp	r1, #0
 800709a:	da01      	bge.n	80070a0 <__ieee754_atan2f+0x94>
 800709c:	303c      	adds	r0, #60	; 0x3c
 800709e:	db15      	blt.n	80070cc <__ieee754_atan2f+0xc0>
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7f9 fe35 	bl	8000d10 <__aeabi_fdiv>
 80070a6:	f000 f995 	bl	80073d4 <fabsf>
 80070aa:	f000 f887 	bl	80071bc <atanf>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2c01      	cmp	r4, #1
 80070b2:	d00d      	beq.n	80070d0 <__ieee754_atan2f+0xc4>
 80070b4:	2c02      	cmp	r4, #2
 80070b6:	d00e      	beq.n	80070d6 <__ieee754_atan2f+0xca>
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	d0cb      	beq.n	8007054 <__ieee754_atan2f+0x48>
 80070bc:	4912      	ldr	r1, [pc, #72]	; (8007108 <__ieee754_atan2f+0xfc>)
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 fc6a 	bl	8000998 <__addsf3>
 80070c4:	4911      	ldr	r1, [pc, #68]	; (800710c <__ieee754_atan2f+0x100>)
 80070c6:	e00c      	b.n	80070e2 <__ieee754_atan2f+0xd6>
 80070c8:	4b11      	ldr	r3, [pc, #68]	; (8007110 <__ieee754_atan2f+0x104>)
 80070ca:	e7f1      	b.n	80070b0 <__ieee754_atan2f+0xa4>
 80070cc:	2300      	movs	r3, #0
 80070ce:	e7ef      	b.n	80070b0 <__ieee754_atan2f+0xa4>
 80070d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070d4:	e7be      	b.n	8007054 <__ieee754_atan2f+0x48>
 80070d6:	490c      	ldr	r1, [pc, #48]	; (8007108 <__ieee754_atan2f+0xfc>)
 80070d8:	4618      	mov	r0, r3
 80070da:	f7f9 fc5d 	bl	8000998 <__addsf3>
 80070de:	4601      	mov	r1, r0
 80070e0:	480a      	ldr	r0, [pc, #40]	; (800710c <__ieee754_atan2f+0x100>)
 80070e2:	f7f9 fc57 	bl	8000994 <__aeabi_fsub>
 80070e6:	e7a1      	b.n	800702c <__ieee754_atan2f+0x20>
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <__ieee754_atan2f+0x100>)
 80070ea:	e7b3      	b.n	8007054 <__ieee754_atan2f+0x48>
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <__ieee754_atan2f+0x108>)
 80070ee:	e7b1      	b.n	8007054 <__ieee754_atan2f+0x48>
 80070f0:	2300      	movs	r3, #0
 80070f2:	e7af      	b.n	8007054 <__ieee754_atan2f+0x48>
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <__ieee754_atan2f+0x104>)
 80070f6:	e7ad      	b.n	8007054 <__ieee754_atan2f+0x48>
 80070f8:	c0490fdb 	.word	0xc0490fdb
 80070fc:	bfc90fdb 	.word	0xbfc90fdb
 8007100:	08008f24 	.word	0x08008f24
 8007104:	08008f30 	.word	0x08008f30
 8007108:	33bbbd2e 	.word	0x33bbbd2e
 800710c:	40490fdb 	.word	0x40490fdb
 8007110:	3fc90fdb 	.word	0x3fc90fdb
 8007114:	3f490fdb 	.word	0x3f490fdb

08007118 <__ieee754_sqrtf>:
 8007118:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800711c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4603      	mov	r3, r0
 8007124:	4604      	mov	r4, r0
 8007126:	d309      	bcc.n	800713c <__ieee754_sqrtf+0x24>
 8007128:	4601      	mov	r1, r0
 800712a:	f7f9 fd3d 	bl	8000ba8 <__aeabi_fmul>
 800712e:	4601      	mov	r1, r0
 8007130:	4620      	mov	r0, r4
 8007132:	f7f9 fc31 	bl	8000998 <__addsf3>
 8007136:	4604      	mov	r4, r0
 8007138:	4620      	mov	r0, r4
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	2a00      	cmp	r2, #0
 800713e:	d0fb      	beq.n	8007138 <__ieee754_sqrtf+0x20>
 8007140:	2800      	cmp	r0, #0
 8007142:	da06      	bge.n	8007152 <__ieee754_sqrtf+0x3a>
 8007144:	4601      	mov	r1, r0
 8007146:	f7f9 fc25 	bl	8000994 <__aeabi_fsub>
 800714a:	4601      	mov	r1, r0
 800714c:	f7f9 fde0 	bl	8000d10 <__aeabi_fdiv>
 8007150:	e7f1      	b.n	8007136 <__ieee754_sqrtf+0x1e>
 8007152:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8007156:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800715a:	d029      	beq.n	80071b0 <__ieee754_sqrtf+0x98>
 800715c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8007160:	07cb      	lsls	r3, r1, #31
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800716a:	f04f 0419 	mov.w	r4, #25
 800716e:	461e      	mov	r6, r3
 8007170:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007174:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007178:	bf58      	it	pl
 800717a:	0052      	lslpl	r2, r2, #1
 800717c:	1040      	asrs	r0, r0, #1
 800717e:	0052      	lsls	r2, r2, #1
 8007180:	1875      	adds	r5, r6, r1
 8007182:	4295      	cmp	r5, r2
 8007184:	bfde      	ittt	le
 8007186:	186e      	addle	r6, r5, r1
 8007188:	1b52      	suble	r2, r2, r5
 800718a:	185b      	addle	r3, r3, r1
 800718c:	3c01      	subs	r4, #1
 800718e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007192:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007196:	d1f3      	bne.n	8007180 <__ieee754_sqrtf+0x68>
 8007198:	b112      	cbz	r2, 80071a0 <__ieee754_sqrtf+0x88>
 800719a:	3301      	adds	r3, #1
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	105c      	asrs	r4, r3, #1
 80071a2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80071a6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80071aa:	e7c5      	b.n	8007138 <__ieee754_sqrtf+0x20>
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	3201      	adds	r2, #1
 80071b0:	0218      	lsls	r0, r3, #8
 80071b2:	d5fb      	bpl.n	80071ac <__ieee754_sqrtf+0x94>
 80071b4:	3a01      	subs	r2, #1
 80071b6:	1a89      	subs	r1, r1, r2
 80071b8:	e7d0      	b.n	800715c <__ieee754_sqrtf+0x44>
	...

080071bc <atanf>:
 80071bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80071c4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80071c8:	4604      	mov	r4, r0
 80071ca:	4680      	mov	r8, r0
 80071cc:	db0e      	blt.n	80071ec <atanf+0x30>
 80071ce:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80071d2:	dd04      	ble.n	80071de <atanf+0x22>
 80071d4:	4601      	mov	r1, r0
 80071d6:	f7f9 fbdf 	bl	8000998 <__addsf3>
 80071da:	4604      	mov	r4, r0
 80071dc:	e003      	b.n	80071e6 <atanf+0x2a>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f300 80ce 	bgt.w	8007380 <atanf+0x1c4>
 80071e4:	4c67      	ldr	r4, [pc, #412]	; (8007384 <atanf+0x1c8>)
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	4b66      	ldr	r3, [pc, #408]	; (8007388 <atanf+0x1cc>)
 80071ee:	429d      	cmp	r5, r3
 80071f0:	dc0e      	bgt.n	8007210 <atanf+0x54>
 80071f2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80071f6:	da08      	bge.n	800720a <atanf+0x4e>
 80071f8:	4964      	ldr	r1, [pc, #400]	; (800738c <atanf+0x1d0>)
 80071fa:	f7f9 fbcd 	bl	8000998 <__addsf3>
 80071fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007202:	f7f9 fe8d 	bl	8000f20 <__aeabi_fcmpgt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d1ed      	bne.n	80071e6 <atanf+0x2a>
 800720a:	f04f 36ff 	mov.w	r6, #4294967295
 800720e:	e01c      	b.n	800724a <atanf+0x8e>
 8007210:	f000 f8e0 	bl	80073d4 <fabsf>
 8007214:	4b5e      	ldr	r3, [pc, #376]	; (8007390 <atanf+0x1d4>)
 8007216:	4604      	mov	r4, r0
 8007218:	429d      	cmp	r5, r3
 800721a:	dc7c      	bgt.n	8007316 <atanf+0x15a>
 800721c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007220:	429d      	cmp	r5, r3
 8007222:	dc67      	bgt.n	80072f4 <atanf+0x138>
 8007224:	4601      	mov	r1, r0
 8007226:	f7f9 fbb7 	bl	8000998 <__addsf3>
 800722a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800722e:	f7f9 fbb1 	bl	8000994 <__aeabi_fsub>
 8007232:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007236:	4605      	mov	r5, r0
 8007238:	4620      	mov	r0, r4
 800723a:	f7f9 fbad 	bl	8000998 <__addsf3>
 800723e:	4601      	mov	r1, r0
 8007240:	4628      	mov	r0, r5
 8007242:	f7f9 fd65 	bl	8000d10 <__aeabi_fdiv>
 8007246:	2600      	movs	r6, #0
 8007248:	4604      	mov	r4, r0
 800724a:	4621      	mov	r1, r4
 800724c:	4620      	mov	r0, r4
 800724e:	f7f9 fcab 	bl	8000ba8 <__aeabi_fmul>
 8007252:	4601      	mov	r1, r0
 8007254:	4607      	mov	r7, r0
 8007256:	f7f9 fca7 	bl	8000ba8 <__aeabi_fmul>
 800725a:	4605      	mov	r5, r0
 800725c:	494d      	ldr	r1, [pc, #308]	; (8007394 <atanf+0x1d8>)
 800725e:	f7f9 fca3 	bl	8000ba8 <__aeabi_fmul>
 8007262:	494d      	ldr	r1, [pc, #308]	; (8007398 <atanf+0x1dc>)
 8007264:	f7f9 fb98 	bl	8000998 <__addsf3>
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fc9d 	bl	8000ba8 <__aeabi_fmul>
 800726e:	494b      	ldr	r1, [pc, #300]	; (800739c <atanf+0x1e0>)
 8007270:	f7f9 fb92 	bl	8000998 <__addsf3>
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 fc97 	bl	8000ba8 <__aeabi_fmul>
 800727a:	4949      	ldr	r1, [pc, #292]	; (80073a0 <atanf+0x1e4>)
 800727c:	f7f9 fb8c 	bl	8000998 <__addsf3>
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 fc91 	bl	8000ba8 <__aeabi_fmul>
 8007286:	4947      	ldr	r1, [pc, #284]	; (80073a4 <atanf+0x1e8>)
 8007288:	f7f9 fb86 	bl	8000998 <__addsf3>
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 fc8b 	bl	8000ba8 <__aeabi_fmul>
 8007292:	4945      	ldr	r1, [pc, #276]	; (80073a8 <atanf+0x1ec>)
 8007294:	f7f9 fb80 	bl	8000998 <__addsf3>
 8007298:	4639      	mov	r1, r7
 800729a:	f7f9 fc85 	bl	8000ba8 <__aeabi_fmul>
 800729e:	4943      	ldr	r1, [pc, #268]	; (80073ac <atanf+0x1f0>)
 80072a0:	4607      	mov	r7, r0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7f9 fc80 	bl	8000ba8 <__aeabi_fmul>
 80072a8:	4941      	ldr	r1, [pc, #260]	; (80073b0 <atanf+0x1f4>)
 80072aa:	f7f9 fb73 	bl	8000994 <__aeabi_fsub>
 80072ae:	4629      	mov	r1, r5
 80072b0:	f7f9 fc7a 	bl	8000ba8 <__aeabi_fmul>
 80072b4:	493f      	ldr	r1, [pc, #252]	; (80073b4 <atanf+0x1f8>)
 80072b6:	f7f9 fb6d 	bl	8000994 <__aeabi_fsub>
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7f9 fc74 	bl	8000ba8 <__aeabi_fmul>
 80072c0:	493d      	ldr	r1, [pc, #244]	; (80073b8 <atanf+0x1fc>)
 80072c2:	f7f9 fb67 	bl	8000994 <__aeabi_fsub>
 80072c6:	4629      	mov	r1, r5
 80072c8:	f7f9 fc6e 	bl	8000ba8 <__aeabi_fmul>
 80072cc:	493b      	ldr	r1, [pc, #236]	; (80073bc <atanf+0x200>)
 80072ce:	f7f9 fb61 	bl	8000994 <__aeabi_fsub>
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f9 fc68 	bl	8000ba8 <__aeabi_fmul>
 80072d8:	4601      	mov	r1, r0
 80072da:	4638      	mov	r0, r7
 80072dc:	f7f9 fb5c 	bl	8000998 <__addsf3>
 80072e0:	4621      	mov	r1, r4
 80072e2:	f7f9 fc61 	bl	8000ba8 <__aeabi_fmul>
 80072e6:	1c73      	adds	r3, r6, #1
 80072e8:	4601      	mov	r1, r0
 80072ea:	d133      	bne.n	8007354 <atanf+0x198>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7f9 fb51 	bl	8000994 <__aeabi_fsub>
 80072f2:	e772      	b.n	80071da <atanf+0x1e>
 80072f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80072f8:	f7f9 fb4c 	bl	8000994 <__aeabi_fsub>
 80072fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007300:	4605      	mov	r5, r0
 8007302:	4620      	mov	r0, r4
 8007304:	f7f9 fb48 	bl	8000998 <__addsf3>
 8007308:	4601      	mov	r1, r0
 800730a:	4628      	mov	r0, r5
 800730c:	f7f9 fd00 	bl	8000d10 <__aeabi_fdiv>
 8007310:	2601      	movs	r6, #1
 8007312:	4604      	mov	r4, r0
 8007314:	e799      	b.n	800724a <atanf+0x8e>
 8007316:	4b2a      	ldr	r3, [pc, #168]	; (80073c0 <atanf+0x204>)
 8007318:	429d      	cmp	r5, r3
 800731a:	dc14      	bgt.n	8007346 <atanf+0x18a>
 800731c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8007320:	f7f9 fb38 	bl	8000994 <__aeabi_fsub>
 8007324:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8007328:	4605      	mov	r5, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f7f9 fc3c 	bl	8000ba8 <__aeabi_fmul>
 8007330:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007334:	f7f9 fb30 	bl	8000998 <__addsf3>
 8007338:	4601      	mov	r1, r0
 800733a:	4628      	mov	r0, r5
 800733c:	f7f9 fce8 	bl	8000d10 <__aeabi_fdiv>
 8007340:	2602      	movs	r6, #2
 8007342:	4604      	mov	r4, r0
 8007344:	e781      	b.n	800724a <atanf+0x8e>
 8007346:	4601      	mov	r1, r0
 8007348:	481e      	ldr	r0, [pc, #120]	; (80073c4 <atanf+0x208>)
 800734a:	f7f9 fce1 	bl	8000d10 <__aeabi_fdiv>
 800734e:	2603      	movs	r6, #3
 8007350:	4604      	mov	r4, r0
 8007352:	e77a      	b.n	800724a <atanf+0x8e>
 8007354:	4b1c      	ldr	r3, [pc, #112]	; (80073c8 <atanf+0x20c>)
 8007356:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800735a:	f7f9 fb1b 	bl	8000994 <__aeabi_fsub>
 800735e:	4621      	mov	r1, r4
 8007360:	f7f9 fb18 	bl	8000994 <__aeabi_fsub>
 8007364:	4b19      	ldr	r3, [pc, #100]	; (80073cc <atanf+0x210>)
 8007366:	4601      	mov	r1, r0
 8007368:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800736c:	f7f9 fb12 	bl	8000994 <__aeabi_fsub>
 8007370:	f1b8 0f00 	cmp.w	r8, #0
 8007374:	4604      	mov	r4, r0
 8007376:	f6bf af36 	bge.w	80071e6 <atanf+0x2a>
 800737a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800737e:	e72c      	b.n	80071da <atanf+0x1e>
 8007380:	4c13      	ldr	r4, [pc, #76]	; (80073d0 <atanf+0x214>)
 8007382:	e730      	b.n	80071e6 <atanf+0x2a>
 8007384:	bfc90fdb 	.word	0xbfc90fdb
 8007388:	3edfffff 	.word	0x3edfffff
 800738c:	7149f2ca 	.word	0x7149f2ca
 8007390:	3f97ffff 	.word	0x3f97ffff
 8007394:	3c8569d7 	.word	0x3c8569d7
 8007398:	3d4bda59 	.word	0x3d4bda59
 800739c:	3d886b35 	.word	0x3d886b35
 80073a0:	3dba2e6e 	.word	0x3dba2e6e
 80073a4:	3e124925 	.word	0x3e124925
 80073a8:	3eaaaaab 	.word	0x3eaaaaab
 80073ac:	bd15a221 	.word	0xbd15a221
 80073b0:	3d6ef16b 	.word	0x3d6ef16b
 80073b4:	3d9d8795 	.word	0x3d9d8795
 80073b8:	3de38e38 	.word	0x3de38e38
 80073bc:	3e4ccccd 	.word	0x3e4ccccd
 80073c0:	401bffff 	.word	0x401bffff
 80073c4:	bf800000 	.word	0xbf800000
 80073c8:	08008f4c 	.word	0x08008f4c
 80073cc:	08008f3c 	.word	0x08008f3c
 80073d0:	3fc90fdb 	.word	0x3fc90fdb

080073d4 <fabsf>:
 80073d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80073d8:	4770      	bx	lr
	...

080073dc <nanf>:
 80073dc:	4800      	ldr	r0, [pc, #0]	; (80073e0 <nanf+0x4>)
 80073de:	4770      	bx	lr
 80073e0:	7fc00000 	.word	0x7fc00000

080073e4 <__errno>:
 80073e4:	4b01      	ldr	r3, [pc, #4]	; (80073ec <__errno+0x8>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	2000004c 	.word	0x2000004c

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	2600      	movs	r6, #0
 80073f4:	4d0c      	ldr	r5, [pc, #48]	; (8007428 <__libc_init_array+0x38>)
 80073f6:	4c0d      	ldr	r4, [pc, #52]	; (800742c <__libc_init_array+0x3c>)
 80073f8:	1b64      	subs	r4, r4, r5
 80073fa:	10a4      	asrs	r4, r4, #2
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	f000 fcf2 	bl	8007de8 <_init>
 8007404:	2600      	movs	r6, #0
 8007406:	4d0a      	ldr	r5, [pc, #40]	; (8007430 <__libc_init_array+0x40>)
 8007408:	4c0a      	ldr	r4, [pc, #40]	; (8007434 <__libc_init_array+0x44>)
 800740a:	1b64      	subs	r4, r4, r5
 800740c:	10a4      	asrs	r4, r4, #2
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	08008fc0 	.word	0x08008fc0
 800742c:	08008fc0 	.word	0x08008fc0
 8007430:	08008fc0 	.word	0x08008fc0
 8007434:	08008fc4 	.word	0x08008fc4

08007438 <memcmp>:
 8007438:	b530      	push	{r4, r5, lr}
 800743a:	2400      	movs	r4, #0
 800743c:	3901      	subs	r1, #1
 800743e:	42a2      	cmp	r2, r4
 8007440:	d101      	bne.n	8007446 <memcmp+0xe>
 8007442:	2000      	movs	r0, #0
 8007444:	e005      	b.n	8007452 <memcmp+0x1a>
 8007446:	5d03      	ldrb	r3, [r0, r4]
 8007448:	3401      	adds	r4, #1
 800744a:	5d0d      	ldrb	r5, [r1, r4]
 800744c:	42ab      	cmp	r3, r5
 800744e:	d0f6      	beq.n	800743e <memcmp+0x6>
 8007450:	1b58      	subs	r0, r3, r5
 8007452:	bd30      	pop	{r4, r5, pc}

08007454 <memset>:
 8007454:	4603      	mov	r3, r0
 8007456:	4402      	add	r2, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <_puts_r>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	460e      	mov	r6, r1
 8007468:	4605      	mov	r5, r0
 800746a:	b118      	cbz	r0, 8007474 <_puts_r+0x10>
 800746c:	6983      	ldr	r3, [r0, #24]
 800746e:	b90b      	cbnz	r3, 8007474 <_puts_r+0x10>
 8007470:	f000 fa48 	bl	8007904 <__sinit>
 8007474:	69ab      	ldr	r3, [r5, #24]
 8007476:	68ac      	ldr	r4, [r5, #8]
 8007478:	b913      	cbnz	r3, 8007480 <_puts_r+0x1c>
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fa42 	bl	8007904 <__sinit>
 8007480:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <_puts_r+0xd0>)
 8007482:	429c      	cmp	r4, r3
 8007484:	d120      	bne.n	80074c8 <_puts_r+0x64>
 8007486:	686c      	ldr	r4, [r5, #4]
 8007488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d405      	bmi.n	800749a <_puts_r+0x36>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	0598      	lsls	r0, r3, #22
 8007492:	d402      	bmi.n	800749a <_puts_r+0x36>
 8007494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007496:	f000 fad3 	bl	8007a40 <__retarget_lock_acquire_recursive>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d51d      	bpl.n	80074dc <_puts_r+0x78>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	b1db      	cbz	r3, 80074dc <_puts_r+0x78>
 80074a4:	3e01      	subs	r6, #1
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ac:	3b01      	subs	r3, #1
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	bb39      	cbnz	r1, 8007502 <_puts_r+0x9e>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da38      	bge.n	8007528 <_puts_r+0xc4>
 80074b6:	4622      	mov	r2, r4
 80074b8:	210a      	movs	r1, #10
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 f848 	bl	8007550 <__swbuf_r>
 80074c0:	3001      	adds	r0, #1
 80074c2:	d011      	beq.n	80074e8 <_puts_r+0x84>
 80074c4:	250a      	movs	r5, #10
 80074c6:	e011      	b.n	80074ec <_puts_r+0x88>
 80074c8:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <_puts_r+0xd4>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	d101      	bne.n	80074d2 <_puts_r+0x6e>
 80074ce:	68ac      	ldr	r4, [r5, #8]
 80074d0:	e7da      	b.n	8007488 <_puts_r+0x24>
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <_puts_r+0xd8>)
 80074d4:	429c      	cmp	r4, r3
 80074d6:	bf08      	it	eq
 80074d8:	68ec      	ldreq	r4, [r5, #12]
 80074da:	e7d5      	b.n	8007488 <_puts_r+0x24>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f888 	bl	80075f4 <__swsetup_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0dd      	beq.n	80074a4 <_puts_r+0x40>
 80074e8:	f04f 35ff 	mov.w	r5, #4294967295
 80074ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074ee:	07da      	lsls	r2, r3, #31
 80074f0:	d405      	bmi.n	80074fe <_puts_r+0x9a>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	059b      	lsls	r3, r3, #22
 80074f6:	d402      	bmi.n	80074fe <_puts_r+0x9a>
 80074f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074fa:	f000 faa2 	bl	8007a42 <__retarget_lock_release_recursive>
 80074fe:	4628      	mov	r0, r5
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	2b00      	cmp	r3, #0
 8007504:	da04      	bge.n	8007510 <_puts_r+0xac>
 8007506:	69a2      	ldr	r2, [r4, #24]
 8007508:	429a      	cmp	r2, r3
 800750a:	dc06      	bgt.n	800751a <_puts_r+0xb6>
 800750c:	290a      	cmp	r1, #10
 800750e:	d004      	beq.n	800751a <_puts_r+0xb6>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	7019      	strb	r1, [r3, #0]
 8007518:	e7c5      	b.n	80074a6 <_puts_r+0x42>
 800751a:	4622      	mov	r2, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f000 f817 	bl	8007550 <__swbuf_r>
 8007522:	3001      	adds	r0, #1
 8007524:	d1bf      	bne.n	80074a6 <_puts_r+0x42>
 8007526:	e7df      	b.n	80074e8 <_puts_r+0x84>
 8007528:	250a      	movs	r5, #10
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	701d      	strb	r5, [r3, #0]
 8007532:	e7db      	b.n	80074ec <_puts_r+0x88>
 8007534:	08008f80 	.word	0x08008f80
 8007538:	08008fa0 	.word	0x08008fa0
 800753c:	08008f60 	.word	0x08008f60

08007540 <puts>:
 8007540:	4b02      	ldr	r3, [pc, #8]	; (800754c <puts+0xc>)
 8007542:	4601      	mov	r1, r0
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	f7ff bf8d 	b.w	8007464 <_puts_r>
 800754a:	bf00      	nop
 800754c:	2000004c 	.word	0x2000004c

08007550 <__swbuf_r>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	460e      	mov	r6, r1
 8007554:	4614      	mov	r4, r2
 8007556:	4605      	mov	r5, r0
 8007558:	b118      	cbz	r0, 8007562 <__swbuf_r+0x12>
 800755a:	6983      	ldr	r3, [r0, #24]
 800755c:	b90b      	cbnz	r3, 8007562 <__swbuf_r+0x12>
 800755e:	f000 f9d1 	bl	8007904 <__sinit>
 8007562:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <__swbuf_r+0x98>)
 8007564:	429c      	cmp	r4, r3
 8007566:	d12b      	bne.n	80075c0 <__swbuf_r+0x70>
 8007568:	686c      	ldr	r4, [r5, #4]
 800756a:	69a3      	ldr	r3, [r4, #24]
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	071a      	lsls	r2, r3, #28
 8007572:	d52f      	bpl.n	80075d4 <__swbuf_r+0x84>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	b36b      	cbz	r3, 80075d4 <__swbuf_r+0x84>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	b2f6      	uxtb	r6, r6
 800757e:	1ac0      	subs	r0, r0, r3
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	4637      	mov	r7, r6
 8007584:	4283      	cmp	r3, r0
 8007586:	dc04      	bgt.n	8007592 <__swbuf_r+0x42>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f926 	bl	80077dc <_fflush_r>
 8007590:	bb30      	cbnz	r0, 80075e0 <__swbuf_r+0x90>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	3001      	adds	r0, #1
 8007596:	3b01      	subs	r3, #1
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	701e      	strb	r6, [r3, #0]
 80075a2:	6963      	ldr	r3, [r4, #20]
 80075a4:	4283      	cmp	r3, r0
 80075a6:	d004      	beq.n	80075b2 <__swbuf_r+0x62>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d506      	bpl.n	80075bc <__swbuf_r+0x6c>
 80075ae:	2e0a      	cmp	r6, #10
 80075b0:	d104      	bne.n	80075bc <__swbuf_r+0x6c>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f911 	bl	80077dc <_fflush_r>
 80075ba:	b988      	cbnz	r0, 80075e0 <__swbuf_r+0x90>
 80075bc:	4638      	mov	r0, r7
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <__swbuf_r+0x9c>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <__swbuf_r+0x7a>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7cf      	b.n	800756a <__swbuf_r+0x1a>
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <__swbuf_r+0xa0>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7ca      	b.n	800756a <__swbuf_r+0x1a>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f80c 	bl	80075f4 <__swsetup_r>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d0cb      	beq.n	8007578 <__swbuf_r+0x28>
 80075e0:	f04f 37ff 	mov.w	r7, #4294967295
 80075e4:	e7ea      	b.n	80075bc <__swbuf_r+0x6c>
 80075e6:	bf00      	nop
 80075e8:	08008f80 	.word	0x08008f80
 80075ec:	08008fa0 	.word	0x08008fa0
 80075f0:	08008f60 	.word	0x08008f60

080075f4 <__swsetup_r>:
 80075f4:	4b32      	ldr	r3, [pc, #200]	; (80076c0 <__swsetup_r+0xcc>)
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	4606      	mov	r6, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	b125      	cbz	r5, 800760a <__swsetup_r+0x16>
 8007600:	69ab      	ldr	r3, [r5, #24]
 8007602:	b913      	cbnz	r3, 800760a <__swsetup_r+0x16>
 8007604:	4628      	mov	r0, r5
 8007606:	f000 f97d 	bl	8007904 <__sinit>
 800760a:	4b2e      	ldr	r3, [pc, #184]	; (80076c4 <__swsetup_r+0xd0>)
 800760c:	429c      	cmp	r4, r3
 800760e:	d10f      	bne.n	8007630 <__swsetup_r+0x3c>
 8007610:	686c      	ldr	r4, [r5, #4]
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d42c      	bmi.n	8007676 <__swsetup_r+0x82>
 800761c:	06dd      	lsls	r5, r3, #27
 800761e:	d411      	bmi.n	8007644 <__swsetup_r+0x50>
 8007620:	2309      	movs	r3, #9
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	e03e      	b.n	80076ae <__swsetup_r+0xba>
 8007630:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <__swsetup_r+0xd4>)
 8007632:	429c      	cmp	r4, r3
 8007634:	d101      	bne.n	800763a <__swsetup_r+0x46>
 8007636:	68ac      	ldr	r4, [r5, #8]
 8007638:	e7eb      	b.n	8007612 <__swsetup_r+0x1e>
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <__swsetup_r+0xd8>)
 800763c:	429c      	cmp	r4, r3
 800763e:	bf08      	it	eq
 8007640:	68ec      	ldreq	r4, [r5, #12]
 8007642:	e7e6      	b.n	8007612 <__swsetup_r+0x1e>
 8007644:	0758      	lsls	r0, r3, #29
 8007646:	d512      	bpl.n	800766e <__swsetup_r+0x7a>
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	b141      	cbz	r1, 800765e <__swsetup_r+0x6a>
 800764c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007650:	4299      	cmp	r1, r3
 8007652:	d002      	beq.n	800765a <__swsetup_r+0x66>
 8007654:	4630      	mov	r0, r6
 8007656:	f000 fa59 	bl	8007b0c <_free_r>
 800765a:	2300      	movs	r3, #0
 800765c:	6363      	str	r3, [r4, #52]	; 0x34
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	2300      	movs	r3, #0
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f043 0308 	orr.w	r3, r3, #8
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	b94b      	cbnz	r3, 800768e <__swsetup_r+0x9a>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007684:	d003      	beq.n	800768e <__swsetup_r+0x9a>
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f9ff 	bl	8007a8c <__smakebuf_r>
 800768e:	89a0      	ldrh	r0, [r4, #12]
 8007690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007694:	f010 0301 	ands.w	r3, r0, #1
 8007698:	d00a      	beq.n	80076b0 <__swsetup_r+0xbc>
 800769a:	2300      	movs	r3, #0
 800769c:	60a3      	str	r3, [r4, #8]
 800769e:	6963      	ldr	r3, [r4, #20]
 80076a0:	425b      	negs	r3, r3
 80076a2:	61a3      	str	r3, [r4, #24]
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	b943      	cbnz	r3, 80076ba <__swsetup_r+0xc6>
 80076a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076ac:	d1ba      	bne.n	8007624 <__swsetup_r+0x30>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	0781      	lsls	r1, r0, #30
 80076b2:	bf58      	it	pl
 80076b4:	6963      	ldrpl	r3, [r4, #20]
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	e7f4      	b.n	80076a4 <__swsetup_r+0xb0>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e7f7      	b.n	80076ae <__swsetup_r+0xba>
 80076be:	bf00      	nop
 80076c0:	2000004c 	.word	0x2000004c
 80076c4:	08008f80 	.word	0x08008f80
 80076c8:	08008fa0 	.word	0x08008fa0
 80076cc:	08008f60 	.word	0x08008f60

080076d0 <__sflush_r>:
 80076d0:	898a      	ldrh	r2, [r1, #12]
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	4605      	mov	r5, r0
 80076d8:	0710      	lsls	r0, r2, #28
 80076da:	460c      	mov	r4, r1
 80076dc:	d458      	bmi.n	8007790 <__sflush_r+0xc0>
 80076de:	684b      	ldr	r3, [r1, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc05      	bgt.n	80076f0 <__sflush_r+0x20>
 80076e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc02      	bgt.n	80076f0 <__sflush_r+0x20>
 80076ea:	2000      	movs	r0, #0
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d0f9      	beq.n	80076ea <__sflush_r+0x1a>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076fc:	682f      	ldr	r7, [r5, #0]
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	d032      	beq.n	8007768 <__sflush_r+0x98>
 8007702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	075a      	lsls	r2, r3, #29
 8007708:	d505      	bpl.n	8007716 <__sflush_r+0x46>
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	1ac0      	subs	r0, r0, r3
 800770e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007710:	b10b      	cbz	r3, 8007716 <__sflush_r+0x46>
 8007712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007714:	1ac0      	subs	r0, r0, r3
 8007716:	2300      	movs	r3, #0
 8007718:	4602      	mov	r2, r0
 800771a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771c:	4628      	mov	r0, r5
 800771e:	6a21      	ldr	r1, [r4, #32]
 8007720:	47b0      	blx	r6
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	d106      	bne.n	8007736 <__sflush_r+0x66>
 8007728:	6829      	ldr	r1, [r5, #0]
 800772a:	291d      	cmp	r1, #29
 800772c:	d82c      	bhi.n	8007788 <__sflush_r+0xb8>
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <__sflush_r+0x108>)
 8007730:	40ca      	lsrs	r2, r1
 8007732:	07d6      	lsls	r6, r2, #31
 8007734:	d528      	bpl.n	8007788 <__sflush_r+0xb8>
 8007736:	2200      	movs	r2, #0
 8007738:	6062      	str	r2, [r4, #4]
 800773a:	6922      	ldr	r2, [r4, #16]
 800773c:	04d9      	lsls	r1, r3, #19
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	d504      	bpl.n	800774c <__sflush_r+0x7c>
 8007742:	1c42      	adds	r2, r0, #1
 8007744:	d101      	bne.n	800774a <__sflush_r+0x7a>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	b903      	cbnz	r3, 800774c <__sflush_r+0x7c>
 800774a:	6560      	str	r0, [r4, #84]	; 0x54
 800774c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800774e:	602f      	str	r7, [r5, #0]
 8007750:	2900      	cmp	r1, #0
 8007752:	d0ca      	beq.n	80076ea <__sflush_r+0x1a>
 8007754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007758:	4299      	cmp	r1, r3
 800775a:	d002      	beq.n	8007762 <__sflush_r+0x92>
 800775c:	4628      	mov	r0, r5
 800775e:	f000 f9d5 	bl	8007b0c <_free_r>
 8007762:	2000      	movs	r0, #0
 8007764:	6360      	str	r0, [r4, #52]	; 0x34
 8007766:	e7c1      	b.n	80076ec <__sflush_r+0x1c>
 8007768:	6a21      	ldr	r1, [r4, #32]
 800776a:	2301      	movs	r3, #1
 800776c:	4628      	mov	r0, r5
 800776e:	47b0      	blx	r6
 8007770:	1c41      	adds	r1, r0, #1
 8007772:	d1c7      	bne.n	8007704 <__sflush_r+0x34>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0c4      	beq.n	8007704 <__sflush_r+0x34>
 800777a:	2b1d      	cmp	r3, #29
 800777c:	d001      	beq.n	8007782 <__sflush_r+0xb2>
 800777e:	2b16      	cmp	r3, #22
 8007780:	d101      	bne.n	8007786 <__sflush_r+0xb6>
 8007782:	602f      	str	r7, [r5, #0]
 8007784:	e7b1      	b.n	80076ea <__sflush_r+0x1a>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	e7ad      	b.n	80076ec <__sflush_r+0x1c>
 8007790:	690f      	ldr	r7, [r1, #16]
 8007792:	2f00      	cmp	r7, #0
 8007794:	d0a9      	beq.n	80076ea <__sflush_r+0x1a>
 8007796:	0793      	lsls	r3, r2, #30
 8007798:	bf18      	it	ne
 800779a:	2300      	movne	r3, #0
 800779c:	680e      	ldr	r6, [r1, #0]
 800779e:	bf08      	it	eq
 80077a0:	694b      	ldreq	r3, [r1, #20]
 80077a2:	eba6 0807 	sub.w	r8, r6, r7
 80077a6:	600f      	str	r7, [r1, #0]
 80077a8:	608b      	str	r3, [r1, #8]
 80077aa:	f1b8 0f00 	cmp.w	r8, #0
 80077ae:	dd9c      	ble.n	80076ea <__sflush_r+0x1a>
 80077b0:	4643      	mov	r3, r8
 80077b2:	463a      	mov	r2, r7
 80077b4:	4628      	mov	r0, r5
 80077b6:	6a21      	ldr	r1, [r4, #32]
 80077b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077ba:	47b0      	blx	r6
 80077bc:	2800      	cmp	r0, #0
 80077be:	dc06      	bgt.n	80077ce <__sflush_r+0xfe>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295
 80077c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	e78e      	b.n	80076ec <__sflush_r+0x1c>
 80077ce:	4407      	add	r7, r0
 80077d0:	eba8 0800 	sub.w	r8, r8, r0
 80077d4:	e7e9      	b.n	80077aa <__sflush_r+0xda>
 80077d6:	bf00      	nop
 80077d8:	20400001 	.word	0x20400001

080077dc <_fflush_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	690b      	ldr	r3, [r1, #16]
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b913      	cbnz	r3, 80077ec <_fflush_r+0x10>
 80077e6:	2500      	movs	r5, #0
 80077e8:	4628      	mov	r0, r5
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	b118      	cbz	r0, 80077f6 <_fflush_r+0x1a>
 80077ee:	6983      	ldr	r3, [r0, #24]
 80077f0:	b90b      	cbnz	r3, 80077f6 <_fflush_r+0x1a>
 80077f2:	f000 f887 	bl	8007904 <__sinit>
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <_fflush_r+0x6c>)
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d11b      	bne.n	8007834 <_fflush_r+0x58>
 80077fc:	686c      	ldr	r4, [r5, #4]
 80077fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0ef      	beq.n	80077e6 <_fflush_r+0xa>
 8007806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007808:	07d0      	lsls	r0, r2, #31
 800780a:	d404      	bmi.n	8007816 <_fflush_r+0x3a>
 800780c:	0599      	lsls	r1, r3, #22
 800780e:	d402      	bmi.n	8007816 <_fflush_r+0x3a>
 8007810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007812:	f000 f915 	bl	8007a40 <__retarget_lock_acquire_recursive>
 8007816:	4628      	mov	r0, r5
 8007818:	4621      	mov	r1, r4
 800781a:	f7ff ff59 	bl	80076d0 <__sflush_r>
 800781e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007820:	4605      	mov	r5, r0
 8007822:	07da      	lsls	r2, r3, #31
 8007824:	d4e0      	bmi.n	80077e8 <_fflush_r+0xc>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	059b      	lsls	r3, r3, #22
 800782a:	d4dd      	bmi.n	80077e8 <_fflush_r+0xc>
 800782c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800782e:	f000 f908 	bl	8007a42 <__retarget_lock_release_recursive>
 8007832:	e7d9      	b.n	80077e8 <_fflush_r+0xc>
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <_fflush_r+0x70>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <_fflush_r+0x62>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7df      	b.n	80077fe <_fflush_r+0x22>
 800783e:	4b04      	ldr	r3, [pc, #16]	; (8007850 <_fflush_r+0x74>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7da      	b.n	80077fe <_fflush_r+0x22>
 8007848:	08008f80 	.word	0x08008f80
 800784c:	08008fa0 	.word	0x08008fa0
 8007850:	08008f60 	.word	0x08008f60

08007854 <std>:
 8007854:	2300      	movs	r3, #0
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
 800785a:	e9c0 3300 	strd	r3, r3, [r0]
 800785e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007862:	6083      	str	r3, [r0, #8]
 8007864:	8181      	strh	r1, [r0, #12]
 8007866:	6643      	str	r3, [r0, #100]	; 0x64
 8007868:	81c2      	strh	r2, [r0, #14]
 800786a:	6183      	str	r3, [r0, #24]
 800786c:	4619      	mov	r1, r3
 800786e:	2208      	movs	r2, #8
 8007870:	305c      	adds	r0, #92	; 0x5c
 8007872:	f7ff fdef 	bl	8007454 <memset>
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <std+0x38>)
 8007878:	6224      	str	r4, [r4, #32]
 800787a:	6263      	str	r3, [r4, #36]	; 0x24
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <std+0x3c>)
 800787e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <std+0x40>)
 8007882:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <std+0x44>)
 8007886:	6323      	str	r3, [r4, #48]	; 0x30
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	08007c79 	.word	0x08007c79
 8007890:	08007c9b 	.word	0x08007c9b
 8007894:	08007cd3 	.word	0x08007cd3
 8007898:	08007cf7 	.word	0x08007cf7

0800789c <_cleanup_r>:
 800789c:	4901      	ldr	r1, [pc, #4]	; (80078a4 <_cleanup_r+0x8>)
 800789e:	f000 b8af 	b.w	8007a00 <_fwalk_reent>
 80078a2:	bf00      	nop
 80078a4:	080077dd 	.word	0x080077dd

080078a8 <__sfmoreglue>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	2568      	movs	r5, #104	; 0x68
 80078ac:	1e4a      	subs	r2, r1, #1
 80078ae:	4355      	muls	r5, r2
 80078b0:	460e      	mov	r6, r1
 80078b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078b6:	f000 f975 	bl	8007ba4 <_malloc_r>
 80078ba:	4604      	mov	r4, r0
 80078bc:	b140      	cbz	r0, 80078d0 <__sfmoreglue+0x28>
 80078be:	2100      	movs	r1, #0
 80078c0:	e9c0 1600 	strd	r1, r6, [r0]
 80078c4:	300c      	adds	r0, #12
 80078c6:	60a0      	str	r0, [r4, #8]
 80078c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078cc:	f7ff fdc2 	bl	8007454 <memset>
 80078d0:	4620      	mov	r0, r4
 80078d2:	bd70      	pop	{r4, r5, r6, pc}

080078d4 <__sfp_lock_acquire>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sfp_lock_acquire+0x8>)
 80078d6:	f000 b8b3 	b.w	8007a40 <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	200001d8 	.word	0x200001d8

080078e0 <__sfp_lock_release>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sfp_lock_release+0x8>)
 80078e2:	f000 b8ae 	b.w	8007a42 <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	200001d8 	.word	0x200001d8

080078ec <__sinit_lock_acquire>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__sinit_lock_acquire+0x8>)
 80078ee:	f000 b8a7 	b.w	8007a40 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	200001d3 	.word	0x200001d3

080078f8 <__sinit_lock_release>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__sinit_lock_release+0x8>)
 80078fa:	f000 b8a2 	b.w	8007a42 <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	200001d3 	.word	0x200001d3

08007904 <__sinit>:
 8007904:	b510      	push	{r4, lr}
 8007906:	4604      	mov	r4, r0
 8007908:	f7ff fff0 	bl	80078ec <__sinit_lock_acquire>
 800790c:	69a3      	ldr	r3, [r4, #24]
 800790e:	b11b      	cbz	r3, 8007918 <__sinit+0x14>
 8007910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007914:	f7ff bff0 	b.w	80078f8 <__sinit_lock_release>
 8007918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800791c:	6523      	str	r3, [r4, #80]	; 0x50
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <__sinit+0x68>)
 8007920:	4a13      	ldr	r2, [pc, #76]	; (8007970 <__sinit+0x6c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	62a2      	str	r2, [r4, #40]	; 0x28
 8007926:	42a3      	cmp	r3, r4
 8007928:	bf08      	it	eq
 800792a:	2301      	moveq	r3, #1
 800792c:	4620      	mov	r0, r4
 800792e:	bf08      	it	eq
 8007930:	61a3      	streq	r3, [r4, #24]
 8007932:	f000 f81f 	bl	8007974 <__sfp>
 8007936:	6060      	str	r0, [r4, #4]
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f81b 	bl	8007974 <__sfp>
 800793e:	60a0      	str	r0, [r4, #8]
 8007940:	4620      	mov	r0, r4
 8007942:	f000 f817 	bl	8007974 <__sfp>
 8007946:	2200      	movs	r2, #0
 8007948:	2104      	movs	r1, #4
 800794a:	60e0      	str	r0, [r4, #12]
 800794c:	6860      	ldr	r0, [r4, #4]
 800794e:	f7ff ff81 	bl	8007854 <std>
 8007952:	2201      	movs	r2, #1
 8007954:	2109      	movs	r1, #9
 8007956:	68a0      	ldr	r0, [r4, #8]
 8007958:	f7ff ff7c 	bl	8007854 <std>
 800795c:	2202      	movs	r2, #2
 800795e:	2112      	movs	r1, #18
 8007960:	68e0      	ldr	r0, [r4, #12]
 8007962:	f7ff ff77 	bl	8007854 <std>
 8007966:	2301      	movs	r3, #1
 8007968:	61a3      	str	r3, [r4, #24]
 800796a:	e7d1      	b.n	8007910 <__sinit+0xc>
 800796c:	08008f5c 	.word	0x08008f5c
 8007970:	0800789d 	.word	0x0800789d

08007974 <__sfp>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	4607      	mov	r7, r0
 8007978:	f7ff ffac 	bl	80078d4 <__sfp_lock_acquire>
 800797c:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <__sfp+0x84>)
 800797e:	681e      	ldr	r6, [r3, #0]
 8007980:	69b3      	ldr	r3, [r6, #24]
 8007982:	b913      	cbnz	r3, 800798a <__sfp+0x16>
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff ffbd 	bl	8007904 <__sinit>
 800798a:	3648      	adds	r6, #72	; 0x48
 800798c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007990:	3b01      	subs	r3, #1
 8007992:	d503      	bpl.n	800799c <__sfp+0x28>
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	b30b      	cbz	r3, 80079dc <__sfp+0x68>
 8007998:	6836      	ldr	r6, [r6, #0]
 800799a:	e7f7      	b.n	800798c <__sfp+0x18>
 800799c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079a0:	b9d5      	cbnz	r5, 80079d8 <__sfp+0x64>
 80079a2:	4b16      	ldr	r3, [pc, #88]	; (80079fc <__sfp+0x88>)
 80079a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079a8:	60e3      	str	r3, [r4, #12]
 80079aa:	6665      	str	r5, [r4, #100]	; 0x64
 80079ac:	f000 f847 	bl	8007a3e <__retarget_lock_init_recursive>
 80079b0:	f7ff ff96 	bl	80078e0 <__sfp_lock_release>
 80079b4:	2208      	movs	r2, #8
 80079b6:	4629      	mov	r1, r5
 80079b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079c0:	6025      	str	r5, [r4, #0]
 80079c2:	61a5      	str	r5, [r4, #24]
 80079c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079c8:	f7ff fd44 	bl	8007454 <memset>
 80079cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079d4:	4620      	mov	r0, r4
 80079d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d8:	3468      	adds	r4, #104	; 0x68
 80079da:	e7d9      	b.n	8007990 <__sfp+0x1c>
 80079dc:	2104      	movs	r1, #4
 80079de:	4638      	mov	r0, r7
 80079e0:	f7ff ff62 	bl	80078a8 <__sfmoreglue>
 80079e4:	4604      	mov	r4, r0
 80079e6:	6030      	str	r0, [r6, #0]
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d1d5      	bne.n	8007998 <__sfp+0x24>
 80079ec:	f7ff ff78 	bl	80078e0 <__sfp_lock_release>
 80079f0:	230c      	movs	r3, #12
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	e7ee      	b.n	80079d4 <__sfp+0x60>
 80079f6:	bf00      	nop
 80079f8:	08008f5c 	.word	0x08008f5c
 80079fc:	ffff0001 	.word	0xffff0001

08007a00 <_fwalk_reent>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4606      	mov	r6, r0
 8007a06:	4688      	mov	r8, r1
 8007a08:	2700      	movs	r7, #0
 8007a0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a12:	f1b9 0901 	subs.w	r9, r9, #1
 8007a16:	d505      	bpl.n	8007a24 <_fwalk_reent+0x24>
 8007a18:	6824      	ldr	r4, [r4, #0]
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	d1f7      	bne.n	8007a0e <_fwalk_reent+0xe>
 8007a1e:	4638      	mov	r0, r7
 8007a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a24:	89ab      	ldrh	r3, [r5, #12]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d907      	bls.n	8007a3a <_fwalk_reent+0x3a>
 8007a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	d003      	beq.n	8007a3a <_fwalk_reent+0x3a>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4630      	mov	r0, r6
 8007a36:	47c0      	blx	r8
 8007a38:	4307      	orrs	r7, r0
 8007a3a:	3568      	adds	r5, #104	; 0x68
 8007a3c:	e7e9      	b.n	8007a12 <_fwalk_reent+0x12>

08007a3e <__retarget_lock_init_recursive>:
 8007a3e:	4770      	bx	lr

08007a40 <__retarget_lock_acquire_recursive>:
 8007a40:	4770      	bx	lr

08007a42 <__retarget_lock_release_recursive>:
 8007a42:	4770      	bx	lr

08007a44 <__swhatbuf_r>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	460e      	mov	r6, r1
 8007a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	461d      	mov	r5, r3
 8007a52:	b096      	sub	sp, #88	; 0x58
 8007a54:	da07      	bge.n	8007a66 <__swhatbuf_r+0x22>
 8007a56:	2300      	movs	r3, #0
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	89b3      	ldrh	r3, [r6, #12]
 8007a5c:	061a      	lsls	r2, r3, #24
 8007a5e:	d410      	bmi.n	8007a82 <__swhatbuf_r+0x3e>
 8007a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a64:	e00e      	b.n	8007a84 <__swhatbuf_r+0x40>
 8007a66:	466a      	mov	r2, sp
 8007a68:	f000 f96c 	bl	8007d44 <_fstat_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dbf2      	blt.n	8007a56 <__swhatbuf_r+0x12>
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a7a:	425a      	negs	r2, r3
 8007a7c:	415a      	adcs	r2, r3
 8007a7e:	602a      	str	r2, [r5, #0]
 8007a80:	e7ee      	b.n	8007a60 <__swhatbuf_r+0x1c>
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	2000      	movs	r0, #0
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	b016      	add	sp, #88	; 0x58
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}

08007a8c <__smakebuf_r>:
 8007a8c:	898b      	ldrh	r3, [r1, #12]
 8007a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a90:	079d      	lsls	r5, r3, #30
 8007a92:	4606      	mov	r6, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	d507      	bpl.n	8007aa8 <__smakebuf_r+0x1c>
 8007a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	6163      	str	r3, [r4, #20]
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	466a      	mov	r2, sp
 8007aaa:	ab01      	add	r3, sp, #4
 8007aac:	f7ff ffca 	bl	8007a44 <__swhatbuf_r>
 8007ab0:	9900      	ldr	r1, [sp, #0]
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 f875 	bl	8007ba4 <_malloc_r>
 8007aba:	b948      	cbnz	r0, 8007ad0 <__smakebuf_r+0x44>
 8007abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac0:	059a      	lsls	r2, r3, #22
 8007ac2:	d4ef      	bmi.n	8007aa4 <__smakebuf_r+0x18>
 8007ac4:	f023 0303 	bic.w	r3, r3, #3
 8007ac8:	f043 0302 	orr.w	r3, r3, #2
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	e7e3      	b.n	8007a98 <__smakebuf_r+0xc>
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <__smakebuf_r+0x7c>)
 8007ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	6020      	str	r0, [r4, #0]
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	6120      	str	r0, [r4, #16]
 8007ae2:	6163      	str	r3, [r4, #20]
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	b15b      	cbz	r3, 8007b00 <__smakebuf_r+0x74>
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aee:	f000 f93b 	bl	8007d68 <_isatty_r>
 8007af2:	b128      	cbz	r0, 8007b00 <__smakebuf_r+0x74>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	89a0      	ldrh	r0, [r4, #12]
 8007b02:	4305      	orrs	r5, r0
 8007b04:	81a5      	strh	r5, [r4, #12]
 8007b06:	e7cd      	b.n	8007aa4 <__smakebuf_r+0x18>
 8007b08:	0800789d 	.word	0x0800789d

08007b0c <_free_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d043      	beq.n	8007b9c <_free_r+0x90>
 8007b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b18:	1f0c      	subs	r4, r1, #4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfb8      	it	lt
 8007b1e:	18e4      	addlt	r4, r4, r3
 8007b20:	f000 f944 	bl	8007dac <__malloc_lock>
 8007b24:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <_free_r+0x94>)
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	4610      	mov	r0, r2
 8007b2a:	b933      	cbnz	r3, 8007b3a <_free_r+0x2e>
 8007b2c:	6063      	str	r3, [r4, #4]
 8007b2e:	6014      	str	r4, [r2, #0]
 8007b30:	4628      	mov	r0, r5
 8007b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b36:	f000 b93f 	b.w	8007db8 <__malloc_unlock>
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	d90a      	bls.n	8007b54 <_free_r+0x48>
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	1862      	adds	r2, r4, r1
 8007b42:	4293      	cmp	r3, r2
 8007b44:	bf01      	itttt	eq
 8007b46:	681a      	ldreq	r2, [r3, #0]
 8007b48:	685b      	ldreq	r3, [r3, #4]
 8007b4a:	1852      	addeq	r2, r2, r1
 8007b4c:	6022      	streq	r2, [r4, #0]
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	6004      	str	r4, [r0, #0]
 8007b52:	e7ed      	b.n	8007b30 <_free_r+0x24>
 8007b54:	461a      	mov	r2, r3
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	b10b      	cbz	r3, 8007b5e <_free_r+0x52>
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	d9fa      	bls.n	8007b54 <_free_r+0x48>
 8007b5e:	6811      	ldr	r1, [r2, #0]
 8007b60:	1850      	adds	r0, r2, r1
 8007b62:	42a0      	cmp	r0, r4
 8007b64:	d10b      	bne.n	8007b7e <_free_r+0x72>
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	4401      	add	r1, r0
 8007b6a:	1850      	adds	r0, r2, r1
 8007b6c:	4283      	cmp	r3, r0
 8007b6e:	6011      	str	r1, [r2, #0]
 8007b70:	d1de      	bne.n	8007b30 <_free_r+0x24>
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4401      	add	r1, r0
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	6053      	str	r3, [r2, #4]
 8007b7c:	e7d8      	b.n	8007b30 <_free_r+0x24>
 8007b7e:	d902      	bls.n	8007b86 <_free_r+0x7a>
 8007b80:	230c      	movs	r3, #12
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	e7d4      	b.n	8007b30 <_free_r+0x24>
 8007b86:	6820      	ldr	r0, [r4, #0]
 8007b88:	1821      	adds	r1, r4, r0
 8007b8a:	428b      	cmp	r3, r1
 8007b8c:	bf01      	itttt	eq
 8007b8e:	6819      	ldreq	r1, [r3, #0]
 8007b90:	685b      	ldreq	r3, [r3, #4]
 8007b92:	1809      	addeq	r1, r1, r0
 8007b94:	6021      	streq	r1, [r4, #0]
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	6054      	str	r4, [r2, #4]
 8007b9a:	e7c9      	b.n	8007b30 <_free_r+0x24>
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200001c4 	.word	0x200001c4

08007ba4 <_malloc_r>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	1ccd      	adds	r5, r1, #3
 8007ba8:	f025 0503 	bic.w	r5, r5, #3
 8007bac:	3508      	adds	r5, #8
 8007bae:	2d0c      	cmp	r5, #12
 8007bb0:	bf38      	it	cc
 8007bb2:	250c      	movcc	r5, #12
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	db01      	blt.n	8007bbe <_malloc_r+0x1a>
 8007bba:	42a9      	cmp	r1, r5
 8007bbc:	d903      	bls.n	8007bc6 <_malloc_r+0x22>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc6:	f000 f8f1 	bl	8007dac <__malloc_lock>
 8007bca:	4921      	ldr	r1, [pc, #132]	; (8007c50 <_malloc_r+0xac>)
 8007bcc:	680a      	ldr	r2, [r1, #0]
 8007bce:	4614      	mov	r4, r2
 8007bd0:	b99c      	cbnz	r4, 8007bfa <_malloc_r+0x56>
 8007bd2:	4f20      	ldr	r7, [pc, #128]	; (8007c54 <_malloc_r+0xb0>)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	b923      	cbnz	r3, 8007be2 <_malloc_r+0x3e>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f83c 	bl	8007c58 <_sbrk_r>
 8007be0:	6038      	str	r0, [r7, #0]
 8007be2:	4629      	mov	r1, r5
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f837 	bl	8007c58 <_sbrk_r>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d123      	bne.n	8007c36 <_malloc_r+0x92>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	f000 f8e0 	bl	8007db8 <__malloc_unlock>
 8007bf8:	e7e3      	b.n	8007bc2 <_malloc_r+0x1e>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	1b5b      	subs	r3, r3, r5
 8007bfe:	d417      	bmi.n	8007c30 <_malloc_r+0x8c>
 8007c00:	2b0b      	cmp	r3, #11
 8007c02:	d903      	bls.n	8007c0c <_malloc_r+0x68>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	441c      	add	r4, r3
 8007c08:	6025      	str	r5, [r4, #0]
 8007c0a:	e004      	b.n	8007c16 <_malloc_r+0x72>
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	42a2      	cmp	r2, r4
 8007c10:	bf0c      	ite	eq
 8007c12:	600b      	streq	r3, [r1, #0]
 8007c14:	6053      	strne	r3, [r2, #4]
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 f8ce 	bl	8007db8 <__malloc_unlock>
 8007c1c:	f104 000b 	add.w	r0, r4, #11
 8007c20:	1d23      	adds	r3, r4, #4
 8007c22:	f020 0007 	bic.w	r0, r0, #7
 8007c26:	1ac2      	subs	r2, r0, r3
 8007c28:	d0cc      	beq.n	8007bc4 <_malloc_r+0x20>
 8007c2a:	1a1b      	subs	r3, r3, r0
 8007c2c:	50a3      	str	r3, [r4, r2]
 8007c2e:	e7c9      	b.n	8007bc4 <_malloc_r+0x20>
 8007c30:	4622      	mov	r2, r4
 8007c32:	6864      	ldr	r4, [r4, #4]
 8007c34:	e7cc      	b.n	8007bd0 <_malloc_r+0x2c>
 8007c36:	1cc4      	adds	r4, r0, #3
 8007c38:	f024 0403 	bic.w	r4, r4, #3
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d0e3      	beq.n	8007c08 <_malloc_r+0x64>
 8007c40:	1a21      	subs	r1, r4, r0
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f808 	bl	8007c58 <_sbrk_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d1dd      	bne.n	8007c08 <_malloc_r+0x64>
 8007c4c:	e7cf      	b.n	8007bee <_malloc_r+0x4a>
 8007c4e:	bf00      	nop
 8007c50:	200001c4 	.word	0x200001c4
 8007c54:	200001c8 	.word	0x200001c8

08007c58 <_sbrk_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4d05      	ldr	r5, [pc, #20]	; (8007c74 <_sbrk_r+0x1c>)
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7f9 ff84 	bl	8001b70 <_sbrk>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_sbrk_r+0x1a>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_sbrk_r+0x1a>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200001dc 	.word	0x200001dc

08007c78 <__sread>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	f000 f8a0 	bl	8007dc4 <_read_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	bfab      	itete	ge
 8007c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c8c:	181b      	addge	r3, r3, r0
 8007c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c92:	bfac      	ite	ge
 8007c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c96:	81a3      	strhlt	r3, [r4, #12]
 8007c98:	bd10      	pop	{r4, pc}

08007c9a <__swrite>:
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	898b      	ldrh	r3, [r1, #12]
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	05db      	lsls	r3, r3, #23
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	4616      	mov	r6, r2
 8007caa:	d505      	bpl.n	8007cb8 <__swrite+0x1e>
 8007cac:	2302      	movs	r3, #2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb4:	f000 f868 	bl	8007d88 <_lseek_r>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	4632      	mov	r2, r6
 8007cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cce:	f000 b817 	b.w	8007d00 <_write_r>

08007cd2 <__sseek>:
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cda:	f000 f855 	bl	8007d88 <_lseek_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	bf15      	itete	ne
 8007ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cee:	81a3      	strheq	r3, [r4, #12]
 8007cf0:	bf18      	it	ne
 8007cf2:	81a3      	strhne	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__sclose>:
 8007cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfa:	f000 b813 	b.w	8007d24 <_close_r>
	...

08007d00 <_write_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4d05      	ldr	r5, [pc, #20]	; (8007d20 <_write_r+0x20>)
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7f9 fee2 	bl	8001ad8 <_write>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_write_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_write_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	200001dc 	.word	0x200001dc

08007d24 <_close_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	2300      	movs	r3, #0
 8007d28:	4d05      	ldr	r5, [pc, #20]	; (8007d40 <_close_r+0x1c>)
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7f9 feee 	bl	8001b10 <_close>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_close_r+0x1a>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_close_r+0x1a>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	200001dc 	.word	0x200001dc

08007d44 <_fstat_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	2300      	movs	r3, #0
 8007d48:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_fstat_r+0x20>)
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	f7f9 fee8 	bl	8001b26 <_fstat>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d102      	bne.n	8007d60 <_fstat_r+0x1c>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	b103      	cbz	r3, 8007d60 <_fstat_r+0x1c>
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	200001dc 	.word	0x200001dc

08007d68 <_isatty_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4d05      	ldr	r5, [pc, #20]	; (8007d84 <_isatty_r+0x1c>)
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f7f9 fee6 	bl	8001b44 <_isatty>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_isatty_r+0x1a>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_isatty_r+0x1a>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	200001dc 	.word	0x200001dc

08007d88 <_lseek_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	2200      	movs	r2, #0
 8007d92:	4d05      	ldr	r5, [pc, #20]	; (8007da8 <_lseek_r+0x20>)
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f7f9 fede 	bl	8001b58 <_lseek>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_lseek_r+0x1e>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_lseek_r+0x1e>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	200001dc 	.word	0x200001dc

08007dac <__malloc_lock>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__malloc_lock+0x8>)
 8007dae:	f7ff be47 	b.w	8007a40 <__retarget_lock_acquire_recursive>
 8007db2:	bf00      	nop
 8007db4:	200001d4 	.word	0x200001d4

08007db8 <__malloc_unlock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__malloc_unlock+0x8>)
 8007dba:	f7ff be42 	b.w	8007a42 <__retarget_lock_release_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200001d4 	.word	0x200001d4

08007dc4 <_read_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4d05      	ldr	r5, [pc, #20]	; (8007de4 <_read_r+0x20>)
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 fe63 	bl	8001a9e <_read>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_read_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_read_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200001dc 	.word	0x200001dc

08007de8 <_init>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr

08007df4 <_fini>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr
